using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using Jaxis.Engine.Base.Device;
using Jaxis.Interfaces;
using Jaxis.MessageLibrary;
using Jaxis.Util.Log4Net;
using System.Globalization;

namespace Jaxis.Readers.Trish
{
    public class TrishReader : BaseProducerDevice, IProducer
    {
        /*
        <DeviceConfig>
            <AssemblyName>Sprint.dll</AssemblyName>
            <AssemblyType>Jaxis.Readers.Sprint.TrishReader</AssemblyType>
            <AssemblyVersion>1.0</AssemblyVersion>
            <ID>TRISH</ID>
            <Name>TRISH</Name>
            <Type>DataProducer</Type>
            <State>Started</State>
            <ConsumerMessageType>0</ConsumerMessageType>
            <ProducerMessageType>1</ProducerMessageType>
            <Options>
                <string>COM3</string>
                <string>10</string>
                <string>10000</string>
                <string>Default Event</string>
                <string>true</string>
            </Options>
        </DeviceConfig>
        */

        [Obfuscation(Exclude = true)]
        public static DeviceConfig GetDefaultDeviceConfig()
        {
            DeviceConfig rc = new DeviceConfig();
            System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
            rc.AssemblyName = Asm.ManifestModule.Name;
            rc.AssemblyType = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.FullName;
            rc.AssemblyVersion = System.Diagnostics.FileVersionInfo.GetVersionInfo(BaseDevice.GetPath() + "\\" + rc.AssemblyName).FileVersion;
            rc.ID = Guid.NewGuid().ToString();
            rc.Name = "Trish Reader";
            rc.Type = DeviceType.DataProducer;
            rc.State = DeviceState.Stopped;
            rc.ProducerMessageType = 16;
            rc.ConsumerMessageType = 0;
            var option = new DeviceConfigOption();
            option.Name = "ComPort/IP Address";
            option.Value = "COM3";
            rc.Options.Add(option);

            option = new DeviceConfigOption();
            option.Name = "Poll Interval";
            option.Value = "10";
            rc.Options.Add(option);
            
            option = new DeviceConfigOption();
            option.Name = "OverPour";
            option.Value = "10000";
            rc.Options.Add(option);
            
            option = new DeviceConfigOption();
            option.Name = "Location";
            option.Value = "";
            rc.Options.Add(option);
            
            option = new DeviceConfigOption();
            option.Name = "Simulator";
            option.Value = "true";
            rc.Options.Add(option);
            
            return rc;
        }

        protected ICommunicationManager m_Comms = null;
        private System.Threading.Thread m_Worker;

        protected string m_CRLF = new string( new char[] { (char)0x0d, (char)0x0a } );
        private const string m_EMPTY = "EMPTY";

                
        public TrishReader( )
            : this(GetDefaultDeviceConfig())
        {
        }


        public TrishReader( IDeviceConfig _config )
            : base( _config )
        {
            try
            {
                Log.Debug( _config.GetType( ).ToString( ) );

                Log.Debug( "Create TrishReader Reader" );
                Config.Type = DeviceType.DataProducer;
            }
            catch( Exception exp )
            {
                Log.WriteException( "Sprint-TrishReader::TrishReader", exp );
            }
        }

        override public void Start( )
        {
            try
            {
                Log.Debug( string.Format( "Start TrishReader" ) );

                if( null != m_DeviceConfig )
                {
                    if( !Config.GetSimulator( ) )
                    {
                        string portName = m_DeviceConfig.GetPortName();
                        Log.Debug(string.Format("Start TrishReader on {0}", portName));

                        if (portName.Contains("."))
                        {
                            string[] data = portName.Split(':');
                            m_Comms = new TCPCommuncationManager( data[0], data[1] );
                        }
                        else
                        {
                            m_Comms = new SerialCommunication(m_DeviceConfig.GetBaudRate(), m_DeviceConfig.GetParity(),
                                                               m_DeviceConfig.GetStopBits(), m_DeviceConfig.GetDataBits(),
                                                               portName);
                        }
                        if (true == m_Comms.Open())
                        {
                            State = DeviceState.Started;
                            Config.State = DeviceState.Started;
                            m_Stop = false;
                            m_Worker = new System.Threading.Thread( PollTrish );
                            m_Worker.Start();
                        }
                        else
                        {
                            Log.Warn( "TrishReader not open on {0}", m_DeviceConfig.GetPortName());
                            Stop();
                        }
                    }
                    else
                    {
                        State = DeviceState.Started;
                        Config.State = DeviceState.Started;
                        m_Stop = false;
                        m_Worker = new System.Threading.Thread( SimulateData );
                        m_Worker.Start( );
                    }
                }
            }
            catch( Exception exp )
            {
                Log.WriteException( "TrishReader:: Start", exp );
            }
        }

        override public void Stop( )
        {
            try
            {
                State = DeviceState.Stopped;
                Config.State = DeviceState.Stopped;
            }
            catch( Exception exp )
            {
                Log.WriteException( "Sprint-TrishReader:: Stop", exp );
            }
            finally
            {
                m_Stop = true;
            }
        }

        private void PollTrish()
        {
            int SleepTime = m_DeviceConfig.GetFrequency( );
            Log.Debug( "TrishReader: Sleep Time = " + SleepTime );
            while( !m_Stop )
            {
                string Command = "Poll100_" + (char)0x0d + (char)0x0a;
                Log.Debug( "TrishReader", "Message: " + Command );
                m_Comms.WriteData( Command );
                System.Threading.Thread.Sleep( 1500 );
                ProcessData( m_Comms.Data );
                System.Threading.Thread.Sleep( SleepTime * 1000 );

                #warning Need to see if we should send a "Detach" message....how do we do that?
            }
        }


        private void SimulateData( )
        {
            int SleepTime = m_DeviceConfig.GetFrequency( );
            Log.Debug( "SIMULATED TrishReader: Sleep Time = " + SleepTime );
            Random rnd = new Random();
            while( !m_Stop )
            {
                //ProcessData( "2010-11-11,21:49:11,122,002,000003.386,00.312,29" );

                var date = DateTime.Now.ToString("yyyy-MM-dd, HH:mm:ss");

                ProcessData(string.Format("{1},122,122,000001.329,{0:00.000},18", rnd.NextDouble(), date));
                System.Threading.Thread.Sleep( SleepTime * 1000 );
            }
        }

        protected void ProcessData( string _data )
        {
            try
            {
                if( !string.IsNullOrWhiteSpace( _data ) )
                {
                    string[] strips = _data.Replace( m_CRLF, "|" ).Replace( "\0", "").Split( '|' );
                    foreach( var strip in strips )
                    {
                        if( !string.IsNullOrWhiteSpace( strip ) &&
                            !strip.Equals(m_EMPTY, StringComparison.CurrentCultureIgnoreCase))
                        {
                            Log.Debug("TrishReader", "Strip: " + strip);
                            string[] Data = strip.Split(',');

                            var rawTotal = Convert.ToDouble(Data[4], CultureInfo.InvariantCulture);
                            var rawPour = Convert.ToDouble(Data[5], CultureInfo.InvariantCulture);
                            Log.Debug(string.Format("Raw Total {0} - Raw UnreconciledPour {1}", rawTotal, rawPour));

                            var pour = new TrishPour
                            {
                                DeviceID = this.m_DeviceConfig.ID,
                                ReadTime = DateTime.Parse(string.Format("{0} {1}", Data[0], Data[1])),
                                ServingBar = Convert.ToInt32(Data[2]),
                                PLUNumber = Convert.ToInt32(Data[3]),
                                TotalLiters = rawTotal * 1000, // bottle size - amt in bottle
                                PouredLiters = rawPour * 1000, //pur amt
                                Sequence = Convert.ToInt16(Data[6]),
                                RawData = strip
                            };

                            Log.Debug(string.Format("Total {0} - UnreconciledPour {1}", pour.TotalLiters, pour.PouredLiters));

                            ProduceMessage( pour );
                        }
                    }
                }
            }
            catch( Exception err )
            {
                Log.Debug( err.Message );
            }
        }

        private void SendMessage( IMessage _tag )
        {
            try
            {
                if( _tag != null )
                {
                    ProduceMessage( _tag );
                }
            }
            catch( Exception exp )
            {
                Log.WriteException( "TrishReader:: SendMessage", exp );
            }
        }

        private void SendPourMessage( IMessage _tag )
        {
            try
            {
                ProduceMessage( _tag );
            }
            catch( Exception exp )
            {
                Log.WriteException( "TrishReader:: SendPourMessage", exp );
            }
        }
    }
}