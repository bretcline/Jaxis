//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Objects;
using System.Linq;
using Jaxis.DrinkInventory.Reporting.DataInterfaces;

namespace Jaxis.DrinkInventory.Reporting.Data
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class DrinkReportingEntities : ObjectContext
    {
    	private Dictionary<Type, ObjectQuery> m_ObjectSets;
    	private Dictionary<Type, ObjectQuery> ObjectSets
    	{
    		get
    		{
    			if( m_ObjectSets == null )
    			{
    				m_ObjectSets = new Dictionary<Type, ObjectQuery>( );
    				m_ObjectSets[ typeof( IAlert ) ] = Alerts;
    				m_ObjectSets[ typeof( IAreaMembership ) ] = AreaMemberships;
    				m_ObjectSets[ typeof( IArea ) ] = Areas;
    				m_ObjectSets[ typeof( IColumn ) ] = Columns;
    				m_ObjectSets[ typeof( IDevice ) ] = Devices;
    				m_ObjectSets[ typeof( IOrganization ) ] = Organizations;
    				m_ObjectSets[ typeof( IParameter ) ] = Parameters;
    				m_ObjectSets[ typeof( IPOSTicketItem ) ] = POSTicketItems;
    				m_ObjectSets[ typeof( IPour ) ] = Pours;
    				m_ObjectSets[ typeof( IReport ) ] = Reports;
    				m_ObjectSets[ typeof( ISchema ) ] = Schemata;
    				m_ObjectSets[ typeof( ISecurityView ) ] = SecurityViews;
    				m_ObjectSets[ typeof( ISession ) ] = Sessions;
    				m_ObjectSets[ typeof( IUPC ) ] = UPCs;
    				m_ObjectSets[ typeof( IUserGroupMembership ) ] = UserGroupMemberships;
    				m_ObjectSets[ typeof( IUserGroup ) ] = UserGroups;
    				m_ObjectSets[ typeof( IUserGroupXOrganization ) ] = UserGroupXOrganizations;
    				m_ObjectSets[ typeof( IUser ) ] = Users;
    			}
    			return m_ObjectSets;
    		}
    	}
    
    	public ObjectSet<T> GetObjectSet<I, T>( ) where T : class, I
    	{
    		return ( ObjectSet<T> ) ObjectSets[ typeof( I ) ];
    	}
    
        public IQueryable<ObjectStateEntry> GetAllEntries( )
        {
    		return ObjectStateManager.GetObjectStateEntries( EntityState.Added | EntityState.Deleted | EntityState.Modified | EntityState.Unchanged ).AsQueryable( );
        }
    }
    

    #endregion
}
