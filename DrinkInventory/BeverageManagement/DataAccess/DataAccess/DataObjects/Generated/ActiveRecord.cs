


using System;
using System.Reflection;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using SubSonic.DataProviders;
using SubSonic.Extensions;
using System.Linq.Expressions;
using SubSonic.Schema;
using System.Collections;
using SubSonic;
using SubSonic.Repository;
using System.ComponentModel;
using System.Data.Common;
using SubSonic.SqlGeneration.Schema;

namespace Jaxis.Inventory.Data
{
	public interface IWCFDataElement
	{
		IBaseDataObject CreateDBObject( );
	}

    public interface ICallOnCreated
    {
        void CallOnCreated( bool _CallOnCreated);
    }

    public static class ActiveRecordExtensions
    {
        public static T SingleOrDefault<T>( this IRepository<T> _repo, Expression<Func<T, bool>> expression ) where T : IActiveRecord
        {
            var results = _repo.Find( expression );
            T single = default( T );
            foreach ( T i in results )
            {
                single = i;
                single.SetIsLoaded( true );
                single.SetIsNew( false );
                break;
            }
            return single;
        }
    }

	public interface IBaseDataObject
	{
        bool IsNew();
        void SetIsNew(bool isNew);
        bool IsLoaded();
		void Save( );
	}

    public abstract class BaseDataObject<T> : IBaseDataObject where T : class, new( )
    {
        protected ITable tbl;
        protected bool _isNew;

        protected T m_Internal = default(T);

        public T GetInternalData( )
        {
            return m_Internal;
        }
    

        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }

        protected bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        protected List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

		public abstract void Save( );

    }



    [DataContract]
    public partial class DataActivityLog : IWCFDataElement
    {
        [DataMember]
        public Guid ActivityLogID { get; set; }
        [DataMember]
        public int ActivityIndex { get; set; }
        [DataMember]
        public Guid TagID { get; set; }
        [DataMember]
        public Guid DeviceID { get; set; }
        [DataMember]
        public Guid LocationID { get; set; }
        [DataMember]
        public DateTime ActivityTime { get; set; }
        [DataMember]
        public double SignalStrength { get; set; }
        [DataMember]
        public int ActivityTypeID { get; set; }
        [DataMember]
        public string RawData { get; set; }

        public void Copy( DataActivityLog _Item )
        {
             ActivityIndex = _Item.ActivityIndex;			
             TagID = _Item.TagID;			
             DeviceID = _Item.DeviceID;			
             LocationID = _Item.LocationID;			
             ActivityTime = _Item.ActivityTime;			
             SignalStrength = _Item.SignalStrength;			
             ActivityTypeID = _Item.ActivityTypeID;			
             RawData = _Item.RawData;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new ActivityLog( this );
        }


    }


    /// <summary>
    /// A class which represents the ActivityLogs table in the BeverageMonitor Database.
    /// </summary>
    public partial class ActivityLog: BaseDataObject<DataActivityLog>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<ActivityLog> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<ActivityLog>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<ActivityLog> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(ActivityLog item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                ActivityLog item=new ActivityLog();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<ActivityLog> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public ActivityLog()
        {
            m_Internal = new DataActivityLog();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.ActivityLogID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public ActivityLog( bool _CallOnCreated )
        {
            m_Internal = new DataActivityLog();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public ActivityLog(string connectionString, string providerName) 
        {
            m_Internal = new DataActivityLog();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.ActivityLogID = Guid.NewGuid( );     
        }

        public ActivityLog( ActivityLog _Item )
        {
            m_Internal = new DataActivityLog();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public ActivityLog( DataActivityLog _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( ActivityLog _Item )
        {
            m_Internal.ActivityIndex = _Item.ActivityIndex;			
            m_Internal.TagID = _Item.TagID;			
            m_Internal.DeviceID = _Item.DeviceID;			
            m_Internal.LocationID = _Item.LocationID;			
            m_Internal.ActivityTime = _Item.ActivityTime;			
            m_Internal.SignalStrength = _Item.SignalStrength;			
            m_Internal.ActivityTypeID = _Item.ActivityTypeID;			
            m_Internal.RawData = _Item.RawData;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.ActivityLogID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                ActivityLog.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ActivityLog>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public ActivityLog(Expression<Func<ActivityLog, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<ActivityLog> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<ActivityLog> _repo;
            
            if(db.TestMode)
            {
                ActivityLog.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ActivityLog>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ActivityLog> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static ActivityLog SingleOrDefault(Expression<Func<ActivityLog, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static ActivityLog SingleOrDefault(Expression<Func<ActivityLog, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<ActivityLog> repo = GetRepo(connectionString,providerName);
            ActivityLog single = repo.SingleOrDefault<ActivityLog>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<ActivityLog, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<ActivityLog, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyActivityLogLoaded = false;
        protected static ActivityLog EmptyActivityLogMember = null;

        public static ActivityLog GetByID(Guid? value) 
        {
            ActivityLog rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static ActivityLog GetByID(Guid value) 
        {
            ActivityLog rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyActivityLogLoaded )
                    {
                        rc = EmptyActivityLogMember;
                    }
                    else
                    {
                        IsEmptyActivityLogLoaded = true;
                        rc = ActivityLog.Find( L => L.ActivityLogID.Equals( value ) ).FirstOrDefault( );
                        EmptyActivityLogMember = rc;
                    }
                }
                else
                {
                    rc = ActivityLog.Find( L => L.ActivityLogID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<ActivityLog> Find(Expression<Func<ActivityLog, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ActivityLog> Find(Expression<Func<ActivityLog, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<ActivityLog> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<ActivityLog> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ActivityLog> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ActivityLog> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ActivityLog> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<ActivityLog> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "ActivityLogID";
        }

        public object KeyValue()
        {
            return this.ActivityLogID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.RawData )
//			{
//				rc = this.RawData.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is ActivityLog)
            {
                ActivityLog compare=(ActivityLog)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.ActivityLogID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.RawData.ToString();
        }

        public string DescriptorColumn() 
        {
            return "RawData";
        }

        public static string GetKeyColumn()
        {
            return "ActivityLogID";
        }        

        public static string GetDescriptorColumn()
        {
            return "RawData";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Device> DevicesItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Device.GetRepo();
                  return from items in repo.GetAll()
                       where items.DeviceID == m_Internal.DeviceID
                       select items;
            }
        }
        public IQueryable<Location> LocationsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Location.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        public IQueryable<Tag> TagsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Tag.GetRepo();
                  return from items in repo.GetAll()
                       where items.TagID == m_Internal.TagID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.ActivityLogID;
            }
            set
            {
                m_Internal.ActivityLogID = value;
            }
        }


//        Guid _ActivityLogID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid ActivityLogID
        {
            get { return m_Internal.ActivityLogID; }
            set
            {
                if(m_Internal.ActivityLogID!=value){
                    m_Internal.ActivityLogID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActivityLogID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _ActivityIndex;
        [LocalData]
        public int ActivityIndex
        {
            get { return m_Internal.ActivityIndex; }
            set
            {
                if(m_Internal.ActivityIndex!=value){
                    m_Internal.ActivityIndex=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActivityIndex");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _TagID;
        [LocalData]
        public Guid TagID
        {
            get { return m_Internal.TagID; }
            set
            {
                if(m_Internal.TagID!=value){
                    m_Internal.TagID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _DeviceID;
        [LocalData]
        public Guid DeviceID
        {
            get { return m_Internal.DeviceID; }
            set
            {
                if(m_Internal.DeviceID!=value){
                    m_Internal.DeviceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeviceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _LocationID;
        [LocalData]
        public Guid LocationID
        {
            get { return m_Internal.LocationID; }
            set
            {
                if(m_Internal.LocationID!=value){
                    m_Internal.LocationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _ActivityTime;
        [LocalData]
        public DateTime ActivityTime
        {
            get { return m_Internal.ActivityTime; }
            set
            {
                if(m_Internal.ActivityTime!=value){
                    m_Internal.ActivityTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActivityTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _SignalStrength;
        [LocalData]
        public double SignalStrength
        {
            get { return m_Internal.SignalStrength; }
            set
            {
                if(m_Internal.SignalStrength!=value){
                    m_Internal.SignalStrength=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SignalStrength");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _ActivityTypeID;
        [LocalData]
        public int ActivityTypeID
        {
            get { return m_Internal.ActivityTypeID; }
            set
            {
                if(m_Internal.ActivityTypeID!=value){
                    m_Internal.ActivityTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActivityTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RawData;
        [LocalData]
        public string RawData
        {
            get { return m_Internal.RawData; }
            set
            {
                if(m_Internal.RawData!=value){
                    m_Internal.RawData=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RawData");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<ActivityLog, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataAdministrativeValue : IWCFDataElement
    {
        [DataMember]
        public Guid AdministrativeValueID { get; set; }
        [DataMember]
        public string PropertyName { get; set; }
        [DataMember]
        public string PropertyValue { get; set; }

        public void Copy( DataAdministrativeValue _Item )
        {
             PropertyName = _Item.PropertyName;			
             PropertyValue = _Item.PropertyValue;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new AdministrativeValue( this );
        }


    }


    /// <summary>
    /// A class which represents the AdministrativeValues table in the BeverageMonitor Database.
    /// </summary>
    public partial class AdministrativeValue: BaseDataObject<DataAdministrativeValue>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<AdministrativeValue> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<AdministrativeValue>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<AdministrativeValue> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(AdministrativeValue item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                AdministrativeValue item=new AdministrativeValue();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<AdministrativeValue> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public AdministrativeValue()
        {
            m_Internal = new DataAdministrativeValue();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.AdministrativeValueID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public AdministrativeValue( bool _CallOnCreated )
        {
            m_Internal = new DataAdministrativeValue();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public AdministrativeValue(string connectionString, string providerName) 
        {
            m_Internal = new DataAdministrativeValue();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.AdministrativeValueID = Guid.NewGuid( );     
        }

        public AdministrativeValue( AdministrativeValue _Item )
        {
            m_Internal = new DataAdministrativeValue();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public AdministrativeValue( DataAdministrativeValue _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( AdministrativeValue _Item )
        {
            m_Internal.PropertyName = _Item.PropertyName;			
            m_Internal.PropertyValue = _Item.PropertyValue;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.AdministrativeValueID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                AdministrativeValue.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<AdministrativeValue>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public AdministrativeValue(Expression<Func<AdministrativeValue, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<AdministrativeValue> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<AdministrativeValue> _repo;
            
            if(db.TestMode)
            {
                AdministrativeValue.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<AdministrativeValue>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AdministrativeValue> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static AdministrativeValue SingleOrDefault(Expression<Func<AdministrativeValue, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static AdministrativeValue SingleOrDefault(Expression<Func<AdministrativeValue, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<AdministrativeValue> repo = GetRepo(connectionString,providerName);
            AdministrativeValue single = repo.SingleOrDefault<AdministrativeValue>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<AdministrativeValue, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<AdministrativeValue, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyAdministrativeValueLoaded = false;
        protected static AdministrativeValue EmptyAdministrativeValueMember = null;

        public static AdministrativeValue GetByID(Guid? value) 
        {
            AdministrativeValue rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static AdministrativeValue GetByID(Guid value) 
        {
            AdministrativeValue rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyAdministrativeValueLoaded )
                    {
                        rc = EmptyAdministrativeValueMember;
                    }
                    else
                    {
                        IsEmptyAdministrativeValueLoaded = true;
                        rc = AdministrativeValue.Find( L => L.AdministrativeValueID.Equals( value ) ).FirstOrDefault( );
                        EmptyAdministrativeValueMember = rc;
                    }
                }
                else
                {
                    rc = AdministrativeValue.Find( L => L.AdministrativeValueID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<AdministrativeValue> Find(Expression<Func<AdministrativeValue, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AdministrativeValue> Find(Expression<Func<AdministrativeValue, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<AdministrativeValue> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<AdministrativeValue> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AdministrativeValue> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AdministrativeValue> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AdministrativeValue> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<AdministrativeValue> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "AdministrativeValueID";
        }

        public object KeyValue()
        {
            return this.AdministrativeValueID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.PropertyName )
//			{
//				rc = this.PropertyName.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is AdministrativeValue)
            {
                AdministrativeValue compare=(AdministrativeValue)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.AdministrativeValueID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.PropertyName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "PropertyName";
        }

        public static string GetKeyColumn()
        {
            return "AdministrativeValueID";
        }        

        public static string GetDescriptorColumn()
        {
            return "PropertyName";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.AdministrativeValueID;
            }
            set
            {
                m_Internal.AdministrativeValueID = value;
            }
        }


//        Guid _AdministrativeValueID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid AdministrativeValueID
        {
            get { return m_Internal.AdministrativeValueID; }
            set
            {
                if(m_Internal.AdministrativeValueID!=value){
                    m_Internal.AdministrativeValueID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdministrativeValueID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PropertyName;
        [LocalData]
        public string PropertyName
        {
            get { return m_Internal.PropertyName; }
            set
            {
                if(m_Internal.PropertyName!=value){
                    m_Internal.PropertyName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PropertyName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PropertyValue;
        [LocalData]
        public string PropertyValue
        {
            get { return m_Internal.PropertyValue; }
            set
            {
                if(m_Internal.PropertyValue!=value){
                    m_Internal.PropertyValue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PropertyValue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<AdministrativeValue, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataCategory : IWCFDataElement
    {
        [DataMember]
        public Guid CategoryID { get; set; }
        [DataMember]
        public Guid? ParentID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public Guid? StandardPriceID { get; set; }
        [DataMember]
        public Guid? StandardNozzleID { get; set; }

        public void Copy( DataCategory _Item )
        {
             ParentID = _Item.ParentID;			
             Name = _Item.Name;			
             Description = _Item.Description;			
             StandardPriceID = _Item.StandardPriceID;			
             StandardNozzleID = _Item.StandardNozzleID;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Category( this );
        }


    }


    /// <summary>
    /// A class which represents the Categories table in the BeverageMonitor Database.
    /// </summary>
    public partial class Category: BaseDataObject<DataCategory>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Category> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Category>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Category> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Category item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Category item=new Category();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Category> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Category()
        {
            m_Internal = new DataCategory();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.CategoryID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Category( bool _CallOnCreated )
        {
            m_Internal = new DataCategory();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Category(string connectionString, string providerName) 
        {
            m_Internal = new DataCategory();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.CategoryID = Guid.NewGuid( );     
        }

        public Category( Category _Item )
        {
            m_Internal = new DataCategory();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Category( DataCategory _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Category _Item )
        {
            m_Internal.ParentID = _Item.ParentID;			
            m_Internal.Name = _Item.Name;			
            m_Internal.Description = _Item.Description;			
            m_Internal.StandardPriceID = _Item.StandardPriceID;			
            m_Internal.StandardNozzleID = _Item.StandardNozzleID;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.CategoryID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Category.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Category>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Category(Expression<Func<Category, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Category> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Category> _repo;
            
            if(db.TestMode)
            {
                Category.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Category>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Category> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Category SingleOrDefault(Expression<Func<Category, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Category SingleOrDefault(Expression<Func<Category, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Category> repo = GetRepo(connectionString,providerName);
            Category single = repo.SingleOrDefault<Category>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Category, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Category, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyCategoryLoaded = false;
        protected static Category EmptyCategoryMember = null;

        public static Category GetByID(Guid? value) 
        {
            Category rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Category GetByID(Guid value) 
        {
            Category rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyCategoryLoaded )
                    {
                        rc = EmptyCategoryMember;
                    }
                    else
                    {
                        IsEmptyCategoryLoaded = true;
                        rc = Category.Find( L => L.CategoryID.Equals( value ) ).FirstOrDefault( );
                        EmptyCategoryMember = rc;
                    }
                }
                else
                {
                    rc = Category.Find( L => L.CategoryID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Category> Find(Expression<Func<Category, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Category> Find(Expression<Func<Category, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Category> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Category> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Category> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Category> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Category> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Category> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "CategoryID";
        }

        public object KeyValue()
        {
            return this.CategoryID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Category)
            {
                Category compare=(Category)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.CategoryID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "CategoryID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<StandardNozzle> StandardNozzlesItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.StandardNozzle.GetRepo();
                  return from items in repo.GetAll()
                       where items.StandardNozzleID == m_Internal.StandardNozzleID
                       select items;
            }
        }
        public IQueryable<StandardPrice> StandardPricingItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.StandardPrice.GetRepo();
                  return from items in repo.GetAll()
                       where items.StandardPriceID == m_Internal.StandardPriceID
                       select items;
            }
        }
        public IQueryable<Ingredient> Ingredients
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Ingredient.GetRepo();
                  return from items in repo.GetAll()
                       where items.CategoryID == m_Internal.CategoryID
                       select items;
            }
        }
        public IQueryable<Category> SubCategoryItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Category.GetRepo();
                  return from items in repo.GetAll()
                       where items.CategoryID == m_Internal.ParentID
                       select items;
            }
        }
        public IQueryable<UPC> UPCS
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UPC.GetRepo();
                  return from items in repo.GetAll()
                       where items.CategoryID == m_Internal.CategoryID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.CategoryID;
            }
            set
            {
                m_Internal.CategoryID = value;
            }
        }


//        Guid _CategoryID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid CategoryID
        {
            get { return m_Internal.CategoryID; }
            set
            {
                if(m_Internal.CategoryID!=value){
                    m_Internal.CategoryID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CategoryID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _ParentID;
        [LocalData]
        public Guid? ParentID
        {
            get { return m_Internal.ParentID; }
            set
            {
                if(m_Internal.ParentID!=value){
                    m_Internal.ParentID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParentID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _StandardPriceID;
        [LocalData]
        public Guid? StandardPriceID
        {
            get { return m_Internal.StandardPriceID; }
            set
            {
                if(m_Internal.StandardPriceID!=value){
                    m_Internal.StandardPriceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StandardPriceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _StandardNozzleID;
        [LocalData]
        public Guid? StandardNozzleID
        {
            get { return m_Internal.StandardNozzleID; }
            set
            {
                if(m_Internal.StandardNozzleID!=value){
                    m_Internal.StandardNozzleID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StandardNozzleID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Category, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataDatabaseVersion : IWCFDataElement
    {
        [DataMember]
        public int DatabaseVersionX { get; set; }

        public void Copy( DataDatabaseVersion _Item )
        {
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new DatabaseVersion( this );
        }


    }


    /// <summary>
    /// A class which represents the DatabaseVersion table in the BeverageMonitor Database.
    /// </summary>
    public partial class DatabaseVersion: BaseDataObject<DataDatabaseVersion>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<DatabaseVersion> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<DatabaseVersion>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<DatabaseVersion> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(DatabaseVersion item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                DatabaseVersion item=new DatabaseVersion();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<DatabaseVersion> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public DatabaseVersion()
        {
            m_Internal = new DataDatabaseVersion();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public DatabaseVersion( bool _CallOnCreated )
        {
            m_Internal = new DataDatabaseVersion();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public DatabaseVersion(string connectionString, string providerName) 
        {
            m_Internal = new DataDatabaseVersion();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public DatabaseVersion( DatabaseVersion _Item )
        {
            m_Internal = new DataDatabaseVersion();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public DatabaseVersion( DataDatabaseVersion _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( DatabaseVersion _Item )
        {
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                DatabaseVersion.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DatabaseVersion>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public DatabaseVersion(Expression<Func<DatabaseVersion, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<DatabaseVersion> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<DatabaseVersion> _repo;
            
            if(db.TestMode)
            {
                DatabaseVersion.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DatabaseVersion>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<DatabaseVersion> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static DatabaseVersion SingleOrDefault(Expression<Func<DatabaseVersion, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static DatabaseVersion SingleOrDefault(Expression<Func<DatabaseVersion, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<DatabaseVersion> repo = GetRepo(connectionString,providerName);
            DatabaseVersion single = repo.SingleOrDefault<DatabaseVersion>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<DatabaseVersion, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<DatabaseVersion, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static DatabaseVersion GetByID(int value) 
        {
            return DatabaseVersion.Find( L => L.DatabaseVersionX.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<DatabaseVersion> Find(Expression<Func<DatabaseVersion, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<DatabaseVersion> Find(Expression<Func<DatabaseVersion, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<DatabaseVersion> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<DatabaseVersion> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DatabaseVersion> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DatabaseVersion> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DatabaseVersion> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<DatabaseVersion> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "DatabaseVersionX";
        }

        public object KeyValue()
        {
            return this.DatabaseVersionX;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.DatabaseVersionX )
//			{
//				rc = this.DatabaseVersionX.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is DatabaseVersion)
            {
                DatabaseVersion compare=(DatabaseVersion)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public override int GetHashCode() 
        {
            return this.DatabaseVersionX;
        }


        public string DescriptorValue()
        {
            return this.DatabaseVersionX.ToString();
        }

        public string DescriptorColumn() 
        {
            return "DatabaseVersionX";
        }

        public static string GetKeyColumn()
        {
            return "DatabaseVersionX";
        }        

        public static string GetDescriptorColumn()
        {
            return "DatabaseVersionX";
        }
        
        #region ' Foreign Keys '
        #endregion



//        int _DatabaseVersionX;
        [SubSonicPrimaryKey]
        [LocalData]
        public int DatabaseVersionX
        {
            get { return m_Internal.DatabaseVersionX; }
            set
            {
                if(m_Internal.DatabaseVersionX!=value){
                    m_Internal.DatabaseVersionX=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DatabaseVersion");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<DatabaseVersion, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataDeviceAlert : IWCFDataElement
    {
        [DataMember]
        public Guid DeviceAlertID { get; set; }
        [DataMember]
        public Guid DeviceID { get; set; }
        [DataMember]
        public int AlertType { get; set; }
        [DataMember]
        public string Message { get; set; }
        [DataMember]
        public DateTime AlertTime { get; set; }

        public void Copy( DataDeviceAlert _Item )
        {
             DeviceID = _Item.DeviceID;			
             AlertType = _Item.AlertType;			
             Message = _Item.Message;			
             AlertTime = _Item.AlertTime;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new DeviceAlert( this );
        }


    }


    /// <summary>
    /// A class which represents the DeviceAlerts table in the BeverageMonitor Database.
    /// </summary>
    public partial class DeviceAlert: BaseDataObject<DataDeviceAlert>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<DeviceAlert> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<DeviceAlert>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<DeviceAlert> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(DeviceAlert item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                DeviceAlert item=new DeviceAlert();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<DeviceAlert> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public DeviceAlert()
        {
            m_Internal = new DataDeviceAlert();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.DeviceAlertID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public DeviceAlert( bool _CallOnCreated )
        {
            m_Internal = new DataDeviceAlert();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public DeviceAlert(string connectionString, string providerName) 
        {
            m_Internal = new DataDeviceAlert();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.DeviceAlertID = Guid.NewGuid( );     
        }

        public DeviceAlert( DeviceAlert _Item )
        {
            m_Internal = new DataDeviceAlert();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public DeviceAlert( DataDeviceAlert _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( DeviceAlert _Item )
        {
            m_Internal.DeviceID = _Item.DeviceID;			
            m_Internal.AlertType = _Item.AlertType;			
            m_Internal.Message = _Item.Message;			
            m_Internal.AlertTime = _Item.AlertTime;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.DeviceAlertID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                DeviceAlert.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeviceAlert>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public DeviceAlert(Expression<Func<DeviceAlert, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<DeviceAlert> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<DeviceAlert> _repo;
            
            if(db.TestMode)
            {
                DeviceAlert.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeviceAlert>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<DeviceAlert> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static DeviceAlert SingleOrDefault(Expression<Func<DeviceAlert, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static DeviceAlert SingleOrDefault(Expression<Func<DeviceAlert, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<DeviceAlert> repo = GetRepo(connectionString,providerName);
            DeviceAlert single = repo.SingleOrDefault<DeviceAlert>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<DeviceAlert, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<DeviceAlert, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyDeviceAlertLoaded = false;
        protected static DeviceAlert EmptyDeviceAlertMember = null;

        public static DeviceAlert GetByID(Guid? value) 
        {
            DeviceAlert rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static DeviceAlert GetByID(Guid value) 
        {
            DeviceAlert rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyDeviceAlertLoaded )
                    {
                        rc = EmptyDeviceAlertMember;
                    }
                    else
                    {
                        IsEmptyDeviceAlertLoaded = true;
                        rc = DeviceAlert.Find( L => L.DeviceAlertID.Equals( value ) ).FirstOrDefault( );
                        EmptyDeviceAlertMember = rc;
                    }
                }
                else
                {
                    rc = DeviceAlert.Find( L => L.DeviceAlertID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<DeviceAlert> Find(Expression<Func<DeviceAlert, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<DeviceAlert> Find(Expression<Func<DeviceAlert, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<DeviceAlert> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<DeviceAlert> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DeviceAlert> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DeviceAlert> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DeviceAlert> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<DeviceAlert> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "DeviceAlertID";
        }

        public object KeyValue()
        {
            return this.DeviceAlertID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Message )
//			{
//				rc = this.Message.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is DeviceAlert)
            {
                DeviceAlert compare=(DeviceAlert)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.DeviceAlertID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Message.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Message";
        }

        public static string GetKeyColumn()
        {
            return "DeviceAlertID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Message";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Device> DevicesItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Device.GetRepo();
                  return from items in repo.GetAll()
                       where items.DeviceID == m_Internal.DeviceID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.DeviceAlertID;
            }
            set
            {
                m_Internal.DeviceAlertID = value;
            }
        }


//        Guid _DeviceAlertID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid DeviceAlertID
        {
            get { return m_Internal.DeviceAlertID; }
            set
            {
                if(m_Internal.DeviceAlertID!=value){
                    m_Internal.DeviceAlertID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeviceAlertID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _DeviceID;
        [LocalData]
        public Guid DeviceID
        {
            get { return m_Internal.DeviceID; }
            set
            {
                if(m_Internal.DeviceID!=value){
                    m_Internal.DeviceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeviceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _AlertType;
        [LocalData]
        public int AlertType
        {
            get { return m_Internal.AlertType; }
            set
            {
                if(m_Internal.AlertType!=value){
                    m_Internal.AlertType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AlertType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Message;
        [LocalData]
        public string Message
        {
            get { return m_Internal.Message; }
            set
            {
                if(m_Internal.Message!=value){
                    m_Internal.Message=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Message");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _AlertTime;
        [LocalData]
        public DateTime AlertTime
        {
            get { return m_Internal.AlertTime; }
            set
            {
                if(m_Internal.AlertTime!=value){
                    m_Internal.AlertTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AlertTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<DeviceAlert, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataDevice : IWCFDataElement
    {
        [DataMember]
        public Guid DeviceID { get; set; }
        [DataMember]
        public string HardwareID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public string Settings { get; set; }

        public void Copy( DataDevice _Item )
        {
             HardwareID = _Item.HardwareID;			
             Name = _Item.Name;			
             Description = _Item.Description;			
             Settings = _Item.Settings;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Device( this );
        }


    }


    /// <summary>
    /// A class which represents the Devices table in the BeverageMonitor Database.
    /// </summary>
    public partial class Device: BaseDataObject<DataDevice>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Device> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Device>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Device> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Device item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Device item=new Device();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Device> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Device()
        {
            m_Internal = new DataDevice();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.DeviceID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Device( bool _CallOnCreated )
        {
            m_Internal = new DataDevice();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Device(string connectionString, string providerName) 
        {
            m_Internal = new DataDevice();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.DeviceID = Guid.NewGuid( );     
        }

        public Device( Device _Item )
        {
            m_Internal = new DataDevice();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Device( DataDevice _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Device _Item )
        {
            m_Internal.HardwareID = _Item.HardwareID;			
            m_Internal.Name = _Item.Name;			
            m_Internal.Description = _Item.Description;			
            m_Internal.Settings = _Item.Settings;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.DeviceID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Device.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Device>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Device(Expression<Func<Device, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Device> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Device> _repo;
            
            if(db.TestMode)
            {
                Device.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Device>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Device> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Device SingleOrDefault(Expression<Func<Device, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Device SingleOrDefault(Expression<Func<Device, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Device> repo = GetRepo(connectionString,providerName);
            Device single = repo.SingleOrDefault<Device>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Device, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Device, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyDeviceLoaded = false;
        protected static Device EmptyDeviceMember = null;

        public static Device GetByID(Guid? value) 
        {
            Device rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Device GetByID(Guid value) 
        {
            Device rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyDeviceLoaded )
                    {
                        rc = EmptyDeviceMember;
                    }
                    else
                    {
                        IsEmptyDeviceLoaded = true;
                        rc = Device.Find( L => L.DeviceID.Equals( value ) ).FirstOrDefault( );
                        EmptyDeviceMember = rc;
                    }
                }
                else
                {
                    rc = Device.Find( L => L.DeviceID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Device> Find(Expression<Func<Device, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Device> Find(Expression<Func<Device, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Device> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Device> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Device> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Device> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Device> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Device> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "DeviceID";
        }

        public object KeyValue()
        {
            return this.DeviceID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.HardwareID )
//			{
//				rc = this.HardwareID.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Device)
            {
                Device compare=(Device)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.DeviceID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.HardwareID.ToString();
        }

        public string DescriptorColumn() 
        {
            return "HardwareID";
        }

        public static string GetKeyColumn()
        {
            return "DeviceID";
        }        

        public static string GetDescriptorColumn()
        {
            return "HardwareID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<ActivityLog> ActivityLogs
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.ActivityLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.DeviceID == m_Internal.DeviceID
                       select items;
            }
        }
        public IQueryable<DeviceAlert> DeviceAlerts
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.DeviceAlert.GetRepo();
                  return from items in repo.GetAll()
                       where items.DeviceID == m_Internal.DeviceID
                       select items;
            }
        }
        public IQueryable<Location> Locations
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Location.GetRepo();
                  return from items in repo.GetAll()
                       where items.DeviceID == m_Internal.DeviceID
                       select items;
            }
        }
        public IQueryable<Pour> Pours
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Pour.GetRepo();
                  return from items in repo.GetAll()
                       where items.DeviceID == m_Internal.DeviceID
                       select items;
            }
        }
        public IQueryable<TagActivity> TagActivities
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.TagActivity.GetRepo();
                  return from items in repo.GetAll()
                       where items.DeviceID == m_Internal.DeviceID
                       select items;
            }
        }
        public IQueryable<TagMove> TagMoves
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.TagMove.GetRepo();
                  return from items in repo.GetAll()
                       where items.DeviceID == m_Internal.DeviceID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.DeviceID;
            }
            set
            {
                m_Internal.DeviceID = value;
            }
        }


//        Guid _DeviceID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid DeviceID
        {
            get { return m_Internal.DeviceID; }
            set
            {
                if(m_Internal.DeviceID!=value){
                    m_Internal.DeviceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeviceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _HardwareID;
        [LocalData]
        public string HardwareID
        {
            get { return m_Internal.HardwareID; }
            set
            {
                if(m_Internal.HardwareID!=value){
                    m_Internal.HardwareID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HardwareID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Settings;
        [LocalData]
        public string Settings
        {
            get { return m_Internal.Settings; }
            set
            {
                if(m_Internal.Settings!=value){
                    m_Internal.Settings=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Settings");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Device, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataGroup : IWCFDataElement
    {
        [DataMember]
        public Guid GroupID { get; set; }
        [DataMember]
        public string Name { get; set; }

        public void Copy( DataGroup _Item )
        {
             Name = _Item.Name;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Group( this );
        }


    }


    /// <summary>
    /// A class which represents the Groups table in the BeverageMonitor Database.
    /// </summary>
    public partial class Group: BaseDataObject<DataGroup>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Group> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Group>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Group> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Group item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Group item=new Group();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Group> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Group()
        {
            m_Internal = new DataGroup();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.GroupID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Group( bool _CallOnCreated )
        {
            m_Internal = new DataGroup();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Group(string connectionString, string providerName) 
        {
            m_Internal = new DataGroup();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.GroupID = Guid.NewGuid( );     
        }

        public Group( Group _Item )
        {
            m_Internal = new DataGroup();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Group( DataGroup _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Group _Item )
        {
            m_Internal.Name = _Item.Name;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.GroupID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Group.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Group>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Group(Expression<Func<Group, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Group> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Group> _repo;
            
            if(db.TestMode)
            {
                Group.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Group>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Group> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Group SingleOrDefault(Expression<Func<Group, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Group SingleOrDefault(Expression<Func<Group, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Group> repo = GetRepo(connectionString,providerName);
            Group single = repo.SingleOrDefault<Group>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Group, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Group, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyGroupLoaded = false;
        protected static Group EmptyGroupMember = null;

        public static Group GetByID(Guid? value) 
        {
            Group rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Group GetByID(Guid value) 
        {
            Group rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyGroupLoaded )
                    {
                        rc = EmptyGroupMember;
                    }
                    else
                    {
                        IsEmptyGroupLoaded = true;
                        rc = Group.Find( L => L.GroupID.Equals( value ) ).FirstOrDefault( );
                        EmptyGroupMember = rc;
                    }
                }
                else
                {
                    rc = Group.Find( L => L.GroupID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Group> Find(Expression<Func<Group, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Group> Find(Expression<Func<Group, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Group> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Group> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Group> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Group> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Group> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Group> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "GroupID";
        }

        public object KeyValue()
        {
            return this.GroupID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Group)
            {
                Group compare=(Group)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.GroupID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "GroupID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<GroupsXSecurableItem> GroupsXSecurableItems
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.GroupsXSecurableItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.GroupID == m_Internal.GroupID
                       select items;
            }
        }
        public IQueryable<GroupXReport> GroupXReports
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.GroupXReport.GetRepo();
                  return from items in repo.GetAll()
                       where items.GroupID == m_Internal.GroupID
                       select items;
            }
        }
        public IQueryable<UsersXGroup> UsersXGroups
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UsersXGroup.GetRepo();
                  return from items in repo.GetAll()
                       where items.GroupID == m_Internal.GroupID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.GroupID;
            }
            set
            {
                m_Internal.GroupID = value;
            }
        }


//        Guid _GroupID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid GroupID
        {
            get { return m_Internal.GroupID; }
            set
            {
                if(m_Internal.GroupID!=value){
                    m_Internal.GroupID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GroupID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Group, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataGroupsXSecurableItem : IWCFDataElement
    {
        [DataMember]
        public Guid GroupSecurableItemID { get; set; }
        [DataMember]
        public Guid GroupID { get; set; }
        [DataMember]
        public Guid SecurableItemID { get; set; }

        public void Copy( DataGroupsXSecurableItem _Item )
        {
             GroupID = _Item.GroupID;			
             SecurableItemID = _Item.SecurableItemID;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new GroupsXSecurableItem( this );
        }


    }


    /// <summary>
    /// A class which represents the GroupsXSecurableItems table in the BeverageMonitor Database.
    /// </summary>
    public partial class GroupsXSecurableItem: BaseDataObject<DataGroupsXSecurableItem>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<GroupsXSecurableItem> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<GroupsXSecurableItem>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<GroupsXSecurableItem> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(GroupsXSecurableItem item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                GroupsXSecurableItem item=new GroupsXSecurableItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<GroupsXSecurableItem> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public GroupsXSecurableItem()
        {
            m_Internal = new DataGroupsXSecurableItem();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.GroupSecurableItemID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public GroupsXSecurableItem( bool _CallOnCreated )
        {
            m_Internal = new DataGroupsXSecurableItem();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public GroupsXSecurableItem(string connectionString, string providerName) 
        {
            m_Internal = new DataGroupsXSecurableItem();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.GroupSecurableItemID = Guid.NewGuid( );     
        }

        public GroupsXSecurableItem( GroupsXSecurableItem _Item )
        {
            m_Internal = new DataGroupsXSecurableItem();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public GroupsXSecurableItem( DataGroupsXSecurableItem _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( GroupsXSecurableItem _Item )
        {
            m_Internal.GroupID = _Item.GroupID;			
            m_Internal.SecurableItemID = _Item.SecurableItemID;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.GroupSecurableItemID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                GroupsXSecurableItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<GroupsXSecurableItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public GroupsXSecurableItem(Expression<Func<GroupsXSecurableItem, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<GroupsXSecurableItem> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<GroupsXSecurableItem> _repo;
            
            if(db.TestMode)
            {
                GroupsXSecurableItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<GroupsXSecurableItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<GroupsXSecurableItem> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static GroupsXSecurableItem SingleOrDefault(Expression<Func<GroupsXSecurableItem, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static GroupsXSecurableItem SingleOrDefault(Expression<Func<GroupsXSecurableItem, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<GroupsXSecurableItem> repo = GetRepo(connectionString,providerName);
            GroupsXSecurableItem single = repo.SingleOrDefault<GroupsXSecurableItem>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<GroupsXSecurableItem, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<GroupsXSecurableItem, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyGroupsXSecurableItemLoaded = false;
        protected static GroupsXSecurableItem EmptyGroupsXSecurableItemMember = null;

        public static GroupsXSecurableItem GetByID(Guid? value) 
        {
            GroupsXSecurableItem rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static GroupsXSecurableItem GetByID(Guid value) 
        {
            GroupsXSecurableItem rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyGroupsXSecurableItemLoaded )
                    {
                        rc = EmptyGroupsXSecurableItemMember;
                    }
                    else
                    {
                        IsEmptyGroupsXSecurableItemLoaded = true;
                        rc = GroupsXSecurableItem.Find( L => L.GroupSecurableItemID.Equals( value ) ).FirstOrDefault( );
                        EmptyGroupsXSecurableItemMember = rc;
                    }
                }
                else
                {
                    rc = GroupsXSecurableItem.Find( L => L.GroupSecurableItemID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<GroupsXSecurableItem> Find(Expression<Func<GroupsXSecurableItem, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<GroupsXSecurableItem> Find(Expression<Func<GroupsXSecurableItem, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<GroupsXSecurableItem> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<GroupsXSecurableItem> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<GroupsXSecurableItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<GroupsXSecurableItem> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<GroupsXSecurableItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<GroupsXSecurableItem> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "GroupSecurableItemID";
        }

        public object KeyValue()
        {
            return this.GroupSecurableItemID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.GroupID )
//			{
//				rc = this.GroupID.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is GroupsXSecurableItem)
            {
                GroupsXSecurableItem compare=(GroupsXSecurableItem)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.GroupSecurableItemID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.GroupID.ToString();
        }

        public string DescriptorColumn() 
        {
            return "GroupID";
        }

        public static string GetKeyColumn()
        {
            return "GroupSecurableItemID";
        }        

        public static string GetDescriptorColumn()
        {
            return "GroupID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Group> GroupsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Group.GetRepo();
                  return from items in repo.GetAll()
                       where items.GroupID == m_Internal.GroupID
                       select items;
            }
        }
        public IQueryable<SecurableItem> SecurableItemsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.SecurableItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.SecurableItemID == m_Internal.SecurableItemID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.GroupSecurableItemID;
            }
            set
            {
                m_Internal.GroupSecurableItemID = value;
            }
        }


//        Guid _GroupSecurableItemID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid GroupSecurableItemID
        {
            get { return m_Internal.GroupSecurableItemID; }
            set
            {
                if(m_Internal.GroupSecurableItemID!=value){
                    m_Internal.GroupSecurableItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GroupSecurableItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _GroupID;
        [LocalData]
        public Guid GroupID
        {
            get { return m_Internal.GroupID; }
            set
            {
                if(m_Internal.GroupID!=value){
                    m_Internal.GroupID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GroupID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _SecurableItemID;
        [LocalData]
        public Guid SecurableItemID
        {
            get { return m_Internal.SecurableItemID; }
            set
            {
                if(m_Internal.SecurableItemID!=value){
                    m_Internal.SecurableItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SecurableItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<GroupsXSecurableItem, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataGroupXReport : IWCFDataElement
    {
        [DataMember]
        public Guid GroupXReportID { get; set; }
        [DataMember]
        public Guid GroupID { get; set; }
        [DataMember]
        public Guid ReportID { get; set; }

        public void Copy( DataGroupXReport _Item )
        {
             GroupID = _Item.GroupID;			
             ReportID = _Item.ReportID;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new GroupXReport( this );
        }


    }


    /// <summary>
    /// A class which represents the GroupXReport table in the BeverageMonitor Database.
    /// </summary>
    public partial class GroupXReport: BaseDataObject<DataGroupXReport>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<GroupXReport> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<GroupXReport>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<GroupXReport> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(GroupXReport item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                GroupXReport item=new GroupXReport();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<GroupXReport> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public GroupXReport()
        {
            m_Internal = new DataGroupXReport();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.GroupXReportID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public GroupXReport( bool _CallOnCreated )
        {
            m_Internal = new DataGroupXReport();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public GroupXReport(string connectionString, string providerName) 
        {
            m_Internal = new DataGroupXReport();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.GroupXReportID = Guid.NewGuid( );     
        }

        public GroupXReport( GroupXReport _Item )
        {
            m_Internal = new DataGroupXReport();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public GroupXReport( DataGroupXReport _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( GroupXReport _Item )
        {
            m_Internal.GroupID = _Item.GroupID;			
            m_Internal.ReportID = _Item.ReportID;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.GroupXReportID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                GroupXReport.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<GroupXReport>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public GroupXReport(Expression<Func<GroupXReport, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<GroupXReport> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<GroupXReport> _repo;
            
            if(db.TestMode)
            {
                GroupXReport.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<GroupXReport>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<GroupXReport> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static GroupXReport SingleOrDefault(Expression<Func<GroupXReport, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static GroupXReport SingleOrDefault(Expression<Func<GroupXReport, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<GroupXReport> repo = GetRepo(connectionString,providerName);
            GroupXReport single = repo.SingleOrDefault<GroupXReport>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<GroupXReport, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<GroupXReport, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyGroupXReportLoaded = false;
        protected static GroupXReport EmptyGroupXReportMember = null;

        public static GroupXReport GetByID(Guid? value) 
        {
            GroupXReport rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static GroupXReport GetByID(Guid value) 
        {
            GroupXReport rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyGroupXReportLoaded )
                    {
                        rc = EmptyGroupXReportMember;
                    }
                    else
                    {
                        IsEmptyGroupXReportLoaded = true;
                        rc = GroupXReport.Find( L => L.GroupXReportID.Equals( value ) ).FirstOrDefault( );
                        EmptyGroupXReportMember = rc;
                    }
                }
                else
                {
                    rc = GroupXReport.Find( L => L.GroupXReportID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<GroupXReport> Find(Expression<Func<GroupXReport, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<GroupXReport> Find(Expression<Func<GroupXReport, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<GroupXReport> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<GroupXReport> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<GroupXReport> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<GroupXReport> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<GroupXReport> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<GroupXReport> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "GroupXReportID";
        }

        public object KeyValue()
        {
            return this.GroupXReportID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.GroupID )
//			{
//				rc = this.GroupID.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is GroupXReport)
            {
                GroupXReport compare=(GroupXReport)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.GroupXReportID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.GroupID.ToString();
        }

        public string DescriptorColumn() 
        {
            return "GroupID";
        }

        public static string GetKeyColumn()
        {
            return "GroupXReportID";
        }        

        public static string GetDescriptorColumn()
        {
            return "GroupID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Group> GroupsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Group.GetRepo();
                  return from items in repo.GetAll()
                       where items.GroupID == m_Internal.GroupID
                       select items;
            }
        }
        public IQueryable<Report> ReportsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Report.GetRepo();
                  return from items in repo.GetAll()
                       where items.ReportID == m_Internal.ReportID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.GroupXReportID;
            }
            set
            {
                m_Internal.GroupXReportID = value;
            }
        }


//        Guid _GroupXReportID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid GroupXReportID
        {
            get { return m_Internal.GroupXReportID; }
            set
            {
                if(m_Internal.GroupXReportID!=value){
                    m_Internal.GroupXReportID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GroupXReportID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _GroupID;
        [LocalData]
        public Guid GroupID
        {
            get { return m_Internal.GroupID; }
            set
            {
                if(m_Internal.GroupID!=value){
                    m_Internal.GroupID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GroupID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _ReportID;
        [LocalData]
        public Guid ReportID
        {
            get { return m_Internal.ReportID; }
            set
            {
                if(m_Internal.ReportID!=value){
                    m_Internal.ReportID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReportID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<GroupXReport, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataIngredient : IWCFDataElement
    {
        [DataMember]
        public Guid IngredientID { get; set; }
        [DataMember]
        public Guid RecipeID { get; set; }
        [DataMember]
        public int Number { get; set; }
        [DataMember]
        public int Type { get; set; }
        [DataMember]
        public Guid? UPCID { get; set; }
        [DataMember]
        public int? Quality { get; set; }
        [DataMember]
        public Guid StandardPourID { get; set; }
        [DataMember]
        public Guid? ManufacturerID { get; set; }
        [DataMember]
        public Guid? CategoryID { get; set; }

        public void Copy( DataIngredient _Item )
        {
             RecipeID = _Item.RecipeID;			
             Number = _Item.Number;			
             Type = _Item.Type;			
             UPCID = _Item.UPCID;			
             Quality = _Item.Quality;			
             StandardPourID = _Item.StandardPourID;			
             ManufacturerID = _Item.ManufacturerID;			
             CategoryID = _Item.CategoryID;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Ingredient( this );
        }


    }


    /// <summary>
    /// A class which represents the Ingredients table in the BeverageMonitor Database.
    /// </summary>
    public partial class Ingredient: BaseDataObject<DataIngredient>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Ingredient> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Ingredient>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Ingredient> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Ingredient item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Ingredient item=new Ingredient();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Ingredient> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Ingredient()
        {
            m_Internal = new DataIngredient();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.IngredientID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Ingredient( bool _CallOnCreated )
        {
            m_Internal = new DataIngredient();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Ingredient(string connectionString, string providerName) 
        {
            m_Internal = new DataIngredient();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.IngredientID = Guid.NewGuid( );     
        }

        public Ingredient( Ingredient _Item )
        {
            m_Internal = new DataIngredient();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Ingredient( DataIngredient _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Ingredient _Item )
        {
            m_Internal.RecipeID = _Item.RecipeID;			
            m_Internal.Number = _Item.Number;			
            m_Internal.Type = _Item.Type;			
            m_Internal.UPCID = _Item.UPCID;			
            m_Internal.Quality = _Item.Quality;			
            m_Internal.StandardPourID = _Item.StandardPourID;			
            m_Internal.ManufacturerID = _Item.ManufacturerID;			
            m_Internal.CategoryID = _Item.CategoryID;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.IngredientID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Ingredient.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Ingredient>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Ingredient(Expression<Func<Ingredient, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Ingredient> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Ingredient> _repo;
            
            if(db.TestMode)
            {
                Ingredient.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Ingredient>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Ingredient> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Ingredient SingleOrDefault(Expression<Func<Ingredient, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Ingredient SingleOrDefault(Expression<Func<Ingredient, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Ingredient> repo = GetRepo(connectionString,providerName);
            Ingredient single = repo.SingleOrDefault<Ingredient>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Ingredient, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Ingredient, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyIngredientLoaded = false;
        protected static Ingredient EmptyIngredientMember = null;

        public static Ingredient GetByID(Guid? value) 
        {
            Ingredient rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Ingredient GetByID(Guid value) 
        {
            Ingredient rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyIngredientLoaded )
                    {
                        rc = EmptyIngredientMember;
                    }
                    else
                    {
                        IsEmptyIngredientLoaded = true;
                        rc = Ingredient.Find( L => L.IngredientID.Equals( value ) ).FirstOrDefault( );
                        EmptyIngredientMember = rc;
                    }
                }
                else
                {
                    rc = Ingredient.Find( L => L.IngredientID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Ingredient> Find(Expression<Func<Ingredient, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Ingredient> Find(Expression<Func<Ingredient, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Ingredient> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Ingredient> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Ingredient> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Ingredient> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Ingredient> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Ingredient> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "IngredientID";
        }

        public object KeyValue()
        {
            return this.IngredientID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.RecipeID )
//			{
//				rc = this.RecipeID.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Ingredient)
            {
                Ingredient compare=(Ingredient)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.IngredientID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.RecipeID.ToString();
        }

        public string DescriptorColumn() 
        {
            return "RecipeID";
        }

        public static string GetKeyColumn()
        {
            return "IngredientID";
        }        

        public static string GetDescriptorColumn()
        {
            return "RecipeID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Category> CategoryIDItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Category.GetRepo();
                  return from items in repo.GetAll()
                       where items.CategoryID == m_Internal.CategoryID
                       select items;
            }
        }
        public IQueryable<Manufacturer> ManufacturerIDItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Manufacturer.GetRepo();
                  return from items in repo.GetAll()
                       where items.ManufacturerID == m_Internal.ManufacturerID
                       select items;
            }
        }
        public IQueryable<Recipe> RecipeItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Recipe.GetRepo();
                  return from items in repo.GetAll()
                       where items.RecipeID == m_Internal.RecipeID
                       select items;
            }
        }
        public IQueryable<StandardPour> StandardPourItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.StandardPour.GetRepo();
                  return from items in repo.GetAll()
                       where items.StandardPourID == m_Internal.StandardPourID
                       select items;
            }
        }
        public IQueryable<UPC> UPCIDItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UPC.GetRepo();
                  return from items in repo.GetAll()
                       where items.UPCID == m_Internal.UPCID
                       select items;
            }
        }
        public IQueryable<Pour> Pours
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Pour.GetRepo();
                  return from items in repo.GetAll()
                       where items.IngredientID == m_Internal.IngredientID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.IngredientID;
            }
            set
            {
                m_Internal.IngredientID = value;
            }
        }


//        Guid _IngredientID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid IngredientID
        {
            get { return m_Internal.IngredientID; }
            set
            {
                if(m_Internal.IngredientID!=value){
                    m_Internal.IngredientID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IngredientID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _RecipeID;
        [LocalData]
        public Guid RecipeID
        {
            get { return m_Internal.RecipeID; }
            set
            {
                if(m_Internal.RecipeID!=value){
                    m_Internal.RecipeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecipeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Number;
        [LocalData]
        public int Number
        {
            get { return m_Internal.Number; }
            set
            {
                if(m_Internal.Number!=value){
                    m_Internal.Number=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Number");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Type;
        [LocalData]
        public int Type
        {
            get { return m_Internal.Type; }
            set
            {
                if(m_Internal.Type!=value){
                    m_Internal.Type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _UPCID;
        [LocalData]
        public Guid? UPCID
        {
            get { return m_Internal.UPCID; }
            set
            {
                if(m_Internal.UPCID!=value){
                    m_Internal.UPCID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UPCID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Quality;
        [LocalData]
        public int? Quality
        {
            get { return m_Internal.Quality; }
            set
            {
                if(m_Internal.Quality!=value){
                    m_Internal.Quality=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quality");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _StandardPourID;
        [LocalData]
        public Guid StandardPourID
        {
            get { return m_Internal.StandardPourID; }
            set
            {
                if(m_Internal.StandardPourID!=value){
                    m_Internal.StandardPourID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StandardPourID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _ManufacturerID;
        [LocalData]
        public Guid? ManufacturerID
        {
            get { return m_Internal.ManufacturerID; }
            set
            {
                if(m_Internal.ManufacturerID!=value){
                    m_Internal.ManufacturerID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ManufacturerID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _CategoryID;
        [LocalData]
        public Guid? CategoryID
        {
            get { return m_Internal.CategoryID; }
            set
            {
                if(m_Internal.CategoryID!=value){
                    m_Internal.CategoryID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CategoryID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Ingredient, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataInventory : IWCFDataElement
    {
        [DataMember]
        public Guid InventoryID { get; set; }
        [DataMember]
        public Guid UPCID { get; set; }
        [DataMember]
        public Guid LocationID { get; set; }
        [DataMember]
        public decimal Cost { get; set; }
        [DataMember]
        public DateTime EnterDate { get; set; }
        [DataMember]
        public DateTime? ExitDate { get; set; }
        [DataMember]
        public DateTime? TagDate { get; set; }
        [DataMember]
        public double Amount { get; set; }
        [DataMember]
        public Guid? TagID { get; set; }
        [DataMember]
        public string Memo { get; set; }
        [DataMember]
        public int? ExitReason { get; set; }
        [DataMember]
        public DateTime? UpdateTime { get; set; }

        public void Copy( DataInventory _Item )
        {
             UPCID = _Item.UPCID;			
             LocationID = _Item.LocationID;			
             Cost = _Item.Cost;			
             EnterDate = _Item.EnterDate;			
             ExitDate = _Item.ExitDate;			
             TagDate = _Item.TagDate;			
             Amount = _Item.Amount;			
             TagID = _Item.TagID;			
             Memo = _Item.Memo;			
             ExitReason = _Item.ExitReason;			
             UpdateTime = _Item.UpdateTime;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Inventory( this );
        }


    }


    /// <summary>
    /// A class which represents the Inventories table in the BeverageMonitor Database.
    /// </summary>
    public partial class Inventory: BaseDataObject<DataInventory>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Inventory> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Inventory>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Inventory> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Inventory item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Inventory item=new Inventory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Inventory> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Inventory()
        {
            m_Internal = new DataInventory();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.InventoryID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Inventory( bool _CallOnCreated )
        {
            m_Internal = new DataInventory();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Inventory(string connectionString, string providerName) 
        {
            m_Internal = new DataInventory();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.InventoryID = Guid.NewGuid( );     
        }

        public Inventory( Inventory _Item )
        {
            m_Internal = new DataInventory();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Inventory( DataInventory _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Inventory _Item )
        {
            m_Internal.UPCID = _Item.UPCID;			
            m_Internal.LocationID = _Item.LocationID;			
            m_Internal.Cost = _Item.Cost;			
            m_Internal.EnterDate = _Item.EnterDate;			
            m_Internal.ExitDate = _Item.ExitDate;			
            m_Internal.TagDate = _Item.TagDate;			
            m_Internal.Amount = _Item.Amount;			
            m_Internal.TagID = _Item.TagID;			
            m_Internal.Memo = _Item.Memo;			
            m_Internal.ExitReason = _Item.ExitReason;			
            m_Internal.UpdateTime = _Item.UpdateTime;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.InventoryID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Inventory.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Inventory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Inventory(Expression<Func<Inventory, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Inventory> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Inventory> _repo;
            
            if(db.TestMode)
            {
                Inventory.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Inventory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Inventory> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Inventory SingleOrDefault(Expression<Func<Inventory, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Inventory SingleOrDefault(Expression<Func<Inventory, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Inventory> repo = GetRepo(connectionString,providerName);
            Inventory single = repo.SingleOrDefault<Inventory>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Inventory, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Inventory, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyInventoryLoaded = false;
        protected static Inventory EmptyInventoryMember = null;

        public static Inventory GetByID(Guid? value) 
        {
            Inventory rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Inventory GetByID(Guid value) 
        {
            Inventory rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyInventoryLoaded )
                    {
                        rc = EmptyInventoryMember;
                    }
                    else
                    {
                        IsEmptyInventoryLoaded = true;
                        rc = Inventory.Find( L => L.InventoryID.Equals( value ) ).FirstOrDefault( );
                        EmptyInventoryMember = rc;
                    }
                }
                else
                {
                    rc = Inventory.Find( L => L.InventoryID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Inventory> Find(Expression<Func<Inventory, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Inventory> Find(Expression<Func<Inventory, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Inventory> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Inventory> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Inventory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Inventory> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Inventory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Inventory> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "InventoryID";
        }

        public object KeyValue()
        {
            return this.InventoryID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Memo )
//			{
//				rc = this.Memo.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Inventory)
            {
                Inventory compare=(Inventory)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.InventoryID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Memo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Memo";
        }

        public static string GetKeyColumn()
        {
            return "InventoryID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Memo";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Location> LocationItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Location.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        public IQueryable<Tag> TagsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Tag.GetRepo();
                  return from items in repo.GetAll()
                       where items.TagID == m_Internal.TagID
                       select items;
            }
        }
        public IQueryable<UPC> UPCItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UPC.GetRepo();
                  return from items in repo.GetAll()
                       where items.UPCID == m_Internal.UPCID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.InventoryID;
            }
            set
            {
                m_Internal.InventoryID = value;
            }
        }


//        Guid _InventoryID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid InventoryID
        {
            get { return m_Internal.InventoryID; }
            set
            {
                if(m_Internal.InventoryID!=value){
                    m_Internal.InventoryID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InventoryID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _UPCID;
        [LocalData]
        public Guid UPCID
        {
            get { return m_Internal.UPCID; }
            set
            {
                if(m_Internal.UPCID!=value){
                    m_Internal.UPCID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UPCID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _LocationID;
        [LocalData]
        public Guid LocationID
        {
            get { return m_Internal.LocationID; }
            set
            {
                if(m_Internal.LocationID!=value){
                    m_Internal.LocationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Cost;
        [LocalData]
        public decimal Cost
        {
            get { return m_Internal.Cost; }
            set
            {
                if(m_Internal.Cost!=value){
                    m_Internal.Cost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Cost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _EnterDate;
        [LocalData]
        public DateTime EnterDate
        {
            get { return m_Internal.EnterDate; }
            set
            {
                if(m_Internal.EnterDate!=value){
                    m_Internal.EnterDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EnterDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _ExitDate;
        [LocalData]
        public DateTime? ExitDate
        {
            get { return m_Internal.ExitDate; }
            set
            {
                if(m_Internal.ExitDate!=value){
                    m_Internal.ExitDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExitDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _TagDate;
        [LocalData]
        public DateTime? TagDate
        {
            get { return m_Internal.TagDate; }
            set
            {
                if(m_Internal.TagDate!=value){
                    m_Internal.TagDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Amount;
        [LocalData]
        public double Amount
        {
            get { return m_Internal.Amount; }
            set
            {
                if(m_Internal.Amount!=value){
                    m_Internal.Amount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Amount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _TagID;
        [LocalData]
        public Guid? TagID
        {
            get { return m_Internal.TagID; }
            set
            {
                if(m_Internal.TagID!=value){
                    m_Internal.TagID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Memo;
        [LocalData]
        public string Memo
        {
            get { return m_Internal.Memo; }
            set
            {
                if(m_Internal.Memo!=value){
                    m_Internal.Memo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Memo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _ExitReason;
        [LocalData]
        public int? ExitReason
        {
            get { return m_Internal.ExitReason; }
            set
            {
                if(m_Internal.ExitReason!=value){
                    m_Internal.ExitReason=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExitReason");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime? _UpdateTime;
        [LocalData]
        public DateTime? UpdateTime
        {
            get { return m_Internal.UpdateTime; }
            set
            {
                if(m_Internal.UpdateTime!=value){
                    m_Internal.UpdateTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdateTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Inventory, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataLocation : IWCFDataElement
    {
        [DataMember]
        public Guid LocationID { get; set; }
        [DataMember]
        public Guid OrganizationID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public Guid? ParentID { get; set; }
        [DataMember]
        public Guid? DeviceID { get; set; }
        [DataMember]
        public bool AllowHalfPour { get; set; }
        [DataMember]
        public string POSAlias { get; set; }

        public void Copy( DataLocation _Item )
        {
             OrganizationID = _Item.OrganizationID;			
             Name = _Item.Name;			
             Description = _Item.Description;			
             ParentID = _Item.ParentID;			
             DeviceID = _Item.DeviceID;			
             AllowHalfPour = _Item.AllowHalfPour;			
             POSAlias = _Item.POSAlias;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Location( this );
        }


    }


    /// <summary>
    /// A class which represents the Locations table in the BeverageMonitor Database.
    /// </summary>
    public partial class Location: BaseDataObject<DataLocation>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Location> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Location>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Location> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Location item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Location item=new Location();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Location> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Location()
        {
            m_Internal = new DataLocation();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.LocationID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Location( bool _CallOnCreated )
        {
            m_Internal = new DataLocation();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Location(string connectionString, string providerName) 
        {
            m_Internal = new DataLocation();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.LocationID = Guid.NewGuid( );     
        }

        public Location( Location _Item )
        {
            m_Internal = new DataLocation();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Location( DataLocation _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Location _Item )
        {
            m_Internal.OrganizationID = _Item.OrganizationID;			
            m_Internal.Name = _Item.Name;			
            m_Internal.Description = _Item.Description;			
            m_Internal.ParentID = _Item.ParentID;			
            m_Internal.DeviceID = _Item.DeviceID;			
            m_Internal.AllowHalfPour = _Item.AllowHalfPour;			
            m_Internal.POSAlias = _Item.POSAlias;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.LocationID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Location.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Location>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Location(Expression<Func<Location, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Location> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Location> _repo;
            
            if(db.TestMode)
            {
                Location.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Location>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Location> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Location SingleOrDefault(Expression<Func<Location, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Location SingleOrDefault(Expression<Func<Location, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Location> repo = GetRepo(connectionString,providerName);
            Location single = repo.SingleOrDefault<Location>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Location, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Location, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyLocationLoaded = false;
        protected static Location EmptyLocationMember = null;

        public static Location GetByID(Guid? value) 
        {
            Location rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Location GetByID(Guid value) 
        {
            Location rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyLocationLoaded )
                    {
                        rc = EmptyLocationMember;
                    }
                    else
                    {
                        IsEmptyLocationLoaded = true;
                        rc = Location.Find( L => L.LocationID.Equals( value ) ).FirstOrDefault( );
                        EmptyLocationMember = rc;
                    }
                }
                else
                {
                    rc = Location.Find( L => L.LocationID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Location> Find(Expression<Func<Location, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Location> Find(Expression<Func<Location, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Location> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Location> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Location> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Location> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Location> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Location> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "LocationID";
        }

        public object KeyValue()
        {
            return this.LocationID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Location)
            {
                Location compare=(Location)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.LocationID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "LocationID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<ActivityLog> ActivityLogs
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.ActivityLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        public IQueryable<Inventory> Inventories
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Inventory.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        public IQueryable<Device> DevicesItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Device.GetRepo();
                  return from items in repo.GetAll()
                       where items.DeviceID == m_Internal.DeviceID
                       select items;
            }
        }
        public IQueryable<Location> LocationsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Location.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.ParentID
                       select items;
            }
        }
        public IQueryable<Organization> OrganizationItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Organization.GetRepo();
                  return from items in repo.GetAll()
                       where items.OrganizationID == m_Internal.OrganizationID
                       select items;
            }
        }
        public IQueryable<ParLevel> ParLevels
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.ParLevel.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        public IQueryable<POSTicket> POSTickets
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.POSTicket.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        public IQueryable<TagAlert> TagAlerts
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.TagAlert.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        public IQueryable<TagMove> TagMoves
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.TagMove.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        public IQueryable<Tag> Tags
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Tag.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.LocationID;
            }
            set
            {
                m_Internal.LocationID = value;
            }
        }


//        Guid _LocationID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid LocationID
        {
            get { return m_Internal.LocationID; }
            set
            {
                if(m_Internal.LocationID!=value){
                    m_Internal.LocationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _OrganizationID;
        [LocalData]
        public Guid OrganizationID
        {
            get { return m_Internal.OrganizationID; }
            set
            {
                if(m_Internal.OrganizationID!=value){
                    m_Internal.OrganizationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _ParentID;
        [LocalData]
        public Guid? ParentID
        {
            get { return m_Internal.ParentID; }
            set
            {
                if(m_Internal.ParentID!=value){
                    m_Internal.ParentID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParentID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _DeviceID;
        [LocalData]
        public Guid? DeviceID
        {
            get { return m_Internal.DeviceID; }
            set
            {
                if(m_Internal.DeviceID!=value){
                    m_Internal.DeviceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeviceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        bool _AllowHalfPour;
        [LocalData]
        public bool AllowHalfPour
        {
            get { return m_Internal.AllowHalfPour; }
            set
            {
                if(m_Internal.AllowHalfPour!=value){
                    m_Internal.AllowHalfPour=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowHalfPour");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _POSAlias;
        [LocalData]
        public string POSAlias
        {
            get { return m_Internal.POSAlias; }
            set
            {
                if(m_Internal.POSAlias!=value){
                    m_Internal.POSAlias=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSAlias");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Location, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataManufacturer : IWCFDataElement
    {
        [DataMember]
        public Guid ManufacturerID { get; set; }
        [DataMember]
        public string Name { get; set; }

        public void Copy( DataManufacturer _Item )
        {
             Name = _Item.Name;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Manufacturer( this );
        }


    }


    /// <summary>
    /// A class which represents the Manufacturers table in the BeverageMonitor Database.
    /// </summary>
    public partial class Manufacturer: BaseDataObject<DataManufacturer>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Manufacturer> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Manufacturer>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Manufacturer> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Manufacturer item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Manufacturer item=new Manufacturer();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Manufacturer> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Manufacturer()
        {
            m_Internal = new DataManufacturer();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.ManufacturerID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Manufacturer( bool _CallOnCreated )
        {
            m_Internal = new DataManufacturer();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Manufacturer(string connectionString, string providerName) 
        {
            m_Internal = new DataManufacturer();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.ManufacturerID = Guid.NewGuid( );     
        }

        public Manufacturer( Manufacturer _Item )
        {
            m_Internal = new DataManufacturer();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Manufacturer( DataManufacturer _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Manufacturer _Item )
        {
            m_Internal.Name = _Item.Name;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.ManufacturerID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Manufacturer.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Manufacturer>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Manufacturer(Expression<Func<Manufacturer, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Manufacturer> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Manufacturer> _repo;
            
            if(db.TestMode)
            {
                Manufacturer.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Manufacturer>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Manufacturer> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Manufacturer SingleOrDefault(Expression<Func<Manufacturer, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Manufacturer SingleOrDefault(Expression<Func<Manufacturer, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Manufacturer> repo = GetRepo(connectionString,providerName);
            Manufacturer single = repo.SingleOrDefault<Manufacturer>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Manufacturer, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Manufacturer, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyManufacturerLoaded = false;
        protected static Manufacturer EmptyManufacturerMember = null;

        public static Manufacturer GetByID(Guid? value) 
        {
            Manufacturer rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Manufacturer GetByID(Guid value) 
        {
            Manufacturer rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyManufacturerLoaded )
                    {
                        rc = EmptyManufacturerMember;
                    }
                    else
                    {
                        IsEmptyManufacturerLoaded = true;
                        rc = Manufacturer.Find( L => L.ManufacturerID.Equals( value ) ).FirstOrDefault( );
                        EmptyManufacturerMember = rc;
                    }
                }
                else
                {
                    rc = Manufacturer.Find( L => L.ManufacturerID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Manufacturer> Find(Expression<Func<Manufacturer, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Manufacturer> Find(Expression<Func<Manufacturer, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Manufacturer> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Manufacturer> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Manufacturer> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Manufacturer> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Manufacturer> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Manufacturer> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "ManufacturerID";
        }

        public object KeyValue()
        {
            return this.ManufacturerID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Manufacturer)
            {
                Manufacturer compare=(Manufacturer)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.ManufacturerID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "ManufacturerID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Ingredient> Ingredients
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Ingredient.GetRepo();
                  return from items in repo.GetAll()
                       where items.ManufacturerID == m_Internal.ManufacturerID
                       select items;
            }
        }
        public IQueryable<UPC> UPCS
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UPC.GetRepo();
                  return from items in repo.GetAll()
                       where items.ManufacturerID == m_Internal.ManufacturerID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.ManufacturerID;
            }
            set
            {
                m_Internal.ManufacturerID = value;
            }
        }


//        Guid _ManufacturerID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid ManufacturerID
        {
            get { return m_Internal.ManufacturerID; }
            set
            {
                if(m_Internal.ManufacturerID!=value){
                    m_Internal.ManufacturerID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ManufacturerID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Manufacturer, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataMove : IWCFDataElement
    {
        [DataMember]
        public Guid MoveID { get; set; }
        [DataMember]
        public DateTime MoveTime { get; set; }
        [DataMember]
        public Guid OldLocation { get; set; }
        [DataMember]
        public Guid NewLocation { get; set; }
        [DataMember]
        public Guid? TagID { get; set; }
        [DataMember]
        public Guid? InventoryID { get; set; }
        [DataMember]
        public int Quantitiy { get; set; }

        public void Copy( DataMove _Item )
        {
             MoveTime = _Item.MoveTime;			
             OldLocation = _Item.OldLocation;			
             NewLocation = _Item.NewLocation;			
             TagID = _Item.TagID;			
             InventoryID = _Item.InventoryID;			
             Quantitiy = _Item.Quantitiy;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Move( this );
        }


    }


    /// <summary>
    /// A class which represents the Moves table in the BeverageMonitor Database.
    /// </summary>
    public partial class Move: BaseDataObject<DataMove>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Move> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Move>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Move> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Move item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Move item=new Move();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Move> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Move()
        {
            m_Internal = new DataMove();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.MoveID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Move( bool _CallOnCreated )
        {
            m_Internal = new DataMove();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Move(string connectionString, string providerName) 
        {
            m_Internal = new DataMove();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.MoveID = Guid.NewGuid( );     
        }

        public Move( Move _Item )
        {
            m_Internal = new DataMove();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Move( DataMove _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Move _Item )
        {
            m_Internal.MoveTime = _Item.MoveTime;			
            m_Internal.OldLocation = _Item.OldLocation;			
            m_Internal.NewLocation = _Item.NewLocation;			
            m_Internal.TagID = _Item.TagID;			
            m_Internal.InventoryID = _Item.InventoryID;			
            m_Internal.Quantitiy = _Item.Quantitiy;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.MoveID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Move.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Move>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Move(Expression<Func<Move, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Move> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Move> _repo;
            
            if(db.TestMode)
            {
                Move.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Move>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Move> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Move SingleOrDefault(Expression<Func<Move, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Move SingleOrDefault(Expression<Func<Move, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Move> repo = GetRepo(connectionString,providerName);
            Move single = repo.SingleOrDefault<Move>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Move, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Move, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyMoveLoaded = false;
        protected static Move EmptyMoveMember = null;

        public static Move GetByID(Guid? value) 
        {
            Move rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Move GetByID(Guid value) 
        {
            Move rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyMoveLoaded )
                    {
                        rc = EmptyMoveMember;
                    }
                    else
                    {
                        IsEmptyMoveLoaded = true;
                        rc = Move.Find( L => L.MoveID.Equals( value ) ).FirstOrDefault( );
                        EmptyMoveMember = rc;
                    }
                }
                else
                {
                    rc = Move.Find( L => L.MoveID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Move> Find(Expression<Func<Move, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Move> Find(Expression<Func<Move, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Move> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Move> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Move> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Move> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Move> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Move> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "MoveID";
        }

        public object KeyValue()
        {
            return this.MoveID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.MoveTime )
//			{
//				rc = this.MoveTime.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Move)
            {
                Move compare=(Move)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.MoveID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.MoveTime.ToString();
        }

        public string DescriptorColumn() 
        {
            return "MoveTime";
        }

        public static string GetKeyColumn()
        {
            return "MoveID";
        }        

        public static string GetDescriptorColumn()
        {
            return "MoveTime";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.MoveID;
            }
            set
            {
                m_Internal.MoveID = value;
            }
        }


//        Guid _MoveID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid MoveID
        {
            get { return m_Internal.MoveID; }
            set
            {
                if(m_Internal.MoveID!=value){
                    m_Internal.MoveID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MoveID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _MoveTime;
        [LocalData]
        public DateTime MoveTime
        {
            get { return m_Internal.MoveTime; }
            set
            {
                if(m_Internal.MoveTime!=value){
                    m_Internal.MoveTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MoveTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _OldLocation;
        [LocalData]
        public Guid OldLocation
        {
            get { return m_Internal.OldLocation; }
            set
            {
                if(m_Internal.OldLocation!=value){
                    m_Internal.OldLocation=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OldLocation");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _NewLocation;
        [LocalData]
        public Guid NewLocation
        {
            get { return m_Internal.NewLocation; }
            set
            {
                if(m_Internal.NewLocation!=value){
                    m_Internal.NewLocation=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NewLocation");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _TagID;
        [LocalData]
        public Guid? TagID
        {
            get { return m_Internal.TagID; }
            set
            {
                if(m_Internal.TagID!=value){
                    m_Internal.TagID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _InventoryID;
        [LocalData]
        public Guid? InventoryID
        {
            get { return m_Internal.InventoryID; }
            set
            {
                if(m_Internal.InventoryID!=value){
                    m_Internal.InventoryID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InventoryID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Quantitiy;
        [LocalData]
        public int Quantitiy
        {
            get { return m_Internal.Quantitiy; }
            set
            {
                if(m_Internal.Quantitiy!=value){
                    m_Internal.Quantitiy=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quantitiy");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Move, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataOrganization : IWCFDataElement
    {
        [DataMember]
        public Guid OrganizationID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Description { get; set; }

        public void Copy( DataOrganization _Item )
        {
             Name = _Item.Name;			
             Description = _Item.Description;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Organization( this );
        }


    }


    /// <summary>
    /// A class which represents the Organizations table in the BeverageMonitor Database.
    /// </summary>
    public partial class Organization: BaseDataObject<DataOrganization>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Organization> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Organization>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Organization> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Organization item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Organization item=new Organization();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Organization> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Organization()
        {
            m_Internal = new DataOrganization();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.OrganizationID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Organization( bool _CallOnCreated )
        {
            m_Internal = new DataOrganization();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Organization(string connectionString, string providerName) 
        {
            m_Internal = new DataOrganization();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.OrganizationID = Guid.NewGuid( );     
        }

        public Organization( Organization _Item )
        {
            m_Internal = new DataOrganization();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Organization( DataOrganization _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Organization _Item )
        {
            m_Internal.Name = _Item.Name;			
            m_Internal.Description = _Item.Description;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.OrganizationID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Organization.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Organization>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Organization(Expression<Func<Organization, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Organization> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Organization> _repo;
            
            if(db.TestMode)
            {
                Organization.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Organization>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Organization> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Organization SingleOrDefault(Expression<Func<Organization, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Organization SingleOrDefault(Expression<Func<Organization, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Organization> repo = GetRepo(connectionString,providerName);
            Organization single = repo.SingleOrDefault<Organization>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Organization, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Organization, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyOrganizationLoaded = false;
        protected static Organization EmptyOrganizationMember = null;

        public static Organization GetByID(Guid? value) 
        {
            Organization rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Organization GetByID(Guid value) 
        {
            Organization rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyOrganizationLoaded )
                    {
                        rc = EmptyOrganizationMember;
                    }
                    else
                    {
                        IsEmptyOrganizationLoaded = true;
                        rc = Organization.Find( L => L.OrganizationID.Equals( value ) ).FirstOrDefault( );
                        EmptyOrganizationMember = rc;
                    }
                }
                else
                {
                    rc = Organization.Find( L => L.OrganizationID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Organization> Find(Expression<Func<Organization, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Organization> Find(Expression<Func<Organization, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Organization> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Organization> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Organization> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Organization> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Organization> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Organization> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "OrganizationID";
        }

        public object KeyValue()
        {
            return this.OrganizationID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Organization)
            {
                Organization compare=(Organization)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.OrganizationID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "OrganizationID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Location> Locations
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Location.GetRepo();
                  return from items in repo.GetAll()
                       where items.OrganizationID == m_Internal.OrganizationID
                       select items;
            }
        }
        public IQueryable<UsersXOrganization> UsersXOrganizations
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UsersXOrganization.GetRepo();
                  return from items in repo.GetAll()
                       where items.OrganizationID == m_Internal.OrganizationID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.OrganizationID;
            }
            set
            {
                m_Internal.OrganizationID = value;
            }
        }


//        Guid _OrganizationID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid OrganizationID
        {
            get { return m_Internal.OrganizationID; }
            set
            {
                if(m_Internal.OrganizationID!=value){
                    m_Internal.OrganizationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Organization, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataParLevel : IWCFDataElement
    {
        [DataMember]
        public Guid ParLevelID { get; set; }
        [DataMember]
        public Guid LocationID { get; set; }
        [DataMember]
        public Guid UPCID { get; set; }
        [DataMember]
        public double BottleCount { get; set; }

        public void Copy( DataParLevel _Item )
        {
             LocationID = _Item.LocationID;			
             UPCID = _Item.UPCID;			
             BottleCount = _Item.BottleCount;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new ParLevel( this );
        }


    }


    /// <summary>
    /// A class which represents the ParLevels table in the BeverageMonitor Database.
    /// </summary>
    public partial class ParLevel: BaseDataObject<DataParLevel>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<ParLevel> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<ParLevel>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<ParLevel> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(ParLevel item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                ParLevel item=new ParLevel();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<ParLevel> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public ParLevel()
        {
            m_Internal = new DataParLevel();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.ParLevelID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public ParLevel( bool _CallOnCreated )
        {
            m_Internal = new DataParLevel();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public ParLevel(string connectionString, string providerName) 
        {
            m_Internal = new DataParLevel();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.ParLevelID = Guid.NewGuid( );     
        }

        public ParLevel( ParLevel _Item )
        {
            m_Internal = new DataParLevel();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public ParLevel( DataParLevel _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( ParLevel _Item )
        {
            m_Internal.LocationID = _Item.LocationID;			
            m_Internal.UPCID = _Item.UPCID;			
            m_Internal.BottleCount = _Item.BottleCount;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.ParLevelID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                ParLevel.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ParLevel>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public ParLevel(Expression<Func<ParLevel, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<ParLevel> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<ParLevel> _repo;
            
            if(db.TestMode)
            {
                ParLevel.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ParLevel>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ParLevel> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static ParLevel SingleOrDefault(Expression<Func<ParLevel, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static ParLevel SingleOrDefault(Expression<Func<ParLevel, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<ParLevel> repo = GetRepo(connectionString,providerName);
            ParLevel single = repo.SingleOrDefault<ParLevel>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<ParLevel, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<ParLevel, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyParLevelLoaded = false;
        protected static ParLevel EmptyParLevelMember = null;

        public static ParLevel GetByID(Guid? value) 
        {
            ParLevel rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static ParLevel GetByID(Guid value) 
        {
            ParLevel rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyParLevelLoaded )
                    {
                        rc = EmptyParLevelMember;
                    }
                    else
                    {
                        IsEmptyParLevelLoaded = true;
                        rc = ParLevel.Find( L => L.ParLevelID.Equals( value ) ).FirstOrDefault( );
                        EmptyParLevelMember = rc;
                    }
                }
                else
                {
                    rc = ParLevel.Find( L => L.ParLevelID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<ParLevel> Find(Expression<Func<ParLevel, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ParLevel> Find(Expression<Func<ParLevel, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<ParLevel> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<ParLevel> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ParLevel> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ParLevel> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ParLevel> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<ParLevel> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "ParLevelID";
        }

        public object KeyValue()
        {
            return this.ParLevelID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.LocationID )
//			{
//				rc = this.LocationID.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is ParLevel)
            {
                ParLevel compare=(ParLevel)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.ParLevelID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.LocationID.ToString();
        }

        public string DescriptorColumn() 
        {
            return "LocationID";
        }

        public static string GetKeyColumn()
        {
            return "ParLevelID";
        }        

        public static string GetDescriptorColumn()
        {
            return "LocationID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Location> LocationItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Location.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        public IQueryable<UPC> UPCItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UPC.GetRepo();
                  return from items in repo.GetAll()
                       where items.UPCID == m_Internal.UPCID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.ParLevelID;
            }
            set
            {
                m_Internal.ParLevelID = value;
            }
        }


//        Guid _ParLevelID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid ParLevelID
        {
            get { return m_Internal.ParLevelID; }
            set
            {
                if(m_Internal.ParLevelID!=value){
                    m_Internal.ParLevelID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParLevelID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _LocationID;
        [LocalData]
        public Guid LocationID
        {
            get { return m_Internal.LocationID; }
            set
            {
                if(m_Internal.LocationID!=value){
                    m_Internal.LocationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _UPCID;
        [LocalData]
        public Guid UPCID
        {
            get { return m_Internal.UPCID; }
            set
            {
                if(m_Internal.UPCID!=value){
                    m_Internal.UPCID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UPCID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _BottleCount;
        [LocalData]
        public double BottleCount
        {
            get { return m_Internal.BottleCount; }
            set
            {
                if(m_Internal.BottleCount!=value){
                    m_Internal.BottleCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BottleCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<ParLevel, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataPOSTicketItemModifier : IWCFDataElement
    {
        [DataMember]
        public Guid POSTicketITemModifierID { get; set; }
        [DataMember]
        public Guid POSTicketItemID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public decimal? Price { get; set; }

        public void Copy( DataPOSTicketItemModifier _Item )
        {
             POSTicketItemID = _Item.POSTicketItemID;			
             Name = _Item.Name;			
             Price = _Item.Price;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new POSTicketItemModifier( this );
        }


    }


    /// <summary>
    /// A class which represents the POSTicketItemModifiers table in the BeverageMonitor Database.
    /// </summary>
    public partial class POSTicketItemModifier: BaseDataObject<DataPOSTicketItemModifier>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<POSTicketItemModifier> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<POSTicketItemModifier>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<POSTicketItemModifier> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(POSTicketItemModifier item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                POSTicketItemModifier item=new POSTicketItemModifier();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<POSTicketItemModifier> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public POSTicketItemModifier()
        {
            m_Internal = new DataPOSTicketItemModifier();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.POSTicketITemModifierID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public POSTicketItemModifier( bool _CallOnCreated )
        {
            m_Internal = new DataPOSTicketItemModifier();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public POSTicketItemModifier(string connectionString, string providerName) 
        {
            m_Internal = new DataPOSTicketItemModifier();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.POSTicketITemModifierID = Guid.NewGuid( );     
        }

        public POSTicketItemModifier( POSTicketItemModifier _Item )
        {
            m_Internal = new DataPOSTicketItemModifier();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public POSTicketItemModifier( DataPOSTicketItemModifier _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( POSTicketItemModifier _Item )
        {
            m_Internal.POSTicketItemID = _Item.POSTicketItemID;			
            m_Internal.Name = _Item.Name;			
            m_Internal.Price = _Item.Price;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.POSTicketITemModifierID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                POSTicketItemModifier.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicketItemModifier>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public POSTicketItemModifier(Expression<Func<POSTicketItemModifier, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<POSTicketItemModifier> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<POSTicketItemModifier> _repo;
            
            if(db.TestMode)
            {
                POSTicketItemModifier.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicketItemModifier>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<POSTicketItemModifier> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static POSTicketItemModifier SingleOrDefault(Expression<Func<POSTicketItemModifier, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static POSTicketItemModifier SingleOrDefault(Expression<Func<POSTicketItemModifier, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<POSTicketItemModifier> repo = GetRepo(connectionString,providerName);
            POSTicketItemModifier single = repo.SingleOrDefault<POSTicketItemModifier>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<POSTicketItemModifier, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<POSTicketItemModifier, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyPOSTicketItemModifierLoaded = false;
        protected static POSTicketItemModifier EmptyPOSTicketItemModifierMember = null;

        public static POSTicketItemModifier GetByID(Guid? value) 
        {
            POSTicketItemModifier rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static POSTicketItemModifier GetByID(Guid value) 
        {
            POSTicketItemModifier rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyPOSTicketItemModifierLoaded )
                    {
                        rc = EmptyPOSTicketItemModifierMember;
                    }
                    else
                    {
                        IsEmptyPOSTicketItemModifierLoaded = true;
                        rc = POSTicketItemModifier.Find( L => L.POSTicketITemModifierID.Equals( value ) ).FirstOrDefault( );
                        EmptyPOSTicketItemModifierMember = rc;
                    }
                }
                else
                {
                    rc = POSTicketItemModifier.Find( L => L.POSTicketITemModifierID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<POSTicketItemModifier> Find(Expression<Func<POSTicketItemModifier, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<POSTicketItemModifier> Find(Expression<Func<POSTicketItemModifier, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<POSTicketItemModifier> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<POSTicketItemModifier> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<POSTicketItemModifier> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<POSTicketItemModifier> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<POSTicketItemModifier> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<POSTicketItemModifier> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "POSTicketITemModifierID";
        }

        public object KeyValue()
        {
            return this.POSTicketITemModifierID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is POSTicketItemModifier)
            {
                POSTicketItemModifier compare=(POSTicketItemModifier)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.POSTicketITemModifierID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "POSTicketITemModifierID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.POSTicketITemModifierID;
            }
            set
            {
                m_Internal.POSTicketITemModifierID = value;
            }
        }


//        Guid _POSTicketITemModifierID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid POSTicketITemModifierID
        {
            get { return m_Internal.POSTicketITemModifierID; }
            set
            {
                if(m_Internal.POSTicketITemModifierID!=value){
                    m_Internal.POSTicketITemModifierID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketITemModifierID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _POSTicketItemID;
        [LocalData]
        public Guid POSTicketItemID
        {
            get { return m_Internal.POSTicketItemID; }
            set
            {
                if(m_Internal.POSTicketItemID!=value){
                    m_Internal.POSTicketItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Price;
        [LocalData]
        public decimal? Price
        {
            get { return m_Internal.Price; }
            set
            {
                if(m_Internal.Price!=value){
                    m_Internal.Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<POSTicketItemModifier, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataPOSTicketItem : IWCFDataElement
    {
        [DataMember]
        public Guid POSTicketItemID { get; set; }
        [DataMember]
        public Guid POSTicketID { get; set; }
        [DataMember]
        public string Comment { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public decimal? Price { get; set; }
        [DataMember]
        public int Reconciled { get; set; }
        [DataMember]
        public int Quantity { get; set; }
        [DataMember]
        public int Status { get; set; }

        public void Copy( DataPOSTicketItem _Item )
        {
             POSTicketID = _Item.POSTicketID;			
             Comment = _Item.Comment;			
             Description = _Item.Description;			
             Price = _Item.Price;			
             Reconciled = _Item.Reconciled;			
             Quantity = _Item.Quantity;			
             Status = _Item.Status;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new POSTicketItem( this );
        }


    }


    /// <summary>
    /// A class which represents the POSTicketItems table in the BeverageMonitor Database.
    /// </summary>
    public partial class POSTicketItem: BaseDataObject<DataPOSTicketItem>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<POSTicketItem> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<POSTicketItem>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<POSTicketItem> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(POSTicketItem item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                POSTicketItem item=new POSTicketItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<POSTicketItem> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public POSTicketItem()
        {
            m_Internal = new DataPOSTicketItem();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.POSTicketItemID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public POSTicketItem( bool _CallOnCreated )
        {
            m_Internal = new DataPOSTicketItem();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public POSTicketItem(string connectionString, string providerName) 
        {
            m_Internal = new DataPOSTicketItem();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.POSTicketItemID = Guid.NewGuid( );     
        }

        public POSTicketItem( POSTicketItem _Item )
        {
            m_Internal = new DataPOSTicketItem();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public POSTicketItem( DataPOSTicketItem _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( POSTicketItem _Item )
        {
            m_Internal.POSTicketID = _Item.POSTicketID;			
            m_Internal.Comment = _Item.Comment;			
            m_Internal.Description = _Item.Description;			
            m_Internal.Price = _Item.Price;			
            m_Internal.Reconciled = _Item.Reconciled;			
            m_Internal.Quantity = _Item.Quantity;			
            m_Internal.Status = _Item.Status;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.POSTicketItemID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                POSTicketItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicketItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public POSTicketItem(Expression<Func<POSTicketItem, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<POSTicketItem> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<POSTicketItem> _repo;
            
            if(db.TestMode)
            {
                POSTicketItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicketItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<POSTicketItem> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static POSTicketItem SingleOrDefault(Expression<Func<POSTicketItem, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static POSTicketItem SingleOrDefault(Expression<Func<POSTicketItem, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<POSTicketItem> repo = GetRepo(connectionString,providerName);
            POSTicketItem single = repo.SingleOrDefault<POSTicketItem>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<POSTicketItem, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<POSTicketItem, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyPOSTicketItemLoaded = false;
        protected static POSTicketItem EmptyPOSTicketItemMember = null;

        public static POSTicketItem GetByID(Guid? value) 
        {
            POSTicketItem rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static POSTicketItem GetByID(Guid value) 
        {
            POSTicketItem rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyPOSTicketItemLoaded )
                    {
                        rc = EmptyPOSTicketItemMember;
                    }
                    else
                    {
                        IsEmptyPOSTicketItemLoaded = true;
                        rc = POSTicketItem.Find( L => L.POSTicketItemID.Equals( value ) ).FirstOrDefault( );
                        EmptyPOSTicketItemMember = rc;
                    }
                }
                else
                {
                    rc = POSTicketItem.Find( L => L.POSTicketItemID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<POSTicketItem> Find(Expression<Func<POSTicketItem, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<POSTicketItem> Find(Expression<Func<POSTicketItem, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<POSTicketItem> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<POSTicketItem> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<POSTicketItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<POSTicketItem> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<POSTicketItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<POSTicketItem> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "POSTicketItemID";
        }

        public object KeyValue()
        {
            return this.POSTicketItemID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Comment )
//			{
//				rc = this.Comment.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is POSTicketItem)
            {
                POSTicketItem compare=(POSTicketItem)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.POSTicketItemID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Comment.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Comment";
        }

        public static string GetKeyColumn()
        {
            return "POSTicketItemID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Comment";
        }
        
        #region ' Foreign Keys '
        public IQueryable<POSTicket> POSTicketsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.POSTicket.GetRepo();
                  return from items in repo.GetAll()
                       where items.POSTicketID == m_Internal.POSTicketID
                       select items;
            }
        }
        public IQueryable<Pour> Pours
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Pour.GetRepo();
                  return from items in repo.GetAll()
                       where items.POSTicketItemID == m_Internal.POSTicketItemID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.POSTicketItemID;
            }
            set
            {
                m_Internal.POSTicketItemID = value;
            }
        }


//        Guid _POSTicketItemID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid POSTicketItemID
        {
            get { return m_Internal.POSTicketItemID; }
            set
            {
                if(m_Internal.POSTicketItemID!=value){
                    m_Internal.POSTicketItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _POSTicketID;
        [LocalData]
        public Guid POSTicketID
        {
            get { return m_Internal.POSTicketID; }
            set
            {
                if(m_Internal.POSTicketID!=value){
                    m_Internal.POSTicketID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Comment;
        [LocalData]
        public string Comment
        {
            get { return m_Internal.Comment; }
            set
            {
                if(m_Internal.Comment!=value){
                    m_Internal.Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _Price;
        [LocalData]
        public decimal? Price
        {
            get { return m_Internal.Price; }
            set
            {
                if(m_Internal.Price!=value){
                    m_Internal.Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Reconciled;
        [LocalData]
        public int Reconciled
        {
            get { return m_Internal.Reconciled; }
            set
            {
                if(m_Internal.Reconciled!=value){
                    m_Internal.Reconciled=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Reconciled");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Quantity;
        [LocalData]
        public int Quantity
        {
            get { return m_Internal.Quantity; }
            set
            {
                if(m_Internal.Quantity!=value){
                    m_Internal.Quantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Status;
        [LocalData]
        public int Status
        {
            get { return m_Internal.Status; }
            set
            {
                if(m_Internal.Status!=value){
                    m_Internal.Status=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Status");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<POSTicketItem, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataPOSTicket : IWCFDataElement
    {
        [DataMember]
        public Guid POSTicketID { get; set; }
        [DataMember]
        public Guid LocationID { get; set; }
        [DataMember]
        public string CheckNumber { get; set; }
        [DataMember]
        public string Comments { get; set; }
        [DataMember]
        public DateTime TicketDate { get; set; }
        [DataMember]
        public string Establishment { get; set; }
        [DataMember]
        public int GuestCount { get; set; }
        [DataMember]
        public string CustomerTable { get; set; }
        [DataMember]
        public string RawData { get; set; }

        public void Copy( DataPOSTicket _Item )
        {
             LocationID = _Item.LocationID;			
             CheckNumber = _Item.CheckNumber;			
             Comments = _Item.Comments;			
             TicketDate = _Item.TicketDate;			
             Establishment = _Item.Establishment;			
             GuestCount = _Item.GuestCount;			
             CustomerTable = _Item.CustomerTable;			
             RawData = _Item.RawData;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new POSTicket( this );
        }


    }


    /// <summary>
    /// A class which represents the POSTickets table in the BeverageMonitor Database.
    /// </summary>
    public partial class POSTicket: BaseDataObject<DataPOSTicket>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<POSTicket> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<POSTicket>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<POSTicket> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(POSTicket item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                POSTicket item=new POSTicket();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<POSTicket> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public POSTicket()
        {
            m_Internal = new DataPOSTicket();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.POSTicketID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public POSTicket( bool _CallOnCreated )
        {
            m_Internal = new DataPOSTicket();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public POSTicket(string connectionString, string providerName) 
        {
            m_Internal = new DataPOSTicket();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.POSTicketID = Guid.NewGuid( );     
        }

        public POSTicket( POSTicket _Item )
        {
            m_Internal = new DataPOSTicket();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public POSTicket( DataPOSTicket _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( POSTicket _Item )
        {
            m_Internal.LocationID = _Item.LocationID;			
            m_Internal.CheckNumber = _Item.CheckNumber;			
            m_Internal.Comments = _Item.Comments;			
            m_Internal.TicketDate = _Item.TicketDate;			
            m_Internal.Establishment = _Item.Establishment;			
            m_Internal.GuestCount = _Item.GuestCount;			
            m_Internal.CustomerTable = _Item.CustomerTable;			
            m_Internal.RawData = _Item.RawData;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.POSTicketID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                POSTicket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicket>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public POSTicket(Expression<Func<POSTicket, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<POSTicket> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<POSTicket> _repo;
            
            if(db.TestMode)
            {
                POSTicket.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<POSTicket>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<POSTicket> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static POSTicket SingleOrDefault(Expression<Func<POSTicket, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static POSTicket SingleOrDefault(Expression<Func<POSTicket, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<POSTicket> repo = GetRepo(connectionString,providerName);
            POSTicket single = repo.SingleOrDefault<POSTicket>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<POSTicket, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<POSTicket, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyPOSTicketLoaded = false;
        protected static POSTicket EmptyPOSTicketMember = null;

        public static POSTicket GetByID(Guid? value) 
        {
            POSTicket rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static POSTicket GetByID(Guid value) 
        {
            POSTicket rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyPOSTicketLoaded )
                    {
                        rc = EmptyPOSTicketMember;
                    }
                    else
                    {
                        IsEmptyPOSTicketLoaded = true;
                        rc = POSTicket.Find( L => L.POSTicketID.Equals( value ) ).FirstOrDefault( );
                        EmptyPOSTicketMember = rc;
                    }
                }
                else
                {
                    rc = POSTicket.Find( L => L.POSTicketID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<POSTicket> Find(Expression<Func<POSTicket, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<POSTicket> Find(Expression<Func<POSTicket, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<POSTicket> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<POSTicket> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<POSTicket> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<POSTicket> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<POSTicket> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<POSTicket> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "POSTicketID";
        }

        public object KeyValue()
        {
            return this.POSTicketID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.CheckNumber )
//			{
//				rc = this.CheckNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is POSTicket)
            {
                POSTicket compare=(POSTicket)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.POSTicketID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.CheckNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "CheckNumber";
        }

        public static string GetKeyColumn()
        {
            return "POSTicketID";
        }        

        public static string GetDescriptorColumn()
        {
            return "CheckNumber";
        }
        
        #region ' Foreign Keys '
        public IQueryable<POSTicketItem> POSTicketItems
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.POSTicketItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.POSTicketID == m_Internal.POSTicketID
                       select items;
            }
        }
        public IQueryable<Location> LocationsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Location.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.POSTicketID;
            }
            set
            {
                m_Internal.POSTicketID = value;
            }
        }


//        Guid _POSTicketID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid POSTicketID
        {
            get { return m_Internal.POSTicketID; }
            set
            {
                if(m_Internal.POSTicketID!=value){
                    m_Internal.POSTicketID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _LocationID;
        [LocalData]
        public Guid LocationID
        {
            get { return m_Internal.LocationID; }
            set
            {
                if(m_Internal.LocationID!=value){
                    m_Internal.LocationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CheckNumber;
        [LocalData]
        public string CheckNumber
        {
            get { return m_Internal.CheckNumber; }
            set
            {
                if(m_Internal.CheckNumber!=value){
                    m_Internal.CheckNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Comments;
        [LocalData]
        public string Comments
        {
            get { return m_Internal.Comments; }
            set
            {
                if(m_Internal.Comments!=value){
                    m_Internal.Comments=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comments");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _TicketDate;
        [LocalData]
        public DateTime TicketDate
        {
            get { return m_Internal.TicketDate; }
            set
            {
                if(m_Internal.TicketDate!=value){
                    m_Internal.TicketDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Establishment;
        [LocalData]
        public string Establishment
        {
            get { return m_Internal.Establishment; }
            set
            {
                if(m_Internal.Establishment!=value){
                    m_Internal.Establishment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Establishment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _GuestCount;
        [LocalData]
        public int GuestCount
        {
            get { return m_Internal.GuestCount; }
            set
            {
                if(m_Internal.GuestCount!=value){
                    m_Internal.GuestCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GuestCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CustomerTable;
        [LocalData]
        public string CustomerTable
        {
            get { return m_Internal.CustomerTable; }
            set
            {
                if(m_Internal.CustomerTable!=value){
                    m_Internal.CustomerTable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerTable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RawData;
        [LocalData]
        public string RawData
        {
            get { return m_Internal.RawData; }
            set
            {
                if(m_Internal.RawData!=value){
                    m_Internal.RawData=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RawData");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<POSTicket, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataPour : IWCFDataElement
    {
        [DataMember]
        public Guid PourID { get; set; }
        [DataMember]
        public Guid TagID { get; set; }
        [DataMember]
        public Guid DeviceID { get; set; }
        [DataMember]
        public double Volume { get; set; }
        [DataMember]
        public DateTime PourTime { get; set; }
        [DataMember]
        public double Duration { get; set; }
        [DataMember]
        public double AmountLeft { get; set; }
        [DataMember]
        public double Temperature { get; set; }
        [DataMember]
        public string RawData { get; set; }
        [DataMember]
        public double BatteryVoltage { get; set; }
        [DataMember]
        public Guid UPCID { get; set; }
        [DataMember]
        public Guid? POSTicketItemID { get; set; }
        [DataMember]
        public bool Alerted { get; set; }
        [DataMember]
        public Guid LocationID { get; set; }
        [DataMember]
        public Guid? IngredientID { get; set; }
        [DataMember]
        public int? Status { get; set; }

        public void Copy( DataPour _Item )
        {
             TagID = _Item.TagID;			
             DeviceID = _Item.DeviceID;			
             Volume = _Item.Volume;			
             PourTime = _Item.PourTime;			
             Duration = _Item.Duration;			
             AmountLeft = _Item.AmountLeft;			
             Temperature = _Item.Temperature;			
             RawData = _Item.RawData;			
             BatteryVoltage = _Item.BatteryVoltage;			
             UPCID = _Item.UPCID;			
             POSTicketItemID = _Item.POSTicketItemID;			
             Alerted = _Item.Alerted;			
             LocationID = _Item.LocationID;			
             IngredientID = _Item.IngredientID;			
             Status = _Item.Status;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Pour( this );
        }


    }


    /// <summary>
    /// A class which represents the Pours table in the BeverageMonitor Database.
    /// </summary>
    public partial class Pour: BaseDataObject<DataPour>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Pour> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Pour>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Pour> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Pour item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Pour item=new Pour();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Pour> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Pour()
        {
            m_Internal = new DataPour();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.PourID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Pour( bool _CallOnCreated )
        {
            m_Internal = new DataPour();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Pour(string connectionString, string providerName) 
        {
            m_Internal = new DataPour();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.PourID = Guid.NewGuid( );     
        }

        public Pour( Pour _Item )
        {
            m_Internal = new DataPour();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Pour( DataPour _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Pour _Item )
        {
            m_Internal.TagID = _Item.TagID;			
            m_Internal.DeviceID = _Item.DeviceID;			
            m_Internal.Volume = _Item.Volume;			
            m_Internal.PourTime = _Item.PourTime;			
            m_Internal.Duration = _Item.Duration;			
            m_Internal.AmountLeft = _Item.AmountLeft;			
            m_Internal.Temperature = _Item.Temperature;			
            m_Internal.RawData = _Item.RawData;			
            m_Internal.BatteryVoltage = _Item.BatteryVoltage;			
            m_Internal.UPCID = _Item.UPCID;			
            m_Internal.POSTicketItemID = _Item.POSTicketItemID;			
            m_Internal.Alerted = _Item.Alerted;			
            m_Internal.LocationID = _Item.LocationID;			
            m_Internal.IngredientID = _Item.IngredientID;			
            m_Internal.Status = _Item.Status;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.PourID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Pour.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Pour>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Pour(Expression<Func<Pour, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Pour> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Pour> _repo;
            
            if(db.TestMode)
            {
                Pour.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Pour>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Pour> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Pour SingleOrDefault(Expression<Func<Pour, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Pour SingleOrDefault(Expression<Func<Pour, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Pour> repo = GetRepo(connectionString,providerName);
            Pour single = repo.SingleOrDefault<Pour>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Pour, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Pour, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyPourLoaded = false;
        protected static Pour EmptyPourMember = null;

        public static Pour GetByID(Guid? value) 
        {
            Pour rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Pour GetByID(Guid value) 
        {
            Pour rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyPourLoaded )
                    {
                        rc = EmptyPourMember;
                    }
                    else
                    {
                        IsEmptyPourLoaded = true;
                        rc = Pour.Find( L => L.PourID.Equals( value ) ).FirstOrDefault( );
                        EmptyPourMember = rc;
                    }
                }
                else
                {
                    rc = Pour.Find( L => L.PourID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Pour> Find(Expression<Func<Pour, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Pour> Find(Expression<Func<Pour, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Pour> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Pour> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Pour> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Pour> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Pour> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Pour> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "PourID";
        }

        public object KeyValue()
        {
            return this.PourID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.RawData )
//			{
//				rc = this.RawData.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Pour)
            {
                Pour compare=(Pour)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.PourID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.RawData.ToString();
        }

        public string DescriptorColumn() 
        {
            return "RawData";
        }

        public static string GetKeyColumn()
        {
            return "PourID";
        }        

        public static string GetDescriptorColumn()
        {
            return "RawData";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Device> DevicesItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Device.GetRepo();
                  return from items in repo.GetAll()
                       where items.DeviceID == m_Internal.DeviceID
                       select items;
            }
        }
        public IQueryable<Ingredient> IngredientsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Ingredient.GetRepo();
                  return from items in repo.GetAll()
                       where items.IngredientID == m_Internal.IngredientID
                       select items;
            }
        }
        public IQueryable<Tag> TagsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Tag.GetRepo();
                  return from items in repo.GetAll()
                       where items.TagID == m_Internal.TagID
                       select items;
            }
        }
        public IQueryable<POSTicketItem> TicketItemsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.POSTicketItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.POSTicketItemID == m_Internal.POSTicketItemID
                       select items;
            }
        }
        public IQueryable<UPC> UPCsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UPC.GetRepo();
                  return from items in repo.GetAll()
                       where items.UPCID == m_Internal.UPCID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.PourID;
            }
            set
            {
                m_Internal.PourID = value;
            }
        }


//        Guid _PourID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid PourID
        {
            get { return m_Internal.PourID; }
            set
            {
                if(m_Internal.PourID!=value){
                    m_Internal.PourID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _TagID;
        [LocalData]
        public Guid TagID
        {
            get { return m_Internal.TagID; }
            set
            {
                if(m_Internal.TagID!=value){
                    m_Internal.TagID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _DeviceID;
        [LocalData]
        public Guid DeviceID
        {
            get { return m_Internal.DeviceID; }
            set
            {
                if(m_Internal.DeviceID!=value){
                    m_Internal.DeviceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeviceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Volume;
        [LocalData]
        public double Volume
        {
            get { return m_Internal.Volume; }
            set
            {
                if(m_Internal.Volume!=value){
                    m_Internal.Volume=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Volume");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _PourTime;
        [LocalData]
        public DateTime PourTime
        {
            get { return m_Internal.PourTime; }
            set
            {
                if(m_Internal.PourTime!=value){
                    m_Internal.PourTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Duration;
        [LocalData]
        public double Duration
        {
            get { return m_Internal.Duration; }
            set
            {
                if(m_Internal.Duration!=value){
                    m_Internal.Duration=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Duration");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _AmountLeft;
        [LocalData]
        public double AmountLeft
        {
            get { return m_Internal.AmountLeft; }
            set
            {
                if(m_Internal.AmountLeft!=value){
                    m_Internal.AmountLeft=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AmountLeft");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Temperature;
        [LocalData]
        public double Temperature
        {
            get { return m_Internal.Temperature; }
            set
            {
                if(m_Internal.Temperature!=value){
                    m_Internal.Temperature=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Temperature");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RawData;
        [LocalData]
        public string RawData
        {
            get { return m_Internal.RawData; }
            set
            {
                if(m_Internal.RawData!=value){
                    m_Internal.RawData=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RawData");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _BatteryVoltage;
        [LocalData]
        public double BatteryVoltage
        {
            get { return m_Internal.BatteryVoltage; }
            set
            {
                if(m_Internal.BatteryVoltage!=value){
                    m_Internal.BatteryVoltage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BatteryVoltage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _UPCID;
        [LocalData]
        public Guid UPCID
        {
            get { return m_Internal.UPCID; }
            set
            {
                if(m_Internal.UPCID!=value){
                    m_Internal.UPCID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UPCID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _POSTicketItemID;
        [LocalData]
        public Guid? POSTicketItemID
        {
            get { return m_Internal.POSTicketItemID; }
            set
            {
                if(m_Internal.POSTicketItemID!=value){
                    m_Internal.POSTicketItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="POSTicketItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        bool _Alerted;
        [LocalData]
        public bool Alerted
        {
            get { return m_Internal.Alerted; }
            set
            {
                if(m_Internal.Alerted!=value){
                    m_Internal.Alerted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Alerted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _LocationID;
        [LocalData]
        public Guid LocationID
        {
            get { return m_Internal.LocationID; }
            set
            {
                if(m_Internal.LocationID!=value){
                    m_Internal.LocationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _IngredientID;
        [LocalData]
        public Guid? IngredientID
        {
            get { return m_Internal.IngredientID; }
            set
            {
                if(m_Internal.IngredientID!=value){
                    m_Internal.IngredientID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IngredientID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Status;
        [LocalData]
        public int? Status
        {
            get { return m_Internal.Status; }
            set
            {
                if(m_Internal.Status!=value){
                    m_Internal.Status=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Status");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Pour, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataQuality : IWCFDataElement
    {
        [DataMember]
        public Guid QualityID { get; set; }
        [DataMember]
        public int QualityLevel { get; set; }
        [DataMember]
        public string Name { get; set; }

        public void Copy( DataQuality _Item )
        {
             QualityLevel = _Item.QualityLevel;			
             Name = _Item.Name;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Quality( this );
        }


    }


    /// <summary>
    /// A class which represents the Quality table in the BeverageMonitor Database.
    /// </summary>
    public partial class Quality: BaseDataObject<DataQuality>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Quality> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Quality>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Quality> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Quality item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Quality item=new Quality();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Quality> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Quality()
        {
            m_Internal = new DataQuality();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.QualityID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Quality( bool _CallOnCreated )
        {
            m_Internal = new DataQuality();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Quality(string connectionString, string providerName) 
        {
            m_Internal = new DataQuality();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.QualityID = Guid.NewGuid( );     
        }

        public Quality( Quality _Item )
        {
            m_Internal = new DataQuality();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Quality( DataQuality _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Quality _Item )
        {
            m_Internal.QualityLevel = _Item.QualityLevel;			
            m_Internal.Name = _Item.Name;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.QualityID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Quality.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Quality>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Quality(Expression<Func<Quality, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Quality> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Quality> _repo;
            
            if(db.TestMode)
            {
                Quality.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Quality>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Quality> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Quality SingleOrDefault(Expression<Func<Quality, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Quality SingleOrDefault(Expression<Func<Quality, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Quality> repo = GetRepo(connectionString,providerName);
            Quality single = repo.SingleOrDefault<Quality>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Quality, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Quality, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyQualityLoaded = false;
        protected static Quality EmptyQualityMember = null;

        public static Quality GetByID(Guid? value) 
        {
            Quality rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Quality GetByID(Guid value) 
        {
            Quality rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyQualityLoaded )
                    {
                        rc = EmptyQualityMember;
                    }
                    else
                    {
                        IsEmptyQualityLoaded = true;
                        rc = Quality.Find( L => L.QualityID.Equals( value ) ).FirstOrDefault( );
                        EmptyQualityMember = rc;
                    }
                }
                else
                {
                    rc = Quality.Find( L => L.QualityID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Quality> Find(Expression<Func<Quality, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Quality> Find(Expression<Func<Quality, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Quality> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Quality> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Quality> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Quality> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Quality> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Quality> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "QualityID";
        }

        public object KeyValue()
        {
            return this.QualityID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Quality)
            {
                Quality compare=(Quality)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.QualityID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "QualityID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.QualityID;
            }
            set
            {
                m_Internal.QualityID = value;
            }
        }


//        Guid _QualityID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid QualityID
        {
            get { return m_Internal.QualityID; }
            set
            {
                if(m_Internal.QualityID!=value){
                    m_Internal.QualityID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QualityID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _QualityLevel;
        [LocalData]
        public int QualityLevel
        {
            get { return m_Internal.QualityLevel; }
            set
            {
                if(m_Internal.QualityLevel!=value){
                    m_Internal.QualityLevel=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QualityLevel");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Quality, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataRecipe : IWCFDataElement
    {
        [DataMember]
        public Guid RecipeID { get; set; }
        [DataMember]
        public string Description { get; set; }

        public void Copy( DataRecipe _Item )
        {
             Description = _Item.Description;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Recipe( this );
        }


    }


    /// <summary>
    /// A class which represents the Recipe table in the BeverageMonitor Database.
    /// </summary>
    public partial class Recipe: BaseDataObject<DataRecipe>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Recipe> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Recipe>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Recipe> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Recipe item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Recipe item=new Recipe();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Recipe> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Recipe()
        {
            m_Internal = new DataRecipe();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.RecipeID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Recipe( bool _CallOnCreated )
        {
            m_Internal = new DataRecipe();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Recipe(string connectionString, string providerName) 
        {
            m_Internal = new DataRecipe();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.RecipeID = Guid.NewGuid( );     
        }

        public Recipe( Recipe _Item )
        {
            m_Internal = new DataRecipe();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Recipe( DataRecipe _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Recipe _Item )
        {
            m_Internal.Description = _Item.Description;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.RecipeID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Recipe.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Recipe>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Recipe(Expression<Func<Recipe, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Recipe> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Recipe> _repo;
            
            if(db.TestMode)
            {
                Recipe.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Recipe>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Recipe> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Recipe SingleOrDefault(Expression<Func<Recipe, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Recipe SingleOrDefault(Expression<Func<Recipe, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Recipe> repo = GetRepo(connectionString,providerName);
            Recipe single = repo.SingleOrDefault<Recipe>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Recipe, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Recipe, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyRecipeLoaded = false;
        protected static Recipe EmptyRecipeMember = null;

        public static Recipe GetByID(Guid? value) 
        {
            Recipe rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Recipe GetByID(Guid value) 
        {
            Recipe rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyRecipeLoaded )
                    {
                        rc = EmptyRecipeMember;
                    }
                    else
                    {
                        IsEmptyRecipeLoaded = true;
                        rc = Recipe.Find( L => L.RecipeID.Equals( value ) ).FirstOrDefault( );
                        EmptyRecipeMember = rc;
                    }
                }
                else
                {
                    rc = Recipe.Find( L => L.RecipeID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Recipe> Find(Expression<Func<Recipe, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Recipe> Find(Expression<Func<Recipe, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Recipe> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Recipe> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Recipe> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Recipe> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Recipe> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Recipe> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "RecipeID";
        }

        public object KeyValue()
        {
            return this.RecipeID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Description )
//			{
//				rc = this.Description.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Recipe)
            {
                Recipe compare=(Recipe)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.RecipeID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Description.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Description";
        }

        public static string GetKeyColumn()
        {
            return "RecipeID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Description";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Ingredient> Ingredients
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Ingredient.GetRepo();
                  return from items in repo.GetAll()
                       where items.RecipeID == m_Internal.RecipeID
                       select items;
            }
        }
        public IQueryable<TicketItemAlias> TicketItemAliases
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.TicketItemAlias.GetRepo();
                  return from items in repo.GetAll()
                       where items.RecipeID == m_Internal.RecipeID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.RecipeID;
            }
            set
            {
                m_Internal.RecipeID = value;
            }
        }


//        Guid _RecipeID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid RecipeID
        {
            get { return m_Internal.RecipeID; }
            set
            {
                if(m_Internal.RecipeID!=value){
                    m_Internal.RecipeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecipeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Recipe, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataReportParameter : IWCFDataElement
    {
        [DataMember]
        public Guid ReportParameterID { get; set; }
        [DataMember]
        public Guid ReportID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string DataType { get; set; }
        [DataMember]
        public string SQLName { get; set; }
        [DataMember]
        public string DefaultValue { get; set; }

        public void Copy( DataReportParameter _Item )
        {
             ReportID = _Item.ReportID;			
             Name = _Item.Name;			
             DataType = _Item.DataType;			
             SQLName = _Item.SQLName;			
             DefaultValue = _Item.DefaultValue;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new ReportParameter( this );
        }


    }


    /// <summary>
    /// A class which represents the ReportParameters table in the BeverageMonitor Database.
    /// </summary>
    public partial class ReportParameter: BaseDataObject<DataReportParameter>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<ReportParameter> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<ReportParameter>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<ReportParameter> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(ReportParameter item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                ReportParameter item=new ReportParameter();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<ReportParameter> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public ReportParameter()
        {
            m_Internal = new DataReportParameter();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.ReportParameterID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public ReportParameter( bool _CallOnCreated )
        {
            m_Internal = new DataReportParameter();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public ReportParameter(string connectionString, string providerName) 
        {
            m_Internal = new DataReportParameter();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.ReportParameterID = Guid.NewGuid( );     
        }

        public ReportParameter( ReportParameter _Item )
        {
            m_Internal = new DataReportParameter();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public ReportParameter( DataReportParameter _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( ReportParameter _Item )
        {
            m_Internal.ReportID = _Item.ReportID;			
            m_Internal.Name = _Item.Name;			
            m_Internal.DataType = _Item.DataType;			
            m_Internal.SQLName = _Item.SQLName;			
            m_Internal.DefaultValue = _Item.DefaultValue;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.ReportParameterID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                ReportParameter.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ReportParameter>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public ReportParameter(Expression<Func<ReportParameter, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<ReportParameter> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<ReportParameter> _repo;
            
            if(db.TestMode)
            {
                ReportParameter.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ReportParameter>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ReportParameter> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static ReportParameter SingleOrDefault(Expression<Func<ReportParameter, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static ReportParameter SingleOrDefault(Expression<Func<ReportParameter, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<ReportParameter> repo = GetRepo(connectionString,providerName);
            ReportParameter single = repo.SingleOrDefault<ReportParameter>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<ReportParameter, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<ReportParameter, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyReportParameterLoaded = false;
        protected static ReportParameter EmptyReportParameterMember = null;

        public static ReportParameter GetByID(Guid? value) 
        {
            ReportParameter rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static ReportParameter GetByID(Guid value) 
        {
            ReportParameter rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyReportParameterLoaded )
                    {
                        rc = EmptyReportParameterMember;
                    }
                    else
                    {
                        IsEmptyReportParameterLoaded = true;
                        rc = ReportParameter.Find( L => L.ReportParameterID.Equals( value ) ).FirstOrDefault( );
                        EmptyReportParameterMember = rc;
                    }
                }
                else
                {
                    rc = ReportParameter.Find( L => L.ReportParameterID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<ReportParameter> Find(Expression<Func<ReportParameter, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ReportParameter> Find(Expression<Func<ReportParameter, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<ReportParameter> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<ReportParameter> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ReportParameter> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ReportParameter> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ReportParameter> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<ReportParameter> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "ReportParameterID";
        }

        public object KeyValue()
        {
            return this.ReportParameterID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is ReportParameter)
            {
                ReportParameter compare=(ReportParameter)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.ReportParameterID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "ReportParameterID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Report> ReportsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Report.GetRepo();
                  return from items in repo.GetAll()
                       where items.ReportID == m_Internal.ReportID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.ReportParameterID;
            }
            set
            {
                m_Internal.ReportParameterID = value;
            }
        }


//        Guid _ReportParameterID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid ReportParameterID
        {
            get { return m_Internal.ReportParameterID; }
            set
            {
                if(m_Internal.ReportParameterID!=value){
                    m_Internal.ReportParameterID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReportParameterID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _ReportID;
        [LocalData]
        public Guid ReportID
        {
            get { return m_Internal.ReportID; }
            set
            {
                if(m_Internal.ReportID!=value){
                    m_Internal.ReportID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReportID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DataType;
        [LocalData]
        public string DataType
        {
            get { return m_Internal.DataType; }
            set
            {
                if(m_Internal.DataType!=value){
                    m_Internal.DataType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SQLName;
        [LocalData]
        public string SQLName
        {
            get { return m_Internal.SQLName; }
            set
            {
                if(m_Internal.SQLName!=value){
                    m_Internal.SQLName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SQLName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _DefaultValue;
        [LocalData]
        public string DefaultValue
        {
            get { return m_Internal.DefaultValue; }
            set
            {
                if(m_Internal.DefaultValue!=value){
                    m_Internal.DefaultValue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DefaultValue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<ReportParameter, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataReport : IWCFDataElement
    {
        [DataMember]
        public Guid ReportID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public string Command { get; set; }
        [DataMember]
        public string ReportFile { get; set; }
        [DataMember]
        public string SavedLayout { get; set; }
        [DataMember]
        public bool DateBound { get; set; }

        public void Copy( DataReport _Item )
        {
             Name = _Item.Name;			
             Description = _Item.Description;			
             Command = _Item.Command;			
             ReportFile = _Item.ReportFile;			
             SavedLayout = _Item.SavedLayout;			
             DateBound = _Item.DateBound;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Report( this );
        }


    }


    /// <summary>
    /// A class which represents the Reports table in the BeverageMonitor Database.
    /// </summary>
    public partial class Report: BaseDataObject<DataReport>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Report> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Report>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Report> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Report item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Report item=new Report();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Report> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Report()
        {
            m_Internal = new DataReport();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.ReportID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Report( bool _CallOnCreated )
        {
            m_Internal = new DataReport();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Report(string connectionString, string providerName) 
        {
            m_Internal = new DataReport();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.ReportID = Guid.NewGuid( );     
        }

        public Report( Report _Item )
        {
            m_Internal = new DataReport();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Report( DataReport _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Report _Item )
        {
            m_Internal.Name = _Item.Name;			
            m_Internal.Description = _Item.Description;			
            m_Internal.Command = _Item.Command;			
            m_Internal.ReportFile = _Item.ReportFile;			
            m_Internal.SavedLayout = _Item.SavedLayout;			
            m_Internal.DateBound = _Item.DateBound;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.ReportID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Report.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Report>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Report(Expression<Func<Report, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Report> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Report> _repo;
            
            if(db.TestMode)
            {
                Report.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Report>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Report> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Report SingleOrDefault(Expression<Func<Report, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Report SingleOrDefault(Expression<Func<Report, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Report> repo = GetRepo(connectionString,providerName);
            Report single = repo.SingleOrDefault<Report>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Report, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Report, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyReportLoaded = false;
        protected static Report EmptyReportMember = null;

        public static Report GetByID(Guid? value) 
        {
            Report rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Report GetByID(Guid value) 
        {
            Report rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyReportLoaded )
                    {
                        rc = EmptyReportMember;
                    }
                    else
                    {
                        IsEmptyReportLoaded = true;
                        rc = Report.Find( L => L.ReportID.Equals( value ) ).FirstOrDefault( );
                        EmptyReportMember = rc;
                    }
                }
                else
                {
                    rc = Report.Find( L => L.ReportID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Report> Find(Expression<Func<Report, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Report> Find(Expression<Func<Report, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Report> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Report> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Report> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Report> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Report> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Report> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "ReportID";
        }

        public object KeyValue()
        {
            return this.ReportID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Report)
            {
                Report compare=(Report)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.ReportID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "ReportID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<GroupXReport> GroupXReports
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.GroupXReport.GetRepo();
                  return from items in repo.GetAll()
                       where items.ReportID == m_Internal.ReportID
                       select items;
            }
        }
        public IQueryable<ReportParameter> ReportParameters
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.ReportParameter.GetRepo();
                  return from items in repo.GetAll()
                       where items.ReportID == m_Internal.ReportID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.ReportID;
            }
            set
            {
                m_Internal.ReportID = value;
            }
        }


//        Guid _ReportID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid ReportID
        {
            get { return m_Internal.ReportID; }
            set
            {
                if(m_Internal.ReportID!=value){
                    m_Internal.ReportID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReportID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Command;
        [LocalData]
        public string Command
        {
            get { return m_Internal.Command; }
            set
            {
                if(m_Internal.Command!=value){
                    m_Internal.Command=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Command");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ReportFile;
        [LocalData]
        public string ReportFile
        {
            get { return m_Internal.ReportFile; }
            set
            {
                if(m_Internal.ReportFile!=value){
                    m_Internal.ReportFile=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReportFile");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SavedLayout;
        [LocalData]
        public string SavedLayout
        {
            get { return m_Internal.SavedLayout; }
            set
            {
                if(m_Internal.SavedLayout!=value){
                    m_Internal.SavedLayout=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SavedLayout");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        bool _DateBound;
        [LocalData]
        public bool DateBound
        {
            get { return m_Internal.DateBound; }
            set
            {
                if(m_Internal.DateBound!=value){
                    m_Internal.DateBound=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DateBound");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Report, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatarptCostAnalysi : IWCFDataElement
    {
        [DataMember]
        public DateTime PourTime { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string TagNumber { get; set; }
        [DataMember]
        public double? PourStandard { get; set; }
        [DataMember]
        public double? Volume { get; set; }
        [DataMember]
        public string SinglePourType { get; set; }
        [DataMember]
        public decimal? IdealCost { get; set; }
        [DataMember]
        public double? PourCost { get; set; }
        [DataMember]
        public double? ActualProfit { get; set; }
        [DataMember]
        public double? TheoreticalProfit { get; set; }
        [DataMember]
        public double? LostProfit { get; set; }
        [DataMember]
        public int Size { get; set; }
        [DataMember]
        public string Category { get; set; }
        [DataMember]
        public string ItemNumber { get; set; }

        public void Copy( DatarptCostAnalysi _Item )
        {
             Name = _Item.Name;			
             TagNumber = _Item.TagNumber;			
             PourStandard = _Item.PourStandard;			
             Volume = _Item.Volume;			
             SinglePourType = _Item.SinglePourType;			
             IdealCost = _Item.IdealCost;			
             PourCost = _Item.PourCost;			
             ActualProfit = _Item.ActualProfit;			
             TheoreticalProfit = _Item.TheoreticalProfit;			
             LostProfit = _Item.LostProfit;			
             Size = _Item.Size;			
             Category = _Item.Category;			
             ItemNumber = _Item.ItemNumber;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new rptCostAnalysi( this );
        }


    }


    /// <summary>
    /// A class which represents the rptCostAnalysis table in the BeverageMonitor Database.
    /// </summary>
    public partial class rptCostAnalysi: BaseDataObject<DatarptCostAnalysi>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<rptCostAnalysi> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<rptCostAnalysi>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<rptCostAnalysi> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(rptCostAnalysi item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                rptCostAnalysi item=new rptCostAnalysi();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<rptCostAnalysi> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public rptCostAnalysi()
        {
            m_Internal = new DatarptCostAnalysi();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public rptCostAnalysi( bool _CallOnCreated )
        {
            m_Internal = new DatarptCostAnalysi();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public rptCostAnalysi(string connectionString, string providerName) 
        {
            m_Internal = new DatarptCostAnalysi();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public rptCostAnalysi( rptCostAnalysi _Item )
        {
            m_Internal = new DatarptCostAnalysi();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public rptCostAnalysi( DatarptCostAnalysi _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( rptCostAnalysi _Item )
        {
            m_Internal.Name = _Item.Name;			
            m_Internal.TagNumber = _Item.TagNumber;			
            m_Internal.PourStandard = _Item.PourStandard;			
            m_Internal.Volume = _Item.Volume;			
            m_Internal.SinglePourType = _Item.SinglePourType;			
            m_Internal.IdealCost = _Item.IdealCost;			
            m_Internal.PourCost = _Item.PourCost;			
            m_Internal.ActualProfit = _Item.ActualProfit;			
            m_Internal.TheoreticalProfit = _Item.TheoreticalProfit;			
            m_Internal.LostProfit = _Item.LostProfit;			
            m_Internal.Size = _Item.Size;			
            m_Internal.Category = _Item.Category;			
            m_Internal.ItemNumber = _Item.ItemNumber;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                rptCostAnalysi.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptCostAnalysi>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public rptCostAnalysi(Expression<Func<rptCostAnalysi, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<rptCostAnalysi> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<rptCostAnalysi> _repo;
            
            if(db.TestMode)
            {
                rptCostAnalysi.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptCostAnalysi>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<rptCostAnalysi> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static rptCostAnalysi SingleOrDefault(Expression<Func<rptCostAnalysi, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static rptCostAnalysi SingleOrDefault(Expression<Func<rptCostAnalysi, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<rptCostAnalysi> repo = GetRepo(connectionString,providerName);
            rptCostAnalysi single = repo.SingleOrDefault<rptCostAnalysi>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<rptCostAnalysi, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<rptCostAnalysi, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static rptCostAnalysi GetByID(DateTime value) 
        {
            return rptCostAnalysi.Find( L => L.PourTime.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<rptCostAnalysi> Find(Expression<Func<rptCostAnalysi, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<rptCostAnalysi> Find(Expression<Func<rptCostAnalysi, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<rptCostAnalysi> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<rptCostAnalysi> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<rptCostAnalysi> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<rptCostAnalysi> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<rptCostAnalysi> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<rptCostAnalysi> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "PourTime";
        }

        public object KeyValue()
        {
            return this.PourTime;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<DateTime>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is rptCostAnalysi)
            {
                rptCostAnalysi compare=(rptCostAnalysi)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "PourTime";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion



//        DateTime _PourTime;
        [SubSonicPrimaryKey]
        [LocalData]
        public DateTime PourTime
        {
            get { return m_Internal.PourTime; }
            set
            {
                if(m_Internal.PourTime!=value){
                    m_Internal.PourTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TagNumber;
        [LocalData]
        public string TagNumber
        {
            get { return m_Internal.TagNumber; }
            set
            {
                if(m_Internal.TagNumber!=value){
                    m_Internal.TagNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _PourStandard;
        [LocalData]
        public double? PourStandard
        {
            get { return m_Internal.PourStandard; }
            set
            {
                if(m_Internal.PourStandard!=value){
                    m_Internal.PourStandard=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourStandard");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _Volume;
        [LocalData]
        public double? Volume
        {
            get { return m_Internal.Volume; }
            set
            {
                if(m_Internal.Volume!=value){
                    m_Internal.Volume=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Volume");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _SinglePourType;
        [LocalData]
        public string SinglePourType
        {
            get { return m_Internal.SinglePourType; }
            set
            {
                if(m_Internal.SinglePourType!=value){
                    m_Internal.SinglePourType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SinglePourType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _IdealCost;
        [LocalData]
        public decimal? IdealCost
        {
            get { return m_Internal.IdealCost; }
            set
            {
                if(m_Internal.IdealCost!=value){
                    m_Internal.IdealCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IdealCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _PourCost;
        [LocalData]
        public double? PourCost
        {
            get { return m_Internal.PourCost; }
            set
            {
                if(m_Internal.PourCost!=value){
                    m_Internal.PourCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _ActualProfit;
        [LocalData]
        public double? ActualProfit
        {
            get { return m_Internal.ActualProfit; }
            set
            {
                if(m_Internal.ActualProfit!=value){
                    m_Internal.ActualProfit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActualProfit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TheoreticalProfit;
        [LocalData]
        public double? TheoreticalProfit
        {
            get { return m_Internal.TheoreticalProfit; }
            set
            {
                if(m_Internal.TheoreticalProfit!=value){
                    m_Internal.TheoreticalProfit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TheoreticalProfit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _LostProfit;
        [LocalData]
        public double? LostProfit
        {
            get { return m_Internal.LostProfit; }
            set
            {
                if(m_Internal.LostProfit!=value){
                    m_Internal.LostProfit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LostProfit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Size;
        [LocalData]
        public int Size
        {
            get { return m_Internal.Size; }
            set
            {
                if(m_Internal.Size!=value){
                    m_Internal.Size=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Category;
        [LocalData]
        public string Category
        {
            get { return m_Internal.Category; }
            set
            {
                if(m_Internal.Category!=value){
                    m_Internal.Category=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ItemNumber;
        [LocalData]
        public string ItemNumber
        {
            get { return m_Internal.ItemNumber; }
            set
            {
                if(m_Internal.ItemNumber!=value){
                    m_Internal.ItemNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<rptCostAnalysi, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatarptDisconnectWithVolume : IWCFDataElement
    {
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Message { get; set; }
        [DataMember]
        public DateTime AlertTime { get; set; }

        public void Copy( DatarptDisconnectWithVolume _Item )
        {
             Message = _Item.Message;			
             AlertTime = _Item.AlertTime;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new rptDisconnectWithVolume( this );
        }


    }


    /// <summary>
    /// A class which represents the rptDisconnectWithVolume table in the BeverageMonitor Database.
    /// </summary>
    public partial class rptDisconnectWithVolume: BaseDataObject<DatarptDisconnectWithVolume>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<rptDisconnectWithVolume> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<rptDisconnectWithVolume>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<rptDisconnectWithVolume> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(rptDisconnectWithVolume item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                rptDisconnectWithVolume item=new rptDisconnectWithVolume();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<rptDisconnectWithVolume> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public rptDisconnectWithVolume()
        {
            m_Internal = new DatarptDisconnectWithVolume();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public rptDisconnectWithVolume( bool _CallOnCreated )
        {
            m_Internal = new DatarptDisconnectWithVolume();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public rptDisconnectWithVolume(string connectionString, string providerName) 
        {
            m_Internal = new DatarptDisconnectWithVolume();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public rptDisconnectWithVolume( rptDisconnectWithVolume _Item )
        {
            m_Internal = new DatarptDisconnectWithVolume();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public rptDisconnectWithVolume( DatarptDisconnectWithVolume _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( rptDisconnectWithVolume _Item )
        {
            m_Internal.Message = _Item.Message;			
            m_Internal.AlertTime = _Item.AlertTime;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                rptDisconnectWithVolume.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptDisconnectWithVolume>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public rptDisconnectWithVolume(Expression<Func<rptDisconnectWithVolume, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<rptDisconnectWithVolume> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<rptDisconnectWithVolume> _repo;
            
            if(db.TestMode)
            {
                rptDisconnectWithVolume.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptDisconnectWithVolume>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<rptDisconnectWithVolume> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static rptDisconnectWithVolume SingleOrDefault(Expression<Func<rptDisconnectWithVolume, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static rptDisconnectWithVolume SingleOrDefault(Expression<Func<rptDisconnectWithVolume, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<rptDisconnectWithVolume> repo = GetRepo(connectionString,providerName);
            rptDisconnectWithVolume single = repo.SingleOrDefault<rptDisconnectWithVolume>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<rptDisconnectWithVolume, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<rptDisconnectWithVolume, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static rptDisconnectWithVolume GetByID(string value) 
        {
            return rptDisconnectWithVolume.Find( L => L.Name.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<rptDisconnectWithVolume> Find(Expression<Func<rptDisconnectWithVolume, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<rptDisconnectWithVolume> Find(Expression<Func<rptDisconnectWithVolume, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<rptDisconnectWithVolume> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<rptDisconnectWithVolume> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<rptDisconnectWithVolume> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<rptDisconnectWithVolume> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<rptDisconnectWithVolume> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<rptDisconnectWithVolume> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Name";
        }

        public object KeyValue()
        {
            return this.Name;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is rptDisconnectWithVolume)
            {
                rptDisconnectWithVolume compare=(rptDisconnectWithVolume)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "Name";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Name;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Message;
        [LocalData]
        public string Message
        {
            get { return m_Internal.Message; }
            set
            {
                if(m_Internal.Message!=value){
                    m_Internal.Message=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Message");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _AlertTime;
        [LocalData]
        public DateTime AlertTime
        {
            get { return m_Internal.AlertTime; }
            set
            {
                if(m_Internal.AlertTime!=value){
                    m_Internal.AlertTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AlertTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<rptDisconnectWithVolume, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatarptInventory : IWCFDataElement
    {
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public int? Stock { get; set; }
        [DataMember]
        public int? Tagged { get; set; }
        [DataMember]
        public int? TotalQuantity { get; set; }
        [DataMember]
        public int MinimumParLevel { get; set; }
        [DataMember]
        public double? TotalVolume { get; set; }
        [DataMember]
        public double? TotalBottleCost { get; set; }
        [DataMember]
        public double? TotalVolumeCost { get; set; }
        [DataMember]
        public string Category { get; set; }

        public void Copy( DatarptInventory _Item )
        {
             Stock = _Item.Stock;			
             Tagged = _Item.Tagged;			
             TotalQuantity = _Item.TotalQuantity;			
             MinimumParLevel = _Item.MinimumParLevel;			
             TotalVolume = _Item.TotalVolume;			
             TotalBottleCost = _Item.TotalBottleCost;			
             TotalVolumeCost = _Item.TotalVolumeCost;			
             Category = _Item.Category;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new rptInventory( this );
        }


    }


    /// <summary>
    /// A class which represents the rptInventory table in the BeverageMonitor Database.
    /// </summary>
    public partial class rptInventory: BaseDataObject<DatarptInventory>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<rptInventory> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<rptInventory>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<rptInventory> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(rptInventory item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                rptInventory item=new rptInventory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<rptInventory> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public rptInventory()
        {
            m_Internal = new DatarptInventory();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public rptInventory( bool _CallOnCreated )
        {
            m_Internal = new DatarptInventory();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public rptInventory(string connectionString, string providerName) 
        {
            m_Internal = new DatarptInventory();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public rptInventory( rptInventory _Item )
        {
            m_Internal = new DatarptInventory();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public rptInventory( DatarptInventory _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( rptInventory _Item )
        {
            m_Internal.Stock = _Item.Stock;			
            m_Internal.Tagged = _Item.Tagged;			
            m_Internal.TotalQuantity = _Item.TotalQuantity;			
            m_Internal.MinimumParLevel = _Item.MinimumParLevel;			
            m_Internal.TotalVolume = _Item.TotalVolume;			
            m_Internal.TotalBottleCost = _Item.TotalBottleCost;			
            m_Internal.TotalVolumeCost = _Item.TotalVolumeCost;			
            m_Internal.Category = _Item.Category;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                rptInventory.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptInventory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public rptInventory(Expression<Func<rptInventory, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<rptInventory> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<rptInventory> _repo;
            
            if(db.TestMode)
            {
                rptInventory.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptInventory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<rptInventory> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static rptInventory SingleOrDefault(Expression<Func<rptInventory, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static rptInventory SingleOrDefault(Expression<Func<rptInventory, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<rptInventory> repo = GetRepo(connectionString,providerName);
            rptInventory single = repo.SingleOrDefault<rptInventory>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<rptInventory, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<rptInventory, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static rptInventory GetByID(string value) 
        {
            return rptInventory.Find( L => L.Name.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<rptInventory> Find(Expression<Func<rptInventory, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<rptInventory> Find(Expression<Func<rptInventory, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<rptInventory> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<rptInventory> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<rptInventory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<rptInventory> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<rptInventory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<rptInventory> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Name";
        }

        public object KeyValue()
        {
            return this.Name;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is rptInventory)
            {
                rptInventory compare=(rptInventory)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "Name";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Name;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Stock;
        [LocalData]
        public int? Stock
        {
            get { return m_Internal.Stock; }
            set
            {
                if(m_Internal.Stock!=value){
                    m_Internal.Stock=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Stock");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _Tagged;
        [LocalData]
        public int? Tagged
        {
            get { return m_Internal.Tagged; }
            set
            {
                if(m_Internal.Tagged!=value){
                    m_Internal.Tagged=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tagged");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalQuantity;
        [LocalData]
        public int? TotalQuantity
        {
            get { return m_Internal.TotalQuantity; }
            set
            {
                if(m_Internal.TotalQuantity!=value){
                    m_Internal.TotalQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _MinimumParLevel;
        [LocalData]
        public int MinimumParLevel
        {
            get { return m_Internal.MinimumParLevel; }
            set
            {
                if(m_Internal.MinimumParLevel!=value){
                    m_Internal.MinimumParLevel=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinimumParLevel");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TotalVolume;
        [LocalData]
        public double? TotalVolume
        {
            get { return m_Internal.TotalVolume; }
            set
            {
                if(m_Internal.TotalVolume!=value){
                    m_Internal.TotalVolume=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalVolume");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TotalBottleCost;
        [LocalData]
        public double? TotalBottleCost
        {
            get { return m_Internal.TotalBottleCost; }
            set
            {
                if(m_Internal.TotalBottleCost!=value){
                    m_Internal.TotalBottleCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalBottleCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TotalVolumeCost;
        [LocalData]
        public double? TotalVolumeCost
        {
            get { return m_Internal.TotalVolumeCost; }
            set
            {
                if(m_Internal.TotalVolumeCost!=value){
                    m_Internal.TotalVolumeCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalVolumeCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Category;
        [LocalData]
        public string Category
        {
            get { return m_Internal.Category; }
            set
            {
                if(m_Internal.Category!=value){
                    m_Internal.Category=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<rptInventory, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatarptPourTotal : IWCFDataElement
    {
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public string Manufacturer { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public int Count { get; set; }
        [DataMember]
        public double Volume { get; set; }

        public void Copy( DatarptPourTotal _Item )
        {
             Manufacturer = _Item.Manufacturer;			
             Name = _Item.Name;			
             Count = _Item.Count;			
             Volume = _Item.Volume;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new rptPourTotal( this );
        }


    }


    /// <summary>
    /// A class which represents the rptPourTotals table in the BeverageMonitor Database.
    /// </summary>
    public partial class rptPourTotal: BaseDataObject<DatarptPourTotal>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<rptPourTotal> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<rptPourTotal>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<rptPourTotal> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(rptPourTotal item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                rptPourTotal item=new rptPourTotal();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<rptPourTotal> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public rptPourTotal()
        {
            m_Internal = new DatarptPourTotal();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public rptPourTotal( bool _CallOnCreated )
        {
            m_Internal = new DatarptPourTotal();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public rptPourTotal(string connectionString, string providerName) 
        {
            m_Internal = new DatarptPourTotal();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public rptPourTotal( rptPourTotal _Item )
        {
            m_Internal = new DatarptPourTotal();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public rptPourTotal( DatarptPourTotal _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( rptPourTotal _Item )
        {
            m_Internal.Manufacturer = _Item.Manufacturer;			
            m_Internal.Name = _Item.Name;			
            m_Internal.Count = _Item.Count;			
            m_Internal.Volume = _Item.Volume;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                rptPourTotal.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptPourTotal>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public rptPourTotal(Expression<Func<rptPourTotal, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<rptPourTotal> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<rptPourTotal> _repo;
            
            if(db.TestMode)
            {
                rptPourTotal.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptPourTotal>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<rptPourTotal> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static rptPourTotal SingleOrDefault(Expression<Func<rptPourTotal, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static rptPourTotal SingleOrDefault(Expression<Func<rptPourTotal, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<rptPourTotal> repo = GetRepo(connectionString,providerName);
            rptPourTotal single = repo.SingleOrDefault<rptPourTotal>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<rptPourTotal, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<rptPourTotal, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static rptPourTotal GetByID(string value) 
        {
            return rptPourTotal.Find( L => L.Type.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<rptPourTotal> Find(Expression<Func<rptPourTotal, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<rptPourTotal> Find(Expression<Func<rptPourTotal, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<rptPourTotal> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<rptPourTotal> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<rptPourTotal> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<rptPourTotal> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<rptPourTotal> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<rptPourTotal> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Type";
        }

        public object KeyValue()
        {
            return this.Type;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Type )
//			{
//				rc = this.Type.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is rptPourTotal)
            {
                rptPourTotal compare=(rptPourTotal)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Type.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Type";
        }

        public static string GetKeyColumn()
        {
            return "Type";
        }        

        public static string GetDescriptorColumn()
        {
            return "Type";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Type;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Type
        {
            get { return m_Internal.Type; }
            set
            {
                if(m_Internal.Type!=value){
                    m_Internal.Type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Manufacturer;
        [LocalData]
        public string Manufacturer
        {
            get { return m_Internal.Manufacturer; }
            set
            {
                if(m_Internal.Manufacturer!=value){
                    m_Internal.Manufacturer=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Manufacturer");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Count;
        [LocalData]
        public int Count
        {
            get { return m_Internal.Count; }
            set
            {
                if(m_Internal.Count!=value){
                    m_Internal.Count=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Count");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Volume;
        [LocalData]
        public double Volume
        {
            get { return m_Internal.Volume; }
            set
            {
                if(m_Internal.Volume!=value){
                    m_Internal.Volume=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Volume");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<rptPourTotal, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatarptSummaryByGroup : IWCFDataElement
    {
        [DataMember]
        public string Category { get; set; }
        [DataMember]
        public int? NumberOfPours { get; set; }
        [DataMember]
        public double? PourStandard { get; set; }
        [DataMember]
        public double? AveragePour { get; set; }
        [DataMember]
        public double? MinPour { get; set; }
        [DataMember]
        public double? MaxPour { get; set; }
        [DataMember]
        public double? TotalVolume { get; set; }
        [DataMember]
        public decimal? IdealCostTotal { get; set; }
        [DataMember]
        public double? TotalPourCost { get; set; }
        [DataMember]
        public double? TotalProfit { get; set; }
        [DataMember]
        public decimal? TotalSales { get; set; }
        [DataMember]
        public double? Average { get; set; }

        public void Copy( DatarptSummaryByGroup _Item )
        {
             NumberOfPours = _Item.NumberOfPours;			
             PourStandard = _Item.PourStandard;			
             AveragePour = _Item.AveragePour;			
             MinPour = _Item.MinPour;			
             MaxPour = _Item.MaxPour;			
             TotalVolume = _Item.TotalVolume;			
             IdealCostTotal = _Item.IdealCostTotal;			
             TotalPourCost = _Item.TotalPourCost;			
             TotalProfit = _Item.TotalProfit;			
             TotalSales = _Item.TotalSales;			
             Average = _Item.Average;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new rptSummaryByGroup( this );
        }


    }


    /// <summary>
    /// A class which represents the rptSummaryByGroup table in the BeverageMonitor Database.
    /// </summary>
    public partial class rptSummaryByGroup: BaseDataObject<DatarptSummaryByGroup>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<rptSummaryByGroup> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<rptSummaryByGroup>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<rptSummaryByGroup> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(rptSummaryByGroup item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                rptSummaryByGroup item=new rptSummaryByGroup();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<rptSummaryByGroup> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public rptSummaryByGroup()
        {
            m_Internal = new DatarptSummaryByGroup();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public rptSummaryByGroup( bool _CallOnCreated )
        {
            m_Internal = new DatarptSummaryByGroup();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public rptSummaryByGroup(string connectionString, string providerName) 
        {
            m_Internal = new DatarptSummaryByGroup();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public rptSummaryByGroup( rptSummaryByGroup _Item )
        {
            m_Internal = new DatarptSummaryByGroup();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public rptSummaryByGroup( DatarptSummaryByGroup _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( rptSummaryByGroup _Item )
        {
            m_Internal.NumberOfPours = _Item.NumberOfPours;			
            m_Internal.PourStandard = _Item.PourStandard;			
            m_Internal.AveragePour = _Item.AveragePour;			
            m_Internal.MinPour = _Item.MinPour;			
            m_Internal.MaxPour = _Item.MaxPour;			
            m_Internal.TotalVolume = _Item.TotalVolume;			
            m_Internal.IdealCostTotal = _Item.IdealCostTotal;			
            m_Internal.TotalPourCost = _Item.TotalPourCost;			
            m_Internal.TotalProfit = _Item.TotalProfit;			
            m_Internal.TotalSales = _Item.TotalSales;			
            m_Internal.Average = _Item.Average;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                rptSummaryByGroup.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptSummaryByGroup>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public rptSummaryByGroup(Expression<Func<rptSummaryByGroup, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<rptSummaryByGroup> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<rptSummaryByGroup> _repo;
            
            if(db.TestMode)
            {
                rptSummaryByGroup.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptSummaryByGroup>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<rptSummaryByGroup> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static rptSummaryByGroup SingleOrDefault(Expression<Func<rptSummaryByGroup, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static rptSummaryByGroup SingleOrDefault(Expression<Func<rptSummaryByGroup, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<rptSummaryByGroup> repo = GetRepo(connectionString,providerName);
            rptSummaryByGroup single = repo.SingleOrDefault<rptSummaryByGroup>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<rptSummaryByGroup, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<rptSummaryByGroup, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static rptSummaryByGroup GetByID(string value) 
        {
            return rptSummaryByGroup.Find( L => L.Category.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<rptSummaryByGroup> Find(Expression<Func<rptSummaryByGroup, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<rptSummaryByGroup> Find(Expression<Func<rptSummaryByGroup, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<rptSummaryByGroup> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<rptSummaryByGroup> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<rptSummaryByGroup> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<rptSummaryByGroup> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<rptSummaryByGroup> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<rptSummaryByGroup> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Category";
        }

        public object KeyValue()
        {
            return this.Category;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Category )
//			{
//				rc = this.Category.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is rptSummaryByGroup)
            {
                rptSummaryByGroup compare=(rptSummaryByGroup)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Category.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Category";
        }

        public static string GetKeyColumn()
        {
            return "Category";
        }        

        public static string GetDescriptorColumn()
        {
            return "Category";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Category;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Category
        {
            get { return m_Internal.Category; }
            set
            {
                if(m_Internal.Category!=value){
                    m_Internal.Category=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _NumberOfPours;
        [LocalData]
        public int? NumberOfPours
        {
            get { return m_Internal.NumberOfPours; }
            set
            {
                if(m_Internal.NumberOfPours!=value){
                    m_Internal.NumberOfPours=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NumberOfPours");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _PourStandard;
        [LocalData]
        public double? PourStandard
        {
            get { return m_Internal.PourStandard; }
            set
            {
                if(m_Internal.PourStandard!=value){
                    m_Internal.PourStandard=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourStandard");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _AveragePour;
        [LocalData]
        public double? AveragePour
        {
            get { return m_Internal.AveragePour; }
            set
            {
                if(m_Internal.AveragePour!=value){
                    m_Internal.AveragePour=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AveragePour");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _MinPour;
        [LocalData]
        public double? MinPour
        {
            get { return m_Internal.MinPour; }
            set
            {
                if(m_Internal.MinPour!=value){
                    m_Internal.MinPour=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinPour");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _MaxPour;
        [LocalData]
        public double? MaxPour
        {
            get { return m_Internal.MaxPour; }
            set
            {
                if(m_Internal.MaxPour!=value){
                    m_Internal.MaxPour=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaxPour");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TotalVolume;
        [LocalData]
        public double? TotalVolume
        {
            get { return m_Internal.TotalVolume; }
            set
            {
                if(m_Internal.TotalVolume!=value){
                    m_Internal.TotalVolume=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalVolume");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _IdealCostTotal;
        [LocalData]
        public decimal? IdealCostTotal
        {
            get { return m_Internal.IdealCostTotal; }
            set
            {
                if(m_Internal.IdealCostTotal!=value){
                    m_Internal.IdealCostTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IdealCostTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TotalPourCost;
        [LocalData]
        public double? TotalPourCost
        {
            get { return m_Internal.TotalPourCost; }
            set
            {
                if(m_Internal.TotalPourCost!=value){
                    m_Internal.TotalPourCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalPourCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TotalProfit;
        [LocalData]
        public double? TotalProfit
        {
            get { return m_Internal.TotalProfit; }
            set
            {
                if(m_Internal.TotalProfit!=value){
                    m_Internal.TotalProfit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalProfit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalSales;
        [LocalData]
        public decimal? TotalSales
        {
            get { return m_Internal.TotalSales; }
            set
            {
                if(m_Internal.TotalSales!=value){
                    m_Internal.TotalSales=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalSales");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _Average;
        [LocalData]
        public double? Average
        {
            get { return m_Internal.Average; }
            set
            {
                if(m_Internal.Average!=value){
                    m_Internal.Average=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Average");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<rptSummaryByGroup, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatarptSummaryByTag : IWCFDataElement
    {
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string TagNumber { get; set; }
        [DataMember]
        public int? NumberOfPours { get; set; }
        [DataMember]
        public double? PourStandard { get; set; }
        [DataMember]
        public double? AveragePour { get; set; }
        [DataMember]
        public double? MinPour { get; set; }
        [DataMember]
        public double? MaxPour { get; set; }
        [DataMember]
        public double? TotalVolume { get; set; }
        [DataMember]
        public decimal? IdealCostTotal { get; set; }
        [DataMember]
        public double? TotalPourCost { get; set; }
        [DataMember]
        public double? TotalProfit { get; set; }
        [DataMember]
        public decimal? TotalSales { get; set; }
        [DataMember]
        public double? Average { get; set; }

        public void Copy( DatarptSummaryByTag _Item )
        {
             TagNumber = _Item.TagNumber;			
             NumberOfPours = _Item.NumberOfPours;			
             PourStandard = _Item.PourStandard;			
             AveragePour = _Item.AveragePour;			
             MinPour = _Item.MinPour;			
             MaxPour = _Item.MaxPour;			
             TotalVolume = _Item.TotalVolume;			
             IdealCostTotal = _Item.IdealCostTotal;			
             TotalPourCost = _Item.TotalPourCost;			
             TotalProfit = _Item.TotalProfit;			
             TotalSales = _Item.TotalSales;			
             Average = _Item.Average;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new rptSummaryByTag( this );
        }


    }


    /// <summary>
    /// A class which represents the rptSummaryByTag table in the BeverageMonitor Database.
    /// </summary>
    public partial class rptSummaryByTag: BaseDataObject<DatarptSummaryByTag>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<rptSummaryByTag> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<rptSummaryByTag>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<rptSummaryByTag> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(rptSummaryByTag item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                rptSummaryByTag item=new rptSummaryByTag();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<rptSummaryByTag> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public rptSummaryByTag()
        {
            m_Internal = new DatarptSummaryByTag();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public rptSummaryByTag( bool _CallOnCreated )
        {
            m_Internal = new DatarptSummaryByTag();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public rptSummaryByTag(string connectionString, string providerName) 
        {
            m_Internal = new DatarptSummaryByTag();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public rptSummaryByTag( rptSummaryByTag _Item )
        {
            m_Internal = new DatarptSummaryByTag();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public rptSummaryByTag( DatarptSummaryByTag _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( rptSummaryByTag _Item )
        {
            m_Internal.TagNumber = _Item.TagNumber;			
            m_Internal.NumberOfPours = _Item.NumberOfPours;			
            m_Internal.PourStandard = _Item.PourStandard;			
            m_Internal.AveragePour = _Item.AveragePour;			
            m_Internal.MinPour = _Item.MinPour;			
            m_Internal.MaxPour = _Item.MaxPour;			
            m_Internal.TotalVolume = _Item.TotalVolume;			
            m_Internal.IdealCostTotal = _Item.IdealCostTotal;			
            m_Internal.TotalPourCost = _Item.TotalPourCost;			
            m_Internal.TotalProfit = _Item.TotalProfit;			
            m_Internal.TotalSales = _Item.TotalSales;			
            m_Internal.Average = _Item.Average;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                rptSummaryByTag.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptSummaryByTag>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public rptSummaryByTag(Expression<Func<rptSummaryByTag, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<rptSummaryByTag> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<rptSummaryByTag> _repo;
            
            if(db.TestMode)
            {
                rptSummaryByTag.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptSummaryByTag>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<rptSummaryByTag> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static rptSummaryByTag SingleOrDefault(Expression<Func<rptSummaryByTag, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static rptSummaryByTag SingleOrDefault(Expression<Func<rptSummaryByTag, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<rptSummaryByTag> repo = GetRepo(connectionString,providerName);
            rptSummaryByTag single = repo.SingleOrDefault<rptSummaryByTag>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<rptSummaryByTag, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<rptSummaryByTag, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static rptSummaryByTag GetByID(string value) 
        {
            return rptSummaryByTag.Find( L => L.Name.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<rptSummaryByTag> Find(Expression<Func<rptSummaryByTag, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<rptSummaryByTag> Find(Expression<Func<rptSummaryByTag, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<rptSummaryByTag> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<rptSummaryByTag> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<rptSummaryByTag> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<rptSummaryByTag> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<rptSummaryByTag> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<rptSummaryByTag> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Name";
        }

        public object KeyValue()
        {
            return this.Name;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is rptSummaryByTag)
            {
                rptSummaryByTag compare=(rptSummaryByTag)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "Name";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Name;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TagNumber;
        [LocalData]
        public string TagNumber
        {
            get { return m_Internal.TagNumber; }
            set
            {
                if(m_Internal.TagNumber!=value){
                    m_Internal.TagNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _NumberOfPours;
        [LocalData]
        public int? NumberOfPours
        {
            get { return m_Internal.NumberOfPours; }
            set
            {
                if(m_Internal.NumberOfPours!=value){
                    m_Internal.NumberOfPours=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NumberOfPours");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _PourStandard;
        [LocalData]
        public double? PourStandard
        {
            get { return m_Internal.PourStandard; }
            set
            {
                if(m_Internal.PourStandard!=value){
                    m_Internal.PourStandard=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourStandard");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _AveragePour;
        [LocalData]
        public double? AveragePour
        {
            get { return m_Internal.AveragePour; }
            set
            {
                if(m_Internal.AveragePour!=value){
                    m_Internal.AveragePour=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AveragePour");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _MinPour;
        [LocalData]
        public double? MinPour
        {
            get { return m_Internal.MinPour; }
            set
            {
                if(m_Internal.MinPour!=value){
                    m_Internal.MinPour=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinPour");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _MaxPour;
        [LocalData]
        public double? MaxPour
        {
            get { return m_Internal.MaxPour; }
            set
            {
                if(m_Internal.MaxPour!=value){
                    m_Internal.MaxPour=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaxPour");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TotalVolume;
        [LocalData]
        public double? TotalVolume
        {
            get { return m_Internal.TotalVolume; }
            set
            {
                if(m_Internal.TotalVolume!=value){
                    m_Internal.TotalVolume=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalVolume");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _IdealCostTotal;
        [LocalData]
        public decimal? IdealCostTotal
        {
            get { return m_Internal.IdealCostTotal; }
            set
            {
                if(m_Internal.IdealCostTotal!=value){
                    m_Internal.IdealCostTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IdealCostTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TotalPourCost;
        [LocalData]
        public double? TotalPourCost
        {
            get { return m_Internal.TotalPourCost; }
            set
            {
                if(m_Internal.TotalPourCost!=value){
                    m_Internal.TotalPourCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalPourCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TotalProfit;
        [LocalData]
        public double? TotalProfit
        {
            get { return m_Internal.TotalProfit; }
            set
            {
                if(m_Internal.TotalProfit!=value){
                    m_Internal.TotalProfit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalProfit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalSales;
        [LocalData]
        public decimal? TotalSales
        {
            get { return m_Internal.TotalSales; }
            set
            {
                if(m_Internal.TotalSales!=value){
                    m_Internal.TotalSales=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalSales");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _Average;
        [LocalData]
        public double? Average
        {
            get { return m_Internal.Average; }
            set
            {
                if(m_Internal.Average!=value){
                    m_Internal.Average=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Average");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<rptSummaryByTag, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatarptSummaryByUPC : IWCFDataElement
    {
        [DataMember]
        public string ItemNumber { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public int? NumberOfPours { get; set; }
        [DataMember]
        public double? PourStandard { get; set; }
        [DataMember]
        public double? AveragePour { get; set; }
        [DataMember]
        public double? MinPour { get; set; }
        [DataMember]
        public double? MaxPour { get; set; }
        [DataMember]
        public double? TotalVolume { get; set; }
        [DataMember]
        public decimal? IdealCostTotal { get; set; }
        [DataMember]
        public double? TotalPourCost { get; set; }
        [DataMember]
        public double? TotalProfit { get; set; }
        [DataMember]
        public decimal? TotalSales { get; set; }
        [DataMember]
        public double? Average { get; set; }

        public void Copy( DatarptSummaryByUPC _Item )
        {
             Name = _Item.Name;			
             NumberOfPours = _Item.NumberOfPours;			
             PourStandard = _Item.PourStandard;			
             AveragePour = _Item.AveragePour;			
             MinPour = _Item.MinPour;			
             MaxPour = _Item.MaxPour;			
             TotalVolume = _Item.TotalVolume;			
             IdealCostTotal = _Item.IdealCostTotal;			
             TotalPourCost = _Item.TotalPourCost;			
             TotalProfit = _Item.TotalProfit;			
             TotalSales = _Item.TotalSales;			
             Average = _Item.Average;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new rptSummaryByUPC( this );
        }


    }


    /// <summary>
    /// A class which represents the rptSummaryByUPC table in the BeverageMonitor Database.
    /// </summary>
    public partial class rptSummaryByUPC: BaseDataObject<DatarptSummaryByUPC>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<rptSummaryByUPC> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<rptSummaryByUPC>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<rptSummaryByUPC> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(rptSummaryByUPC item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                rptSummaryByUPC item=new rptSummaryByUPC();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<rptSummaryByUPC> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public rptSummaryByUPC()
        {
            m_Internal = new DatarptSummaryByUPC();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public rptSummaryByUPC( bool _CallOnCreated )
        {
            m_Internal = new DatarptSummaryByUPC();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public rptSummaryByUPC(string connectionString, string providerName) 
        {
            m_Internal = new DatarptSummaryByUPC();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public rptSummaryByUPC( rptSummaryByUPC _Item )
        {
            m_Internal = new DatarptSummaryByUPC();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public rptSummaryByUPC( DatarptSummaryByUPC _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( rptSummaryByUPC _Item )
        {
            m_Internal.Name = _Item.Name;			
            m_Internal.NumberOfPours = _Item.NumberOfPours;			
            m_Internal.PourStandard = _Item.PourStandard;			
            m_Internal.AveragePour = _Item.AveragePour;			
            m_Internal.MinPour = _Item.MinPour;			
            m_Internal.MaxPour = _Item.MaxPour;			
            m_Internal.TotalVolume = _Item.TotalVolume;			
            m_Internal.IdealCostTotal = _Item.IdealCostTotal;			
            m_Internal.TotalPourCost = _Item.TotalPourCost;			
            m_Internal.TotalProfit = _Item.TotalProfit;			
            m_Internal.TotalSales = _Item.TotalSales;			
            m_Internal.Average = _Item.Average;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                rptSummaryByUPC.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptSummaryByUPC>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public rptSummaryByUPC(Expression<Func<rptSummaryByUPC, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<rptSummaryByUPC> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<rptSummaryByUPC> _repo;
            
            if(db.TestMode)
            {
                rptSummaryByUPC.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptSummaryByUPC>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<rptSummaryByUPC> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static rptSummaryByUPC SingleOrDefault(Expression<Func<rptSummaryByUPC, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static rptSummaryByUPC SingleOrDefault(Expression<Func<rptSummaryByUPC, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<rptSummaryByUPC> repo = GetRepo(connectionString,providerName);
            rptSummaryByUPC single = repo.SingleOrDefault<rptSummaryByUPC>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<rptSummaryByUPC, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<rptSummaryByUPC, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static rptSummaryByUPC GetByID(string value) 
        {
            return rptSummaryByUPC.Find( L => L.ItemNumber.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<rptSummaryByUPC> Find(Expression<Func<rptSummaryByUPC, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<rptSummaryByUPC> Find(Expression<Func<rptSummaryByUPC, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<rptSummaryByUPC> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<rptSummaryByUPC> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<rptSummaryByUPC> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<rptSummaryByUPC> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<rptSummaryByUPC> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<rptSummaryByUPC> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "ItemNumber";
        }

        public object KeyValue()
        {
            return this.ItemNumber;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.ItemNumber )
//			{
//				rc = this.ItemNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is rptSummaryByUPC)
            {
                rptSummaryByUPC compare=(rptSummaryByUPC)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.ItemNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ItemNumber";
        }

        public static string GetKeyColumn()
        {
            return "ItemNumber";
        }        

        public static string GetDescriptorColumn()
        {
            return "ItemNumber";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _ItemNumber;
        [SubSonicPrimaryKey]
        [LocalData]
        public string ItemNumber
        {
            get { return m_Internal.ItemNumber; }
            set
            {
                if(m_Internal.ItemNumber!=value){
                    m_Internal.ItemNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _NumberOfPours;
        [LocalData]
        public int? NumberOfPours
        {
            get { return m_Internal.NumberOfPours; }
            set
            {
                if(m_Internal.NumberOfPours!=value){
                    m_Internal.NumberOfPours=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NumberOfPours");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _PourStandard;
        [LocalData]
        public double? PourStandard
        {
            get { return m_Internal.PourStandard; }
            set
            {
                if(m_Internal.PourStandard!=value){
                    m_Internal.PourStandard=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourStandard");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _AveragePour;
        [LocalData]
        public double? AveragePour
        {
            get { return m_Internal.AveragePour; }
            set
            {
                if(m_Internal.AveragePour!=value){
                    m_Internal.AveragePour=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AveragePour");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _MinPour;
        [LocalData]
        public double? MinPour
        {
            get { return m_Internal.MinPour; }
            set
            {
                if(m_Internal.MinPour!=value){
                    m_Internal.MinPour=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinPour");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _MaxPour;
        [LocalData]
        public double? MaxPour
        {
            get { return m_Internal.MaxPour; }
            set
            {
                if(m_Internal.MaxPour!=value){
                    m_Internal.MaxPour=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaxPour");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TotalVolume;
        [LocalData]
        public double? TotalVolume
        {
            get { return m_Internal.TotalVolume; }
            set
            {
                if(m_Internal.TotalVolume!=value){
                    m_Internal.TotalVolume=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalVolume");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _IdealCostTotal;
        [LocalData]
        public decimal? IdealCostTotal
        {
            get { return m_Internal.IdealCostTotal; }
            set
            {
                if(m_Internal.IdealCostTotal!=value){
                    m_Internal.IdealCostTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IdealCostTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TotalPourCost;
        [LocalData]
        public double? TotalPourCost
        {
            get { return m_Internal.TotalPourCost; }
            set
            {
                if(m_Internal.TotalPourCost!=value){
                    m_Internal.TotalPourCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalPourCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TotalProfit;
        [LocalData]
        public double? TotalProfit
        {
            get { return m_Internal.TotalProfit; }
            set
            {
                if(m_Internal.TotalProfit!=value){
                    m_Internal.TotalProfit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalProfit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalSales;
        [LocalData]
        public decimal? TotalSales
        {
            get { return m_Internal.TotalSales; }
            set
            {
                if(m_Internal.TotalSales!=value){
                    m_Internal.TotalSales=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalSales");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _Average;
        [LocalData]
        public double? Average
        {
            get { return m_Internal.Average; }
            set
            {
                if(m_Internal.Average!=value){
                    m_Internal.Average=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Average");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<rptSummaryByUPC, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatarptTaggedInventory : IWCFDataElement
    {
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public string Manufacturer { get; set; }
        [DataMember]
        public string UPCName { get; set; }
        [DataMember]
        public string TagNumber { get; set; }
        [DataMember]
        public double Quantity { get; set; }
        [DataMember]
        public double? NozzleArea { get; set; }

        public void Copy( DatarptTaggedInventory _Item )
        {
             Manufacturer = _Item.Manufacturer;			
             UPCName = _Item.UPCName;			
             TagNumber = _Item.TagNumber;			
             Quantity = _Item.Quantity;			
             NozzleArea = _Item.NozzleArea;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new rptTaggedInventory( this );
        }


    }


    /// <summary>
    /// A class which represents the rptTaggedInventory table in the BeverageMonitor Database.
    /// </summary>
    public partial class rptTaggedInventory: BaseDataObject<DatarptTaggedInventory>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<rptTaggedInventory> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<rptTaggedInventory>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<rptTaggedInventory> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(rptTaggedInventory item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                rptTaggedInventory item=new rptTaggedInventory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<rptTaggedInventory> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public rptTaggedInventory()
        {
            m_Internal = new DatarptTaggedInventory();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public rptTaggedInventory( bool _CallOnCreated )
        {
            m_Internal = new DatarptTaggedInventory();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public rptTaggedInventory(string connectionString, string providerName) 
        {
            m_Internal = new DatarptTaggedInventory();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public rptTaggedInventory( rptTaggedInventory _Item )
        {
            m_Internal = new DatarptTaggedInventory();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public rptTaggedInventory( DatarptTaggedInventory _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( rptTaggedInventory _Item )
        {
            m_Internal.Manufacturer = _Item.Manufacturer;			
            m_Internal.UPCName = _Item.UPCName;			
            m_Internal.TagNumber = _Item.TagNumber;			
            m_Internal.Quantity = _Item.Quantity;			
            m_Internal.NozzleArea = _Item.NozzleArea;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                rptTaggedInventory.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptTaggedInventory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public rptTaggedInventory(Expression<Func<rptTaggedInventory, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<rptTaggedInventory> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<rptTaggedInventory> _repo;
            
            if(db.TestMode)
            {
                rptTaggedInventory.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptTaggedInventory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<rptTaggedInventory> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static rptTaggedInventory SingleOrDefault(Expression<Func<rptTaggedInventory, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static rptTaggedInventory SingleOrDefault(Expression<Func<rptTaggedInventory, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<rptTaggedInventory> repo = GetRepo(connectionString,providerName);
            rptTaggedInventory single = repo.SingleOrDefault<rptTaggedInventory>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<rptTaggedInventory, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<rptTaggedInventory, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static rptTaggedInventory GetByID(string value) 
        {
            return rptTaggedInventory.Find( L => L.Location.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<rptTaggedInventory> Find(Expression<Func<rptTaggedInventory, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<rptTaggedInventory> Find(Expression<Func<rptTaggedInventory, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<rptTaggedInventory> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<rptTaggedInventory> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<rptTaggedInventory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<rptTaggedInventory> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<rptTaggedInventory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<rptTaggedInventory> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Location";
        }

        public object KeyValue()
        {
            return this.Location;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Location )
//			{
//				rc = this.Location.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is rptTaggedInventory)
            {
                rptTaggedInventory compare=(rptTaggedInventory)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Location.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Location";
        }

        public static string GetKeyColumn()
        {
            return "Location";
        }        

        public static string GetDescriptorColumn()
        {
            return "Location";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Location;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Location
        {
            get { return m_Internal.Location; }
            set
            {
                if(m_Internal.Location!=value){
                    m_Internal.Location=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Location");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Manufacturer;
        [LocalData]
        public string Manufacturer
        {
            get { return m_Internal.Manufacturer; }
            set
            {
                if(m_Internal.Manufacturer!=value){
                    m_Internal.Manufacturer=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Manufacturer");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _UPCName;
        [LocalData]
        public string UPCName
        {
            get { return m_Internal.UPCName; }
            set
            {
                if(m_Internal.UPCName!=value){
                    m_Internal.UPCName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UPC Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TagNumber;
        [LocalData]
        public string TagNumber
        {
            get { return m_Internal.TagNumber; }
            set
            {
                if(m_Internal.TagNumber!=value){
                    m_Internal.TagNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Quantity;
        [LocalData]
        public double Quantity
        {
            get { return m_Internal.Quantity; }
            set
            {
                if(m_Internal.Quantity!=value){
                    m_Internal.Quantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _NozzleArea;
        [LocalData]
        public double? NozzleArea
        {
            get { return m_Internal.NozzleArea; }
            set
            {
                if(m_Internal.NozzleArea!=value){
                    m_Internal.NozzleArea=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NozzleArea");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<rptTaggedInventory, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatarptTagPourTotal : IWCFDataElement
    {
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public string Manufacturer { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string TagNumber { get; set; }
        [DataMember]
        public int Count { get; set; }
        [DataMember]
        public double Volume { get; set; }

        public void Copy( DatarptTagPourTotal _Item )
        {
             Manufacturer = _Item.Manufacturer;			
             Name = _Item.Name;			
             TagNumber = _Item.TagNumber;			
             Count = _Item.Count;			
             Volume = _Item.Volume;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new rptTagPourTotal( this );
        }


    }


    /// <summary>
    /// A class which represents the rptTagPourTotals table in the BeverageMonitor Database.
    /// </summary>
    public partial class rptTagPourTotal: BaseDataObject<DatarptTagPourTotal>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<rptTagPourTotal> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<rptTagPourTotal>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<rptTagPourTotal> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(rptTagPourTotal item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                rptTagPourTotal item=new rptTagPourTotal();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<rptTagPourTotal> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public rptTagPourTotal()
        {
            m_Internal = new DatarptTagPourTotal();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public rptTagPourTotal( bool _CallOnCreated )
        {
            m_Internal = new DatarptTagPourTotal();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public rptTagPourTotal(string connectionString, string providerName) 
        {
            m_Internal = new DatarptTagPourTotal();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public rptTagPourTotal( rptTagPourTotal _Item )
        {
            m_Internal = new DatarptTagPourTotal();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public rptTagPourTotal( DatarptTagPourTotal _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( rptTagPourTotal _Item )
        {
            m_Internal.Manufacturer = _Item.Manufacturer;			
            m_Internal.Name = _Item.Name;			
            m_Internal.TagNumber = _Item.TagNumber;			
            m_Internal.Count = _Item.Count;			
            m_Internal.Volume = _Item.Volume;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                rptTagPourTotal.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptTagPourTotal>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public rptTagPourTotal(Expression<Func<rptTagPourTotal, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<rptTagPourTotal> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<rptTagPourTotal> _repo;
            
            if(db.TestMode)
            {
                rptTagPourTotal.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<rptTagPourTotal>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<rptTagPourTotal> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static rptTagPourTotal SingleOrDefault(Expression<Func<rptTagPourTotal, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static rptTagPourTotal SingleOrDefault(Expression<Func<rptTagPourTotal, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<rptTagPourTotal> repo = GetRepo(connectionString,providerName);
            rptTagPourTotal single = repo.SingleOrDefault<rptTagPourTotal>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<rptTagPourTotal, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<rptTagPourTotal, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static rptTagPourTotal GetByID(string value) 
        {
            return rptTagPourTotal.Find( L => L.Type.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<rptTagPourTotal> Find(Expression<Func<rptTagPourTotal, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<rptTagPourTotal> Find(Expression<Func<rptTagPourTotal, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<rptTagPourTotal> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<rptTagPourTotal> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<rptTagPourTotal> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<rptTagPourTotal> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<rptTagPourTotal> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<rptTagPourTotal> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Type";
        }

        public object KeyValue()
        {
            return this.Type;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Type )
//			{
//				rc = this.Type.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is rptTagPourTotal)
            {
                rptTagPourTotal compare=(rptTagPourTotal)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Type.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Type";
        }

        public static string GetKeyColumn()
        {
            return "Type";
        }        

        public static string GetDescriptorColumn()
        {
            return "Type";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Type;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Type
        {
            get { return m_Internal.Type; }
            set
            {
                if(m_Internal.Type!=value){
                    m_Internal.Type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Manufacturer;
        [LocalData]
        public string Manufacturer
        {
            get { return m_Internal.Manufacturer; }
            set
            {
                if(m_Internal.Manufacturer!=value){
                    m_Internal.Manufacturer=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Manufacturer");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TagNumber;
        [LocalData]
        public string TagNumber
        {
            get { return m_Internal.TagNumber; }
            set
            {
                if(m_Internal.TagNumber!=value){
                    m_Internal.TagNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Count;
        [LocalData]
        public int Count
        {
            get { return m_Internal.Count; }
            set
            {
                if(m_Internal.Count!=value){
                    m_Internal.Count=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Count");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Volume;
        [LocalData]
        public double Volume
        {
            get { return m_Internal.Volume; }
            set
            {
                if(m_Internal.Volume!=value){
                    m_Internal.Volume=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Volume");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<rptTagPourTotal, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataSecurableItem : IWCFDataElement
    {
        [DataMember]
        public Guid SecurableItemID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Description { get; set; }

        public void Copy( DataSecurableItem _Item )
        {
             Name = _Item.Name;			
             Description = _Item.Description;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new SecurableItem( this );
        }


    }


    /// <summary>
    /// A class which represents the SecurableItems table in the BeverageMonitor Database.
    /// </summary>
    public partial class SecurableItem: BaseDataObject<DataSecurableItem>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<SecurableItem> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<SecurableItem>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<SecurableItem> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(SecurableItem item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                SecurableItem item=new SecurableItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<SecurableItem> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public SecurableItem()
        {
            m_Internal = new DataSecurableItem();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.SecurableItemID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public SecurableItem( bool _CallOnCreated )
        {
            m_Internal = new DataSecurableItem();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public SecurableItem(string connectionString, string providerName) 
        {
            m_Internal = new DataSecurableItem();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.SecurableItemID = Guid.NewGuid( );     
        }

        public SecurableItem( SecurableItem _Item )
        {
            m_Internal = new DataSecurableItem();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public SecurableItem( DataSecurableItem _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( SecurableItem _Item )
        {
            m_Internal.Name = _Item.Name;			
            m_Internal.Description = _Item.Description;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.SecurableItemID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                SecurableItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<SecurableItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public SecurableItem(Expression<Func<SecurableItem, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<SecurableItem> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<SecurableItem> _repo;
            
            if(db.TestMode)
            {
                SecurableItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<SecurableItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SecurableItem> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static SecurableItem SingleOrDefault(Expression<Func<SecurableItem, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static SecurableItem SingleOrDefault(Expression<Func<SecurableItem, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<SecurableItem> repo = GetRepo(connectionString,providerName);
            SecurableItem single = repo.SingleOrDefault<SecurableItem>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<SecurableItem, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<SecurableItem, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptySecurableItemLoaded = false;
        protected static SecurableItem EmptySecurableItemMember = null;

        public static SecurableItem GetByID(Guid? value) 
        {
            SecurableItem rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static SecurableItem GetByID(Guid value) 
        {
            SecurableItem rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptySecurableItemLoaded )
                    {
                        rc = EmptySecurableItemMember;
                    }
                    else
                    {
                        IsEmptySecurableItemLoaded = true;
                        rc = SecurableItem.Find( L => L.SecurableItemID.Equals( value ) ).FirstOrDefault( );
                        EmptySecurableItemMember = rc;
                    }
                }
                else
                {
                    rc = SecurableItem.Find( L => L.SecurableItemID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<SecurableItem> Find(Expression<Func<SecurableItem, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SecurableItem> Find(Expression<Func<SecurableItem, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<SecurableItem> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<SecurableItem> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SecurableItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SecurableItem> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SecurableItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<SecurableItem> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "SecurableItemID";
        }

        public object KeyValue()
        {
            return this.SecurableItemID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is SecurableItem)
            {
                SecurableItem compare=(SecurableItem)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.SecurableItemID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "SecurableItemID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<GroupsXSecurableItem> GroupsXSecurableItems
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.GroupsXSecurableItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.SecurableItemID == m_Internal.SecurableItemID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.SecurableItemID;
            }
            set
            {
                m_Internal.SecurableItemID = value;
            }
        }


//        Guid _SecurableItemID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid SecurableItemID
        {
            get { return m_Internal.SecurableItemID; }
            set
            {
                if(m_Internal.SecurableItemID!=value){
                    m_Internal.SecurableItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SecurableItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<SecurableItem, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataSizeType : IWCFDataElement
    {
        [DataMember]
        public Guid SizeTypeID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Abbreviation { get; set; }
        [DataMember]
        public double ConversionMultiplier { get; set; }

        public void Copy( DataSizeType _Item )
        {
             Name = _Item.Name;			
             Abbreviation = _Item.Abbreviation;			
             ConversionMultiplier = _Item.ConversionMultiplier;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new SizeType( this );
        }


    }


    /// <summary>
    /// A class which represents the SizeTypes table in the BeverageMonitor Database.
    /// </summary>
    public partial class SizeType: BaseDataObject<DataSizeType>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<SizeType> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<SizeType>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<SizeType> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(SizeType item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                SizeType item=new SizeType();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<SizeType> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public SizeType()
        {
            m_Internal = new DataSizeType();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.SizeTypeID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public SizeType( bool _CallOnCreated )
        {
            m_Internal = new DataSizeType();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public SizeType(string connectionString, string providerName) 
        {
            m_Internal = new DataSizeType();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.SizeTypeID = Guid.NewGuid( );     
        }

        public SizeType( SizeType _Item )
        {
            m_Internal = new DataSizeType();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public SizeType( DataSizeType _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( SizeType _Item )
        {
            m_Internal.Name = _Item.Name;			
            m_Internal.Abbreviation = _Item.Abbreviation;			
            m_Internal.ConversionMultiplier = _Item.ConversionMultiplier;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.SizeTypeID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                SizeType.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<SizeType>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public SizeType(Expression<Func<SizeType, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<SizeType> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<SizeType> _repo;
            
            if(db.TestMode)
            {
                SizeType.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<SizeType>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SizeType> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static SizeType SingleOrDefault(Expression<Func<SizeType, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static SizeType SingleOrDefault(Expression<Func<SizeType, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<SizeType> repo = GetRepo(connectionString,providerName);
            SizeType single = repo.SingleOrDefault<SizeType>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<SizeType, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<SizeType, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptySizeTypeLoaded = false;
        protected static SizeType EmptySizeTypeMember = null;

        public static SizeType GetByID(Guid? value) 
        {
            SizeType rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static SizeType GetByID(Guid value) 
        {
            SizeType rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptySizeTypeLoaded )
                    {
                        rc = EmptySizeTypeMember;
                    }
                    else
                    {
                        IsEmptySizeTypeLoaded = true;
                        rc = SizeType.Find( L => L.SizeTypeID.Equals( value ) ).FirstOrDefault( );
                        EmptySizeTypeMember = rc;
                    }
                }
                else
                {
                    rc = SizeType.Find( L => L.SizeTypeID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<SizeType> Find(Expression<Func<SizeType, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SizeType> Find(Expression<Func<SizeType, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<SizeType> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<SizeType> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SizeType> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SizeType> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SizeType> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<SizeType> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "SizeTypeID";
        }

        public object KeyValue()
        {
            return this.SizeTypeID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is SizeType)
            {
                SizeType compare=(SizeType)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.SizeTypeID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "SizeTypeID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<UPC> UPCS
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UPC.GetRepo();
                  return from items in repo.GetAll()
                       where items.SizeTypeID == m_Internal.SizeTypeID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.SizeTypeID;
            }
            set
            {
                m_Internal.SizeTypeID = value;
            }
        }


//        Guid _SizeTypeID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid SizeTypeID
        {
            get { return m_Internal.SizeTypeID; }
            set
            {
                if(m_Internal.SizeTypeID!=value){
                    m_Internal.SizeTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SizeTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Abbreviation;
        [LocalData]
        public string Abbreviation
        {
            get { return m_Internal.Abbreviation; }
            set
            {
                if(m_Internal.Abbreviation!=value){
                    m_Internal.Abbreviation=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Abbreviation");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _ConversionMultiplier;
        [LocalData]
        public double ConversionMultiplier
        {
            get { return m_Internal.ConversionMultiplier; }
            set
            {
                if(m_Internal.ConversionMultiplier!=value){
                    m_Internal.ConversionMultiplier=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConversionMultiplier");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<SizeType, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataStandardNozzle : IWCFDataElement
    {
        [DataMember]
        public Guid StandardNozzleID { get; set; }
        [DataMember]
        public double Length { get; set; }
        [DataMember]
        public double Width { get; set; }
        [DataMember]
        public int Shape { get; set; }

        public void Copy( DataStandardNozzle _Item )
        {
             Length = _Item.Length;			
             Width = _Item.Width;			
             Shape = _Item.Shape;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new StandardNozzle( this );
        }


    }


    /// <summary>
    /// A class which represents the StandardNozzles table in the BeverageMonitor Database.
    /// </summary>
    public partial class StandardNozzle: BaseDataObject<DataStandardNozzle>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<StandardNozzle> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<StandardNozzle>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<StandardNozzle> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(StandardNozzle item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                StandardNozzle item=new StandardNozzle();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<StandardNozzle> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public StandardNozzle()
        {
            m_Internal = new DataStandardNozzle();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.StandardNozzleID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public StandardNozzle( bool _CallOnCreated )
        {
            m_Internal = new DataStandardNozzle();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public StandardNozzle(string connectionString, string providerName) 
        {
            m_Internal = new DataStandardNozzle();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.StandardNozzleID = Guid.NewGuid( );     
        }

        public StandardNozzle( StandardNozzle _Item )
        {
            m_Internal = new DataStandardNozzle();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public StandardNozzle( DataStandardNozzle _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( StandardNozzle _Item )
        {
            m_Internal.Length = _Item.Length;			
            m_Internal.Width = _Item.Width;			
            m_Internal.Shape = _Item.Shape;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.StandardNozzleID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                StandardNozzle.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<StandardNozzle>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public StandardNozzle(Expression<Func<StandardNozzle, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<StandardNozzle> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<StandardNozzle> _repo;
            
            if(db.TestMode)
            {
                StandardNozzle.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<StandardNozzle>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<StandardNozzle> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static StandardNozzle SingleOrDefault(Expression<Func<StandardNozzle, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static StandardNozzle SingleOrDefault(Expression<Func<StandardNozzle, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<StandardNozzle> repo = GetRepo(connectionString,providerName);
            StandardNozzle single = repo.SingleOrDefault<StandardNozzle>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<StandardNozzle, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<StandardNozzle, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyStandardNozzleLoaded = false;
        protected static StandardNozzle EmptyStandardNozzleMember = null;

        public static StandardNozzle GetByID(Guid? value) 
        {
            StandardNozzle rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static StandardNozzle GetByID(Guid value) 
        {
            StandardNozzle rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyStandardNozzleLoaded )
                    {
                        rc = EmptyStandardNozzleMember;
                    }
                    else
                    {
                        IsEmptyStandardNozzleLoaded = true;
                        rc = StandardNozzle.Find( L => L.StandardNozzleID.Equals( value ) ).FirstOrDefault( );
                        EmptyStandardNozzleMember = rc;
                    }
                }
                else
                {
                    rc = StandardNozzle.Find( L => L.StandardNozzleID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<StandardNozzle> Find(Expression<Func<StandardNozzle, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<StandardNozzle> Find(Expression<Func<StandardNozzle, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<StandardNozzle> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<StandardNozzle> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<StandardNozzle> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<StandardNozzle> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<StandardNozzle> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<StandardNozzle> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "StandardNozzleID";
        }

        public object KeyValue()
        {
            return this.StandardNozzleID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Length )
//			{
//				rc = this.Length.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is StandardNozzle)
            {
                StandardNozzle compare=(StandardNozzle)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.StandardNozzleID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Length.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Length";
        }

        public static string GetKeyColumn()
        {
            return "StandardNozzleID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Length";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Category> Categories
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Category.GetRepo();
                  return from items in repo.GetAll()
                       where items.StandardNozzleID == m_Internal.StandardNozzleID
                       select items;
            }
        }
        public IQueryable<Tag> Tags
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Tag.GetRepo();
                  return from items in repo.GetAll()
                       where items.StandardNozzleID == m_Internal.StandardNozzleID
                       select items;
            }
        }
        public IQueryable<UPC> UPCS
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UPC.GetRepo();
                  return from items in repo.GetAll()
                       where items.StandardNozzleID == m_Internal.StandardNozzleID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.StandardNozzleID;
            }
            set
            {
                m_Internal.StandardNozzleID = value;
            }
        }


//        Guid _StandardNozzleID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid StandardNozzleID
        {
            get { return m_Internal.StandardNozzleID; }
            set
            {
                if(m_Internal.StandardNozzleID!=value){
                    m_Internal.StandardNozzleID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StandardNozzleID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Length;
        [LocalData]
        public double Length
        {
            get { return m_Internal.Length; }
            set
            {
                if(m_Internal.Length!=value){
                    m_Internal.Length=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Length");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Width;
        [LocalData]
        public double Width
        {
            get { return m_Internal.Width; }
            set
            {
                if(m_Internal.Width!=value){
                    m_Internal.Width=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Width");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Shape;
        [LocalData]
        public int Shape
        {
            get { return m_Internal.Shape; }
            set
            {
                if(m_Internal.Shape!=value){
                    m_Internal.Shape=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Shape");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<StandardNozzle, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataStandardPour : IWCFDataElement
    {
        [DataMember]
        public Guid StandardPourID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public double PourStandard { get; set; }
        [DataMember]
        public double StandardVariance { get; set; }
        [DataMember]
        public Guid? CategoryID { get; set; }
        [DataMember]
        public bool SystemStandard { get; set; }

        public void Copy( DataStandardPour _Item )
        {
             Name = _Item.Name;			
             PourStandard = _Item.PourStandard;			
             StandardVariance = _Item.StandardVariance;			
             CategoryID = _Item.CategoryID;			
             SystemStandard = _Item.SystemStandard;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new StandardPour( this );
        }


    }


    /// <summary>
    /// A class which represents the StandardPours table in the BeverageMonitor Database.
    /// </summary>
    public partial class StandardPour: BaseDataObject<DataStandardPour>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<StandardPour> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<StandardPour>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<StandardPour> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(StandardPour item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                StandardPour item=new StandardPour();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<StandardPour> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public StandardPour()
        {
            m_Internal = new DataStandardPour();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.StandardPourID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public StandardPour( bool _CallOnCreated )
        {
            m_Internal = new DataStandardPour();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public StandardPour(string connectionString, string providerName) 
        {
            m_Internal = new DataStandardPour();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.StandardPourID = Guid.NewGuid( );     
        }

        public StandardPour( StandardPour _Item )
        {
            m_Internal = new DataStandardPour();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public StandardPour( DataStandardPour _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( StandardPour _Item )
        {
            m_Internal.Name = _Item.Name;			
            m_Internal.PourStandard = _Item.PourStandard;			
            m_Internal.StandardVariance = _Item.StandardVariance;			
            m_Internal.CategoryID = _Item.CategoryID;			
            m_Internal.SystemStandard = _Item.SystemStandard;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.StandardPourID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                StandardPour.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<StandardPour>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public StandardPour(Expression<Func<StandardPour, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<StandardPour> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<StandardPour> _repo;
            
            if(db.TestMode)
            {
                StandardPour.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<StandardPour>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<StandardPour> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static StandardPour SingleOrDefault(Expression<Func<StandardPour, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static StandardPour SingleOrDefault(Expression<Func<StandardPour, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<StandardPour> repo = GetRepo(connectionString,providerName);
            StandardPour single = repo.SingleOrDefault<StandardPour>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<StandardPour, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<StandardPour, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyStandardPourLoaded = false;
        protected static StandardPour EmptyStandardPourMember = null;

        public static StandardPour GetByID(Guid? value) 
        {
            StandardPour rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static StandardPour GetByID(Guid value) 
        {
            StandardPour rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyStandardPourLoaded )
                    {
                        rc = EmptyStandardPourMember;
                    }
                    else
                    {
                        IsEmptyStandardPourLoaded = true;
                        rc = StandardPour.Find( L => L.StandardPourID.Equals( value ) ).FirstOrDefault( );
                        EmptyStandardPourMember = rc;
                    }
                }
                else
                {
                    rc = StandardPour.Find( L => L.StandardPourID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<StandardPour> Find(Expression<Func<StandardPour, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<StandardPour> Find(Expression<Func<StandardPour, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<StandardPour> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<StandardPour> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<StandardPour> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<StandardPour> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<StandardPour> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<StandardPour> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "StandardPourID";
        }

        public object KeyValue()
        {
            return this.StandardPourID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is StandardPour)
            {
                StandardPour compare=(StandardPour)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.StandardPourID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "StandardPourID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Ingredient> Ingredients
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Ingredient.GetRepo();
                  return from items in repo.GetAll()
                       where items.StandardPourID == m_Internal.StandardPourID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.StandardPourID;
            }
            set
            {
                m_Internal.StandardPourID = value;
            }
        }


//        Guid _StandardPourID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid StandardPourID
        {
            get { return m_Internal.StandardPourID; }
            set
            {
                if(m_Internal.StandardPourID!=value){
                    m_Internal.StandardPourID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StandardPourID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _PourStandard;
        [LocalData]
        public double PourStandard
        {
            get { return m_Internal.PourStandard; }
            set
            {
                if(m_Internal.PourStandard!=value){
                    m_Internal.PourStandard=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourStandard");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _StandardVariance;
        [LocalData]
        public double StandardVariance
        {
            get { return m_Internal.StandardVariance; }
            set
            {
                if(m_Internal.StandardVariance!=value){
                    m_Internal.StandardVariance=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StandardVariance");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _CategoryID;
        [LocalData]
        public Guid? CategoryID
        {
            get { return m_Internal.CategoryID; }
            set
            {
                if(m_Internal.CategoryID!=value){
                    m_Internal.CategoryID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CategoryID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        bool _SystemStandard;
        [LocalData]
        public bool SystemStandard
        {
            get { return m_Internal.SystemStandard; }
            set
            {
                if(m_Internal.SystemStandard!=value){
                    m_Internal.SystemStandard=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SystemStandard");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<StandardPour, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataStandardPrice : IWCFDataElement
    {
        [DataMember]
        public Guid StandardPriceID { get; set; }
        [DataMember]
        public decimal SinglePrice { get; set; }
        [DataMember]
        public decimal DoublePrice { get; set; }

        public void Copy( DataStandardPrice _Item )
        {
             SinglePrice = _Item.SinglePrice;			
             DoublePrice = _Item.DoublePrice;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new StandardPrice( this );
        }


    }


    /// <summary>
    /// A class which represents the StandardPrices table in the BeverageMonitor Database.
    /// </summary>
    public partial class StandardPrice: BaseDataObject<DataStandardPrice>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<StandardPrice> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<StandardPrice>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<StandardPrice> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(StandardPrice item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                StandardPrice item=new StandardPrice();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<StandardPrice> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public StandardPrice()
        {
            m_Internal = new DataStandardPrice();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.StandardPriceID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public StandardPrice( bool _CallOnCreated )
        {
            m_Internal = new DataStandardPrice();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public StandardPrice(string connectionString, string providerName) 
        {
            m_Internal = new DataStandardPrice();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.StandardPriceID = Guid.NewGuid( );     
        }

        public StandardPrice( StandardPrice _Item )
        {
            m_Internal = new DataStandardPrice();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public StandardPrice( DataStandardPrice _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( StandardPrice _Item )
        {
            m_Internal.SinglePrice = _Item.SinglePrice;			
            m_Internal.DoublePrice = _Item.DoublePrice;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.StandardPriceID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                StandardPrice.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<StandardPrice>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public StandardPrice(Expression<Func<StandardPrice, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<StandardPrice> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<StandardPrice> _repo;
            
            if(db.TestMode)
            {
                StandardPrice.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<StandardPrice>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<StandardPrice> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static StandardPrice SingleOrDefault(Expression<Func<StandardPrice, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static StandardPrice SingleOrDefault(Expression<Func<StandardPrice, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<StandardPrice> repo = GetRepo(connectionString,providerName);
            StandardPrice single = repo.SingleOrDefault<StandardPrice>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<StandardPrice, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<StandardPrice, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyStandardPriceLoaded = false;
        protected static StandardPrice EmptyStandardPriceMember = null;

        public static StandardPrice GetByID(Guid? value) 
        {
            StandardPrice rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static StandardPrice GetByID(Guid value) 
        {
            StandardPrice rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyStandardPriceLoaded )
                    {
                        rc = EmptyStandardPriceMember;
                    }
                    else
                    {
                        IsEmptyStandardPriceLoaded = true;
                        rc = StandardPrice.Find( L => L.StandardPriceID.Equals( value ) ).FirstOrDefault( );
                        EmptyStandardPriceMember = rc;
                    }
                }
                else
                {
                    rc = StandardPrice.Find( L => L.StandardPriceID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<StandardPrice> Find(Expression<Func<StandardPrice, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<StandardPrice> Find(Expression<Func<StandardPrice, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<StandardPrice> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<StandardPrice> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<StandardPrice> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<StandardPrice> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<StandardPrice> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<StandardPrice> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "StandardPriceID";
        }

        public object KeyValue()
        {
            return this.StandardPriceID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.SinglePrice )
//			{
//				rc = this.SinglePrice.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is StandardPrice)
            {
                StandardPrice compare=(StandardPrice)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.StandardPriceID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.SinglePrice.ToString();
        }

        public string DescriptorColumn() 
        {
            return "SinglePrice";
        }

        public static string GetKeyColumn()
        {
            return "StandardPriceID";
        }        

        public static string GetDescriptorColumn()
        {
            return "SinglePrice";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Category> Categories
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Category.GetRepo();
                  return from items in repo.GetAll()
                       where items.StandardPriceID == m_Internal.StandardPriceID
                       select items;
            }
        }
        public IQueryable<UPC> UPCS
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UPC.GetRepo();
                  return from items in repo.GetAll()
                       where items.StandardPriceID == m_Internal.StandardPriceID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.StandardPriceID;
            }
            set
            {
                m_Internal.StandardPriceID = value;
            }
        }


//        Guid _StandardPriceID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid StandardPriceID
        {
            get { return m_Internal.StandardPriceID; }
            set
            {
                if(m_Internal.StandardPriceID!=value){
                    m_Internal.StandardPriceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StandardPriceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _SinglePrice;
        [LocalData]
        public decimal SinglePrice
        {
            get { return m_Internal.SinglePrice; }
            set
            {
                if(m_Internal.SinglePrice!=value){
                    m_Internal.SinglePrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SinglePrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _DoublePrice;
        [LocalData]
        public decimal DoublePrice
        {
            get { return m_Internal.DoublePrice; }
            set
            {
                if(m_Internal.DoublePrice!=value){
                    m_Internal.DoublePrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DoublePrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<StandardPrice, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataTagActivity : IWCFDataElement
    {
        [DataMember]
        public Guid TagActivityID { get; set; }
        [DataMember]
        public Guid TagID { get; set; }
        [DataMember]
        public Guid DeviceID { get; set; }
        [DataMember]
        public Guid LocationID { get; set; }
        [DataMember]
        public DateTime ActivityTime { get; set; }
        [DataMember]
        public double SignalStrength { get; set; }
        [DataMember]
        public int ActivityType { get; set; }
        [DataMember]
        public string RawData { get; set; }

        public void Copy( DataTagActivity _Item )
        {
             TagID = _Item.TagID;			
             DeviceID = _Item.DeviceID;			
             LocationID = _Item.LocationID;			
             ActivityTime = _Item.ActivityTime;			
             SignalStrength = _Item.SignalStrength;			
             ActivityType = _Item.ActivityType;			
             RawData = _Item.RawData;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new TagActivity( this );
        }


    }


    /// <summary>
    /// A class which represents the TagActivities table in the BeverageMonitor Database.
    /// </summary>
    public partial class TagActivity: BaseDataObject<DataTagActivity>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<TagActivity> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<TagActivity>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<TagActivity> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(TagActivity item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                TagActivity item=new TagActivity();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<TagActivity> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public TagActivity()
        {
            m_Internal = new DataTagActivity();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.TagActivityID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public TagActivity( bool _CallOnCreated )
        {
            m_Internal = new DataTagActivity();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public TagActivity(string connectionString, string providerName) 
        {
            m_Internal = new DataTagActivity();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.TagActivityID = Guid.NewGuid( );     
        }

        public TagActivity( TagActivity _Item )
        {
            m_Internal = new DataTagActivity();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public TagActivity( DataTagActivity _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( TagActivity _Item )
        {
            m_Internal.TagID = _Item.TagID;			
            m_Internal.DeviceID = _Item.DeviceID;			
            m_Internal.LocationID = _Item.LocationID;			
            m_Internal.ActivityTime = _Item.ActivityTime;			
            m_Internal.SignalStrength = _Item.SignalStrength;			
            m_Internal.ActivityType = _Item.ActivityType;			
            m_Internal.RawData = _Item.RawData;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.TagActivityID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                TagActivity.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TagActivity>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public TagActivity(Expression<Func<TagActivity, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<TagActivity> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<TagActivity> _repo;
            
            if(db.TestMode)
            {
                TagActivity.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TagActivity>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TagActivity> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static TagActivity SingleOrDefault(Expression<Func<TagActivity, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static TagActivity SingleOrDefault(Expression<Func<TagActivity, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<TagActivity> repo = GetRepo(connectionString,providerName);
            TagActivity single = repo.SingleOrDefault<TagActivity>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<TagActivity, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<TagActivity, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyTagActivityLoaded = false;
        protected static TagActivity EmptyTagActivityMember = null;

        public static TagActivity GetByID(Guid? value) 
        {
            TagActivity rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static TagActivity GetByID(Guid value) 
        {
            TagActivity rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyTagActivityLoaded )
                    {
                        rc = EmptyTagActivityMember;
                    }
                    else
                    {
                        IsEmptyTagActivityLoaded = true;
                        rc = TagActivity.Find( L => L.TagActivityID.Equals( value ) ).FirstOrDefault( );
                        EmptyTagActivityMember = rc;
                    }
                }
                else
                {
                    rc = TagActivity.Find( L => L.TagActivityID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<TagActivity> Find(Expression<Func<TagActivity, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TagActivity> Find(Expression<Func<TagActivity, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<TagActivity> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<TagActivity> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TagActivity> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TagActivity> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TagActivity> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<TagActivity> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "TagActivityID";
        }

        public object KeyValue()
        {
            return this.TagActivityID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.RawData )
//			{
//				rc = this.RawData.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is TagActivity)
            {
                TagActivity compare=(TagActivity)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.TagActivityID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.RawData.ToString();
        }

        public string DescriptorColumn() 
        {
            return "RawData";
        }

        public static string GetKeyColumn()
        {
            return "TagActivityID";
        }        

        public static string GetDescriptorColumn()
        {
            return "RawData";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Device> DevicesItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Device.GetRepo();
                  return from items in repo.GetAll()
                       where items.DeviceID == m_Internal.DeviceID
                       select items;
            }
        }
        public IQueryable<Tag> TagsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Tag.GetRepo();
                  return from items in repo.GetAll()
                       where items.TagID == m_Internal.TagID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.TagActivityID;
            }
            set
            {
                m_Internal.TagActivityID = value;
            }
        }


//        Guid _TagActivityID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid TagActivityID
        {
            get { return m_Internal.TagActivityID; }
            set
            {
                if(m_Internal.TagActivityID!=value){
                    m_Internal.TagActivityID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagActivityID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _TagID;
        [LocalData]
        public Guid TagID
        {
            get { return m_Internal.TagID; }
            set
            {
                if(m_Internal.TagID!=value){
                    m_Internal.TagID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _DeviceID;
        [LocalData]
        public Guid DeviceID
        {
            get { return m_Internal.DeviceID; }
            set
            {
                if(m_Internal.DeviceID!=value){
                    m_Internal.DeviceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeviceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _LocationID;
        [LocalData]
        public Guid LocationID
        {
            get { return m_Internal.LocationID; }
            set
            {
                if(m_Internal.LocationID!=value){
                    m_Internal.LocationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _ActivityTime;
        [LocalData]
        public DateTime ActivityTime
        {
            get { return m_Internal.ActivityTime; }
            set
            {
                if(m_Internal.ActivityTime!=value){
                    m_Internal.ActivityTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActivityTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _SignalStrength;
        [LocalData]
        public double SignalStrength
        {
            get { return m_Internal.SignalStrength; }
            set
            {
                if(m_Internal.SignalStrength!=value){
                    m_Internal.SignalStrength=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SignalStrength");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _ActivityType;
        [LocalData]
        public int ActivityType
        {
            get { return m_Internal.ActivityType; }
            set
            {
                if(m_Internal.ActivityType!=value){
                    m_Internal.ActivityType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActivityType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RawData;
        [LocalData]
        public string RawData
        {
            get { return m_Internal.RawData; }
            set
            {
                if(m_Internal.RawData!=value){
                    m_Internal.RawData=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RawData");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<TagActivity, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataTagAlert : IWCFDataElement
    {
        [DataMember]
        public Guid TagAlertID { get; set; }
        [DataMember]
        public int AlertType { get; set; }
        [DataMember]
        public Guid TagID { get; set; }
        [DataMember]
        public Guid DeviceID { get; set; }
        [DataMember]
        public Guid LocationID { get; set; }
        [DataMember]
        public string Message { get; set; }
        [DataMember]
        public int Severity { get; set; }
        [DataMember]
        public DateTime AlertTime { get; set; }

        public void Copy( DataTagAlert _Item )
        {
             AlertType = _Item.AlertType;			
             TagID = _Item.TagID;			
             DeviceID = _Item.DeviceID;			
             LocationID = _Item.LocationID;			
             Message = _Item.Message;			
             Severity = _Item.Severity;			
             AlertTime = _Item.AlertTime;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new TagAlert( this );
        }


    }


    /// <summary>
    /// A class which represents the TagAlerts table in the BeverageMonitor Database.
    /// </summary>
    public partial class TagAlert: BaseDataObject<DataTagAlert>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<TagAlert> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<TagAlert>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<TagAlert> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(TagAlert item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                TagAlert item=new TagAlert();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<TagAlert> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public TagAlert()
        {
            m_Internal = new DataTagAlert();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.TagAlertID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public TagAlert( bool _CallOnCreated )
        {
            m_Internal = new DataTagAlert();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public TagAlert(string connectionString, string providerName) 
        {
            m_Internal = new DataTagAlert();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.TagAlertID = Guid.NewGuid( );     
        }

        public TagAlert( TagAlert _Item )
        {
            m_Internal = new DataTagAlert();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public TagAlert( DataTagAlert _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( TagAlert _Item )
        {
            m_Internal.AlertType = _Item.AlertType;			
            m_Internal.TagID = _Item.TagID;			
            m_Internal.DeviceID = _Item.DeviceID;			
            m_Internal.LocationID = _Item.LocationID;			
            m_Internal.Message = _Item.Message;			
            m_Internal.Severity = _Item.Severity;			
            m_Internal.AlertTime = _Item.AlertTime;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.TagAlertID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                TagAlert.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TagAlert>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public TagAlert(Expression<Func<TagAlert, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<TagAlert> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<TagAlert> _repo;
            
            if(db.TestMode)
            {
                TagAlert.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TagAlert>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TagAlert> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static TagAlert SingleOrDefault(Expression<Func<TagAlert, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static TagAlert SingleOrDefault(Expression<Func<TagAlert, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<TagAlert> repo = GetRepo(connectionString,providerName);
            TagAlert single = repo.SingleOrDefault<TagAlert>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<TagAlert, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<TagAlert, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyTagAlertLoaded = false;
        protected static TagAlert EmptyTagAlertMember = null;

        public static TagAlert GetByID(Guid? value) 
        {
            TagAlert rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static TagAlert GetByID(Guid value) 
        {
            TagAlert rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyTagAlertLoaded )
                    {
                        rc = EmptyTagAlertMember;
                    }
                    else
                    {
                        IsEmptyTagAlertLoaded = true;
                        rc = TagAlert.Find( L => L.TagAlertID.Equals( value ) ).FirstOrDefault( );
                        EmptyTagAlertMember = rc;
                    }
                }
                else
                {
                    rc = TagAlert.Find( L => L.TagAlertID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<TagAlert> Find(Expression<Func<TagAlert, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TagAlert> Find(Expression<Func<TagAlert, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<TagAlert> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<TagAlert> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TagAlert> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TagAlert> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TagAlert> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<TagAlert> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "TagAlertID";
        }

        public object KeyValue()
        {
            return this.TagAlertID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Message )
//			{
//				rc = this.Message.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is TagAlert)
            {
                TagAlert compare=(TagAlert)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.TagAlertID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Message.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Message";
        }

        public static string GetKeyColumn()
        {
            return "TagAlertID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Message";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Location> LocationsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Location.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        public IQueryable<Tag> TagsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Tag.GetRepo();
                  return from items in repo.GetAll()
                       where items.TagID == m_Internal.TagID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.TagAlertID;
            }
            set
            {
                m_Internal.TagAlertID = value;
            }
        }


//        Guid _TagAlertID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid TagAlertID
        {
            get { return m_Internal.TagAlertID; }
            set
            {
                if(m_Internal.TagAlertID!=value){
                    m_Internal.TagAlertID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagAlertID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _AlertType;
        [LocalData]
        public int AlertType
        {
            get { return m_Internal.AlertType; }
            set
            {
                if(m_Internal.AlertType!=value){
                    m_Internal.AlertType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AlertType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _TagID;
        [LocalData]
        public Guid TagID
        {
            get { return m_Internal.TagID; }
            set
            {
                if(m_Internal.TagID!=value){
                    m_Internal.TagID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _DeviceID;
        [LocalData]
        public Guid DeviceID
        {
            get { return m_Internal.DeviceID; }
            set
            {
                if(m_Internal.DeviceID!=value){
                    m_Internal.DeviceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeviceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _LocationID;
        [LocalData]
        public Guid LocationID
        {
            get { return m_Internal.LocationID; }
            set
            {
                if(m_Internal.LocationID!=value){
                    m_Internal.LocationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Message;
        [LocalData]
        public string Message
        {
            get { return m_Internal.Message; }
            set
            {
                if(m_Internal.Message!=value){
                    m_Internal.Message=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Message");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Severity;
        [LocalData]
        public int Severity
        {
            get { return m_Internal.Severity; }
            set
            {
                if(m_Internal.Severity!=value){
                    m_Internal.Severity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Severity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _AlertTime;
        [LocalData]
        public DateTime AlertTime
        {
            get { return m_Internal.AlertTime; }
            set
            {
                if(m_Internal.AlertTime!=value){
                    m_Internal.AlertTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AlertTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<TagAlert, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataTagMove : IWCFDataElement
    {
        [DataMember]
        public Guid TagMoveID { get; set; }
        [DataMember]
        public Guid TagID { get; set; }
        [DataMember]
        public Guid DeviceID { get; set; }
        [DataMember]
        public Guid LocationID { get; set; }
        [DataMember]
        public DateTime MoveTime { get; set; }
        [DataMember]
        public double SignalStrength { get; set; }

        public void Copy( DataTagMove _Item )
        {
             TagID = _Item.TagID;			
             DeviceID = _Item.DeviceID;			
             LocationID = _Item.LocationID;			
             MoveTime = _Item.MoveTime;			
             SignalStrength = _Item.SignalStrength;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new TagMove( this );
        }


    }


    /// <summary>
    /// A class which represents the TagMoves table in the BeverageMonitor Database.
    /// </summary>
    public partial class TagMove: BaseDataObject<DataTagMove>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<TagMove> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<TagMove>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<TagMove> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(TagMove item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                TagMove item=new TagMove();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<TagMove> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public TagMove()
        {
            m_Internal = new DataTagMove();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.TagMoveID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public TagMove( bool _CallOnCreated )
        {
            m_Internal = new DataTagMove();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public TagMove(string connectionString, string providerName) 
        {
            m_Internal = new DataTagMove();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.TagMoveID = Guid.NewGuid( );     
        }

        public TagMove( TagMove _Item )
        {
            m_Internal = new DataTagMove();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public TagMove( DataTagMove _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( TagMove _Item )
        {
            m_Internal.TagID = _Item.TagID;			
            m_Internal.DeviceID = _Item.DeviceID;			
            m_Internal.LocationID = _Item.LocationID;			
            m_Internal.MoveTime = _Item.MoveTime;			
            m_Internal.SignalStrength = _Item.SignalStrength;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.TagMoveID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                TagMove.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TagMove>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public TagMove(Expression<Func<TagMove, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<TagMove> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<TagMove> _repo;
            
            if(db.TestMode)
            {
                TagMove.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TagMove>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TagMove> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static TagMove SingleOrDefault(Expression<Func<TagMove, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static TagMove SingleOrDefault(Expression<Func<TagMove, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<TagMove> repo = GetRepo(connectionString,providerName);
            TagMove single = repo.SingleOrDefault<TagMove>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<TagMove, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<TagMove, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyTagMoveLoaded = false;
        protected static TagMove EmptyTagMoveMember = null;

        public static TagMove GetByID(Guid? value) 
        {
            TagMove rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static TagMove GetByID(Guid value) 
        {
            TagMove rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyTagMoveLoaded )
                    {
                        rc = EmptyTagMoveMember;
                    }
                    else
                    {
                        IsEmptyTagMoveLoaded = true;
                        rc = TagMove.Find( L => L.TagMoveID.Equals( value ) ).FirstOrDefault( );
                        EmptyTagMoveMember = rc;
                    }
                }
                else
                {
                    rc = TagMove.Find( L => L.TagMoveID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<TagMove> Find(Expression<Func<TagMove, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TagMove> Find(Expression<Func<TagMove, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<TagMove> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<TagMove> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TagMove> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TagMove> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TagMove> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<TagMove> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "TagMoveID";
        }

        public object KeyValue()
        {
            return this.TagMoveID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.TagID )
//			{
//				rc = this.TagID.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is TagMove)
            {
                TagMove compare=(TagMove)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.TagMoveID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.TagID.ToString();
        }

        public string DescriptorColumn() 
        {
            return "TagID";
        }

        public static string GetKeyColumn()
        {
            return "TagMoveID";
        }        

        public static string GetDescriptorColumn()
        {
            return "TagID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Device> DevicesItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Device.GetRepo();
                  return from items in repo.GetAll()
                       where items.DeviceID == m_Internal.DeviceID
                       select items;
            }
        }
        public IQueryable<Location> LocationsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Location.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        public IQueryable<Tag> TagsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Tag.GetRepo();
                  return from items in repo.GetAll()
                       where items.TagID == m_Internal.TagID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.TagMoveID;
            }
            set
            {
                m_Internal.TagMoveID = value;
            }
        }


//        Guid _TagMoveID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid TagMoveID
        {
            get { return m_Internal.TagMoveID; }
            set
            {
                if(m_Internal.TagMoveID!=value){
                    m_Internal.TagMoveID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagMoveID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _TagID;
        [LocalData]
        public Guid TagID
        {
            get { return m_Internal.TagID; }
            set
            {
                if(m_Internal.TagID!=value){
                    m_Internal.TagID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _DeviceID;
        [LocalData]
        public Guid DeviceID
        {
            get { return m_Internal.DeviceID; }
            set
            {
                if(m_Internal.DeviceID!=value){
                    m_Internal.DeviceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeviceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _LocationID;
        [LocalData]
        public Guid LocationID
        {
            get { return m_Internal.LocationID; }
            set
            {
                if(m_Internal.LocationID!=value){
                    m_Internal.LocationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _MoveTime;
        [LocalData]
        public DateTime MoveTime
        {
            get { return m_Internal.MoveTime; }
            set
            {
                if(m_Internal.MoveTime!=value){
                    m_Internal.MoveTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MoveTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _SignalStrength;
        [LocalData]
        public double SignalStrength
        {
            get { return m_Internal.SignalStrength; }
            set
            {
                if(m_Internal.SignalStrength!=value){
                    m_Internal.SignalStrength=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SignalStrength");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<TagMove, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataTag : IWCFDataElement
    {
        [DataMember]
        public Guid TagID { get; set; }
        [DataMember]
        public Guid LocationID { get; set; }
        [DataMember]
        public string TagNumber { get; set; }
        [DataMember]
        public string RawData { get; set; }
        [DataMember]
        public Guid? StandardNozzleID { get; set; }

        public void Copy( DataTag _Item )
        {
             LocationID = _Item.LocationID;			
             TagNumber = _Item.TagNumber;			
             RawData = _Item.RawData;			
             StandardNozzleID = _Item.StandardNozzleID;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new Tag( this );
        }


    }


    /// <summary>
    /// A class which represents the Tags table in the BeverageMonitor Database.
    /// </summary>
    public partial class Tag: BaseDataObject<DataTag>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<Tag> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<Tag>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<Tag> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(Tag item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Tag item=new Tag();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<Tag> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public Tag()
        {
            m_Internal = new DataTag();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.TagID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public Tag( bool _CallOnCreated )
        {
            m_Internal = new DataTag();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public Tag(string connectionString, string providerName) 
        {
            m_Internal = new DataTag();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.TagID = Guid.NewGuid( );     
        }

        public Tag( Tag _Item )
        {
            m_Internal = new DataTag();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public Tag( DataTag _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( Tag _Item )
        {
            m_Internal.LocationID = _Item.LocationID;			
            m_Internal.TagNumber = _Item.TagNumber;			
            m_Internal.RawData = _Item.RawData;			
            m_Internal.StandardNozzleID = _Item.StandardNozzleID;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.TagID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Tag.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Tag>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public Tag(Expression<Func<Tag, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<Tag> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<Tag> _repo;
            
            if(db.TestMode)
            {
                Tag.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Tag>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Tag> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Tag SingleOrDefault(Expression<Func<Tag, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static Tag SingleOrDefault(Expression<Func<Tag, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<Tag> repo = GetRepo(connectionString,providerName);
            Tag single = repo.SingleOrDefault<Tag>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<Tag, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<Tag, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyTagLoaded = false;
        protected static Tag EmptyTagMember = null;

        public static Tag GetByID(Guid? value) 
        {
            Tag rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static Tag GetByID(Guid value) 
        {
            Tag rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyTagLoaded )
                    {
                        rc = EmptyTagMember;
                    }
                    else
                    {
                        IsEmptyTagLoaded = true;
                        rc = Tag.Find( L => L.TagID.Equals( value ) ).FirstOrDefault( );
                        EmptyTagMember = rc;
                    }
                }
                else
                {
                    rc = Tag.Find( L => L.TagID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<Tag> Find(Expression<Func<Tag, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Tag> Find(Expression<Func<Tag, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<Tag> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<Tag> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Tag> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Tag> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Tag> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<Tag> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "TagID";
        }

        public object KeyValue()
        {
            return this.TagID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.TagNumber )
//			{
//				rc = this.TagNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is Tag)
            {
                Tag compare=(Tag)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.TagID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.TagNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "TagNumber";
        }

        public static string GetKeyColumn()
        {
            return "TagID";
        }        

        public static string GetDescriptorColumn()
        {
            return "TagNumber";
        }
        
        #region ' Foreign Keys '
        public IQueryable<ActivityLog> ActivityLogs
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.ActivityLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.TagID == m_Internal.TagID
                       select items;
            }
        }
        public IQueryable<Inventory> Inventories
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Inventory.GetRepo();
                  return from items in repo.GetAll()
                       where items.TagID == m_Internal.TagID
                       select items;
            }
        }
        public IQueryable<Pour> Pours
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Pour.GetRepo();
                  return from items in repo.GetAll()
                       where items.TagID == m_Internal.TagID
                       select items;
            }
        }
        public IQueryable<TagActivity> TagActivities
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.TagActivity.GetRepo();
                  return from items in repo.GetAll()
                       where items.TagID == m_Internal.TagID
                       select items;
            }
        }
        public IQueryable<TagAlert> TagAlerts
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.TagAlert.GetRepo();
                  return from items in repo.GetAll()
                       where items.TagID == m_Internal.TagID
                       select items;
            }
        }
        public IQueryable<TagMove> TagMoves
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.TagMove.GetRepo();
                  return from items in repo.GetAll()
                       where items.TagID == m_Internal.TagID
                       select items;
            }
        }
        public IQueryable<Location> LocationsItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Location.GetRepo();
                  return from items in repo.GetAll()
                       where items.LocationID == m_Internal.LocationID
                       select items;
            }
        }
        public IQueryable<StandardNozzle> StandardNozzlesItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.StandardNozzle.GetRepo();
                  return from items in repo.GetAll()
                       where items.StandardNozzleID == m_Internal.StandardNozzleID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.TagID;
            }
            set
            {
                m_Internal.TagID = value;
            }
        }


//        Guid _TagID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid TagID
        {
            get { return m_Internal.TagID; }
            set
            {
                if(m_Internal.TagID!=value){
                    m_Internal.TagID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _LocationID;
        [LocalData]
        public Guid LocationID
        {
            get { return m_Internal.LocationID; }
            set
            {
                if(m_Internal.LocationID!=value){
                    m_Internal.LocationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TagNumber;
        [LocalData]
        public string TagNumber
        {
            get { return m_Internal.TagNumber; }
            set
            {
                if(m_Internal.TagNumber!=value){
                    m_Internal.TagNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RawData;
        [LocalData]
        public string RawData
        {
            get { return m_Internal.RawData; }
            set
            {
                if(m_Internal.RawData!=value){
                    m_Internal.RawData=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RawData");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _StandardNozzleID;
        [LocalData]
        public Guid? StandardNozzleID
        {
            get { return m_Internal.StandardNozzleID; }
            set
            {
                if(m_Internal.StandardNozzleID!=value){
                    m_Internal.StandardNozzleID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StandardNozzleID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<Tag, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataTicketItemAlias : IWCFDataElement
    {
        [DataMember]
        public Guid TicketItemAliasID { get; set; }
        [DataMember]
        public Guid? RecipeID { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public Guid? PosUPC { get; set; }
        [DataMember]
        public decimal Price { get; set; }

        public void Copy( DataTicketItemAlias _Item )
        {
             RecipeID = _Item.RecipeID;			
             Description = _Item.Description;			
             PosUPC = _Item.PosUPC;			
             Price = _Item.Price;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new TicketItemAlias( this );
        }


    }


    /// <summary>
    /// A class which represents the TicketItemAliases table in the BeverageMonitor Database.
    /// </summary>
    public partial class TicketItemAlias: BaseDataObject<DataTicketItemAlias>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<TicketItemAlias> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<TicketItemAlias>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<TicketItemAlias> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(TicketItemAlias item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                TicketItemAlias item=new TicketItemAlias();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<TicketItemAlias> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public TicketItemAlias()
        {
            m_Internal = new DataTicketItemAlias();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.TicketItemAliasID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public TicketItemAlias( bool _CallOnCreated )
        {
            m_Internal = new DataTicketItemAlias();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public TicketItemAlias(string connectionString, string providerName) 
        {
            m_Internal = new DataTicketItemAlias();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.TicketItemAliasID = Guid.NewGuid( );     
        }

        public TicketItemAlias( TicketItemAlias _Item )
        {
            m_Internal = new DataTicketItemAlias();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public TicketItemAlias( DataTicketItemAlias _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( TicketItemAlias _Item )
        {
            m_Internal.RecipeID = _Item.RecipeID;			
            m_Internal.Description = _Item.Description;			
            m_Internal.PosUPC = _Item.PosUPC;			
            m_Internal.Price = _Item.Price;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.TicketItemAliasID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                TicketItemAlias.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TicketItemAlias>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public TicketItemAlias(Expression<Func<TicketItemAlias, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<TicketItemAlias> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<TicketItemAlias> _repo;
            
            if(db.TestMode)
            {
                TicketItemAlias.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TicketItemAlias>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TicketItemAlias> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static TicketItemAlias SingleOrDefault(Expression<Func<TicketItemAlias, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static TicketItemAlias SingleOrDefault(Expression<Func<TicketItemAlias, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<TicketItemAlias> repo = GetRepo(connectionString,providerName);
            TicketItemAlias single = repo.SingleOrDefault<TicketItemAlias>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<TicketItemAlias, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<TicketItemAlias, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyTicketItemAliasLoaded = false;
        protected static TicketItemAlias EmptyTicketItemAliasMember = null;

        public static TicketItemAlias GetByID(Guid? value) 
        {
            TicketItemAlias rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static TicketItemAlias GetByID(Guid value) 
        {
            TicketItemAlias rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyTicketItemAliasLoaded )
                    {
                        rc = EmptyTicketItemAliasMember;
                    }
                    else
                    {
                        IsEmptyTicketItemAliasLoaded = true;
                        rc = TicketItemAlias.Find( L => L.TicketItemAliasID.Equals( value ) ).FirstOrDefault( );
                        EmptyTicketItemAliasMember = rc;
                    }
                }
                else
                {
                    rc = TicketItemAlias.Find( L => L.TicketItemAliasID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<TicketItemAlias> Find(Expression<Func<TicketItemAlias, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TicketItemAlias> Find(Expression<Func<TicketItemAlias, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<TicketItemAlias> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<TicketItemAlias> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TicketItemAlias> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TicketItemAlias> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TicketItemAlias> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<TicketItemAlias> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "TicketItemAliasID";
        }

        public object KeyValue()
        {
            return this.TicketItemAliasID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Description )
//			{
//				rc = this.Description.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is TicketItemAlias)
            {
                TicketItemAlias compare=(TicketItemAlias)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.TicketItemAliasID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Description.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Description";
        }

        public static string GetKeyColumn()
        {
            return "TicketItemAliasID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Description";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Recipe> RecipeItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Recipe.GetRepo();
                  return from items in repo.GetAll()
                       where items.RecipeID == m_Internal.RecipeID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.TicketItemAliasID;
            }
            set
            {
                m_Internal.TicketItemAliasID = value;
            }
        }


//        Guid _TicketItemAliasID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid TicketItemAliasID
        {
            get { return m_Internal.TicketItemAliasID; }
            set
            {
                if(m_Internal.TicketItemAliasID!=value){
                    m_Internal.TicketItemAliasID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TicketItemAliasID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _RecipeID;
        [LocalData]
        public Guid? RecipeID
        {
            get { return m_Internal.RecipeID; }
            set
            {
                if(m_Internal.RecipeID!=value){
                    m_Internal.RecipeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecipeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _PosUPC;
        [LocalData]
        public Guid? PosUPC
        {
            get { return m_Internal.PosUPC; }
            set
            {
                if(m_Internal.PosUPC!=value){
                    m_Internal.PosUPC=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PosUPC");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _Price;
        [LocalData]
        public decimal Price
        {
            get { return m_Internal.Price; }
            set
            {
                if(m_Internal.Price!=value){
                    m_Internal.Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<TicketItemAlias, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataUPC : IWCFDataElement
    {
        [DataMember]
        public Guid UPCID { get; set; }
        [DataMember]
        public string ItemNumber { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public int Size { get; set; }
        [DataMember]
        public Guid SizeTypeID { get; set; }
        [DataMember]
        public Guid CategoryID { get; set; }
        [DataMember]
        public Guid RootCategoryID { get; set; }
        [DataMember]
        public int Quality { get; set; }
        [DataMember]
        public decimal? UnitPrice { get; set; }
        [DataMember]
        public Guid? StandardPriceID { get; set; }
        [DataMember]
        public Guid? StandardNozzleID { get; set; }
        [DataMember]
        public int MinimumParLevel { get; set; }
        [DataMember]
        public double PourModifier { get; set; }
        [DataMember]
        public bool AllowHalfPour { get; set; }
        [DataMember]
        public Guid? ChildUPCID { get; set; }
        [DataMember]
        public int? BottleCount { get; set; }
        [DataMember]
        public Guid ManufacturerID { get; set; }
        [DataMember]
        public string CustomID { get; set; }

        public void Copy( DataUPC _Item )
        {
             ItemNumber = _Item.ItemNumber;			
             Name = _Item.Name;			
             Size = _Item.Size;			
             SizeTypeID = _Item.SizeTypeID;			
             CategoryID = _Item.CategoryID;			
             RootCategoryID = _Item.RootCategoryID;			
             Quality = _Item.Quality;			
             UnitPrice = _Item.UnitPrice;			
             StandardPriceID = _Item.StandardPriceID;			
             StandardNozzleID = _Item.StandardNozzleID;			
             MinimumParLevel = _Item.MinimumParLevel;			
             PourModifier = _Item.PourModifier;			
             AllowHalfPour = _Item.AllowHalfPour;			
             ChildUPCID = _Item.ChildUPCID;			
             BottleCount = _Item.BottleCount;			
             ManufacturerID = _Item.ManufacturerID;			
             CustomID = _Item.CustomID;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new UPC( this );
        }


    }


    /// <summary>
    /// A class which represents the UPCs table in the BeverageMonitor Database.
    /// </summary>
    public partial class UPC: BaseDataObject<DataUPC>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<UPC> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<UPC>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<UPC> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(UPC item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                UPC item=new UPC();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<UPC> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public UPC()
        {
            m_Internal = new DataUPC();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.UPCID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public UPC( bool _CallOnCreated )
        {
            m_Internal = new DataUPC();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public UPC(string connectionString, string providerName) 
        {
            m_Internal = new DataUPC();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.UPCID = Guid.NewGuid( );     
        }

        public UPC( UPC _Item )
        {
            m_Internal = new DataUPC();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public UPC( DataUPC _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( UPC _Item )
        {
            m_Internal.ItemNumber = _Item.ItemNumber;			
            m_Internal.Name = _Item.Name;			
            m_Internal.Size = _Item.Size;			
            m_Internal.SizeTypeID = _Item.SizeTypeID;			
            m_Internal.CategoryID = _Item.CategoryID;			
            m_Internal.RootCategoryID = _Item.RootCategoryID;			
            m_Internal.Quality = _Item.Quality;			
            m_Internal.UnitPrice = _Item.UnitPrice;			
            m_Internal.StandardPriceID = _Item.StandardPriceID;			
            m_Internal.StandardNozzleID = _Item.StandardNozzleID;			
            m_Internal.MinimumParLevel = _Item.MinimumParLevel;			
            m_Internal.PourModifier = _Item.PourModifier;			
            m_Internal.AllowHalfPour = _Item.AllowHalfPour;			
            m_Internal.ChildUPCID = _Item.ChildUPCID;			
            m_Internal.BottleCount = _Item.BottleCount;			
            m_Internal.ManufacturerID = _Item.ManufacturerID;			
            m_Internal.CustomID = _Item.CustomID;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.UPCID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                UPC.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<UPC>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public UPC(Expression<Func<UPC, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<UPC> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<UPC> _repo;
            
            if(db.TestMode)
            {
                UPC.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<UPC>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<UPC> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static UPC SingleOrDefault(Expression<Func<UPC, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static UPC SingleOrDefault(Expression<Func<UPC, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<UPC> repo = GetRepo(connectionString,providerName);
            UPC single = repo.SingleOrDefault<UPC>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<UPC, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<UPC, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyUPCLoaded = false;
        protected static UPC EmptyUPCMember = null;

        public static UPC GetByID(Guid? value) 
        {
            UPC rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static UPC GetByID(Guid value) 
        {
            UPC rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyUPCLoaded )
                    {
                        rc = EmptyUPCMember;
                    }
                    else
                    {
                        IsEmptyUPCLoaded = true;
                        rc = UPC.Find( L => L.UPCID.Equals( value ) ).FirstOrDefault( );
                        EmptyUPCMember = rc;
                    }
                }
                else
                {
                    rc = UPC.Find( L => L.UPCID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<UPC> Find(Expression<Func<UPC, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<UPC> Find(Expression<Func<UPC, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<UPC> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<UPC> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<UPC> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<UPC> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<UPC> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<UPC> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "UPCID";
        }

        public object KeyValue()
        {
            return this.UPCID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.ItemNumber )
//			{
//				rc = this.ItemNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is UPC)
            {
                UPC compare=(UPC)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.UPCID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.ItemNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ItemNumber";
        }

        public static string GetKeyColumn()
        {
            return "UPCID";
        }        

        public static string GetDescriptorColumn()
        {
            return "ItemNumber";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Ingredient> Ingredients
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Ingredient.GetRepo();
                  return from items in repo.GetAll()
                       where items.UPCID == m_Internal.UPCID
                       select items;
            }
        }
        public IQueryable<Inventory> Inventories
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Inventory.GetRepo();
                  return from items in repo.GetAll()
                       where items.UPCID == m_Internal.UPCID
                       select items;
            }
        }
        public IQueryable<ParLevel> ParLevels
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.ParLevel.GetRepo();
                  return from items in repo.GetAll()
                       where items.UPCID == m_Internal.UPCID
                       select items;
            }
        }
        public IQueryable<Pour> Pours
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Pour.GetRepo();
                  return from items in repo.GetAll()
                       where items.UPCID == m_Internal.UPCID
                       select items;
            }
        }
        public IQueryable<Manufacturer> ManufacturersItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Manufacturer.GetRepo();
                  return from items in repo.GetAll()
                       where items.ManufacturerID == m_Internal.ManufacturerID
                       select items;
            }
        }
        public IQueryable<SizeType> SizeTypeItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.SizeType.GetRepo();
                  return from items in repo.GetAll()
                       where items.SizeTypeID == m_Internal.SizeTypeID
                       select items;
            }
        }
        public IQueryable<StandardNozzle> StandardNozzlesItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.StandardNozzle.GetRepo();
                  return from items in repo.GetAll()
                       where items.StandardNozzleID == m_Internal.StandardNozzleID
                       select items;
            }
        }
        public IQueryable<StandardPrice> StandardPricingItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.StandardPrice.GetRepo();
                  return from items in repo.GetAll()
                       where items.StandardPriceID == m_Internal.StandardPriceID
                       select items;
            }
        }
        public IQueryable<Category> SubCategoryItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Category.GetRepo();
                  return from items in repo.GetAll()
                       where items.CategoryID == m_Internal.CategoryID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.UPCID;
            }
            set
            {
                m_Internal.UPCID = value;
            }
        }


//        Guid _UPCID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid UPCID
        {
            get { return m_Internal.UPCID; }
            set
            {
                if(m_Internal.UPCID!=value){
                    m_Internal.UPCID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UPCID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ItemNumber;
        [LocalData]
        public string ItemNumber
        {
            get { return m_Internal.ItemNumber; }
            set
            {
                if(m_Internal.ItemNumber!=value){
                    m_Internal.ItemNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Size;
        [LocalData]
        public int Size
        {
            get { return m_Internal.Size; }
            set
            {
                if(m_Internal.Size!=value){
                    m_Internal.Size=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _SizeTypeID;
        [LocalData]
        public Guid SizeTypeID
        {
            get { return m_Internal.SizeTypeID; }
            set
            {
                if(m_Internal.SizeTypeID!=value){
                    m_Internal.SizeTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SizeTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _CategoryID;
        [LocalData]
        public Guid CategoryID
        {
            get { return m_Internal.CategoryID; }
            set
            {
                if(m_Internal.CategoryID!=value){
                    m_Internal.CategoryID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CategoryID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _RootCategoryID;
        [LocalData]
        public Guid RootCategoryID
        {
            get { return m_Internal.RootCategoryID; }
            set
            {
                if(m_Internal.RootCategoryID!=value){
                    m_Internal.RootCategoryID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RootCategoryID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Quality;
        [LocalData]
        public int Quality
        {
            get { return m_Internal.Quality; }
            set
            {
                if(m_Internal.Quality!=value){
                    m_Internal.Quality=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quality");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _UnitPrice;
        [LocalData]
        public decimal? UnitPrice
        {
            get { return m_Internal.UnitPrice; }
            set
            {
                if(m_Internal.UnitPrice!=value){
                    m_Internal.UnitPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UnitPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _StandardPriceID;
        [LocalData]
        public Guid? StandardPriceID
        {
            get { return m_Internal.StandardPriceID; }
            set
            {
                if(m_Internal.StandardPriceID!=value){
                    m_Internal.StandardPriceID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StandardPriceID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _StandardNozzleID;
        [LocalData]
        public Guid? StandardNozzleID
        {
            get { return m_Internal.StandardNozzleID; }
            set
            {
                if(m_Internal.StandardNozzleID!=value){
                    m_Internal.StandardNozzleID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StandardNozzleID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _MinimumParLevel;
        [LocalData]
        public int MinimumParLevel
        {
            get { return m_Internal.MinimumParLevel; }
            set
            {
                if(m_Internal.MinimumParLevel!=value){
                    m_Internal.MinimumParLevel=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinimumParLevel");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _PourModifier;
        [LocalData]
        public double PourModifier
        {
            get { return m_Internal.PourModifier; }
            set
            {
                if(m_Internal.PourModifier!=value){
                    m_Internal.PourModifier=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourModifier");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        bool _AllowHalfPour;
        [LocalData]
        public bool AllowHalfPour
        {
            get { return m_Internal.AllowHalfPour; }
            set
            {
                if(m_Internal.AllowHalfPour!=value){
                    m_Internal.AllowHalfPour=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowHalfPour");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _ChildUPCID;
        [LocalData]
        public Guid? ChildUPCID
        {
            get { return m_Internal.ChildUPCID; }
            set
            {
                if(m_Internal.ChildUPCID!=value){
                    m_Internal.ChildUPCID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ChildUPCID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _BottleCount;
        [LocalData]
        public int? BottleCount
        {
            get { return m_Internal.BottleCount; }
            set
            {
                if(m_Internal.BottleCount!=value){
                    m_Internal.BottleCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BottleCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _ManufacturerID;
        [LocalData]
        public Guid ManufacturerID
        {
            get { return m_Internal.ManufacturerID; }
            set
            {
                if(m_Internal.ManufacturerID!=value){
                    m_Internal.ManufacturerID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ManufacturerID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CustomID;
        [LocalData]
        public string CustomID
        {
            get { return m_Internal.CustomID; }
            set
            {
                if(m_Internal.CustomID!=value){
                    m_Internal.CustomID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<UPC, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataUser : IWCFDataElement
    {
        [DataMember]
        public Guid UserID { get; set; }
        [DataMember]
        public string UserName { get; set; }
        [DataMember]
        public string ProperName { get; set; }
        [DataMember]
        public string Password { get; set; }
        [DataMember]
        public string UserData { get; set; }

        public void Copy( DataUser _Item )
        {
             UserName = _Item.UserName;			
             ProperName = _Item.ProperName;			
             Password = _Item.Password;			
             UserData = _Item.UserData;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new User( this );
        }


    }


    /// <summary>
    /// A class which represents the Users table in the BeverageMonitor Database.
    /// </summary>
    public partial class User: BaseDataObject<DataUser>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<User> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<User>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<User> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(User item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                User item=new User();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<User> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public User()
        {
            m_Internal = new DataUser();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.UserID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public User( bool _CallOnCreated )
        {
            m_Internal = new DataUser();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public User(string connectionString, string providerName) 
        {
            m_Internal = new DataUser();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.UserID = Guid.NewGuid( );     
        }

        public User( User _Item )
        {
            m_Internal = new DataUser();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public User( DataUser _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( User _Item )
        {
            m_Internal.UserName = _Item.UserName;			
            m_Internal.ProperName = _Item.ProperName;			
            m_Internal.Password = _Item.Password;			
            m_Internal.UserData = _Item.UserData;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.UserID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                User.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<User>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public User(Expression<Func<User, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<User> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<User> _repo;
            
            if(db.TestMode)
            {
                User.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<User>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<User> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static User SingleOrDefault(Expression<Func<User, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static User SingleOrDefault(Expression<Func<User, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<User> repo = GetRepo(connectionString,providerName);
            User single = repo.SingleOrDefault<User>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<User, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<User, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyUserLoaded = false;
        protected static User EmptyUserMember = null;

        public static User GetByID(Guid? value) 
        {
            User rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static User GetByID(Guid value) 
        {
            User rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyUserLoaded )
                    {
                        rc = EmptyUserMember;
                    }
                    else
                    {
                        IsEmptyUserLoaded = true;
                        rc = User.Find( L => L.UserID.Equals( value ) ).FirstOrDefault( );
                        EmptyUserMember = rc;
                    }
                }
                else
                {
                    rc = User.Find( L => L.UserID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<User> Find(Expression<Func<User, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<User> Find(Expression<Func<User, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<User> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<User> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<User> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<User> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<User> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<User> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "UserID";
        }

        public object KeyValue()
        {
            return this.UserID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.UserName )
//			{
//				rc = this.UserName.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is User)
            {
                User compare=(User)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.UserID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.UserName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "UserName";
        }

        public static string GetKeyColumn()
        {
            return "UserID";
        }        

        public static string GetDescriptorColumn()
        {
            return "UserName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<UserSession> UserSessions
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UserSession.GetRepo();
                  return from items in repo.GetAll()
                       where items.UserID == m_Internal.UserID
                       select items;
            }
        }
        public IQueryable<UsersXGroup> UsersXGroups
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UsersXGroup.GetRepo();
                  return from items in repo.GetAll()
                       where items.UserID == m_Internal.UserID
                       select items;
            }
        }
        public IQueryable<UsersXOrganization> UsersXOrganizations
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.UsersXOrganization.GetRepo();
                  return from items in repo.GetAll()
                       where items.UserID == m_Internal.UserID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.UserID;
            }
            set
            {
                m_Internal.UserID = value;
            }
        }


//        Guid _UserID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid UserID
        {
            get { return m_Internal.UserID; }
            set
            {
                if(m_Internal.UserID!=value){
                    m_Internal.UserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _UserName;
        [LocalData]
        public string UserName
        {
            get { return m_Internal.UserName; }
            set
            {
                if(m_Internal.UserName!=value){
                    m_Internal.UserName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ProperName;
        [LocalData]
        public string ProperName
        {
            get { return m_Internal.ProperName; }
            set
            {
                if(m_Internal.ProperName!=value){
                    m_Internal.ProperName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProperName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Password;
        [LocalData]
        public string Password
        {
            get { return m_Internal.Password; }
            set
            {
                if(m_Internal.Password!=value){
                    m_Internal.Password=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Password");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _UserData;
        [LocalData]
        public string UserData
        {
            get { return m_Internal.UserData; }
            set
            {
                if(m_Internal.UserData!=value){
                    m_Internal.UserData=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserData");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<User, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataUserSession : IWCFDataElement
    {
        [DataMember]
        public Guid UserSessionID { get; set; }
        [DataMember]
        public Guid UserID { get; set; }
        [DataMember]
        public Guid SessionID { get; set; }

        public void Copy( DataUserSession _Item )
        {
             UserID = _Item.UserID;			
             SessionID = _Item.SessionID;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new UserSession( this );
        }


    }


    /// <summary>
    /// A class which represents the UserSessions table in the BeverageMonitor Database.
    /// </summary>
    public partial class UserSession: BaseDataObject<DataUserSession>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<UserSession> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<UserSession>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<UserSession> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(UserSession item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                UserSession item=new UserSession();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<UserSession> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public UserSession()
        {
            m_Internal = new DataUserSession();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.UserSessionID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public UserSession( bool _CallOnCreated )
        {
            m_Internal = new DataUserSession();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public UserSession(string connectionString, string providerName) 
        {
            m_Internal = new DataUserSession();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.UserSessionID = Guid.NewGuid( );     
        }

        public UserSession( UserSession _Item )
        {
            m_Internal = new DataUserSession();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public UserSession( DataUserSession _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( UserSession _Item )
        {
            m_Internal.UserID = _Item.UserID;			
            m_Internal.SessionID = _Item.SessionID;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.UserSessionID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                UserSession.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<UserSession>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public UserSession(Expression<Func<UserSession, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<UserSession> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<UserSession> _repo;
            
            if(db.TestMode)
            {
                UserSession.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<UserSession>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<UserSession> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static UserSession SingleOrDefault(Expression<Func<UserSession, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static UserSession SingleOrDefault(Expression<Func<UserSession, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<UserSession> repo = GetRepo(connectionString,providerName);
            UserSession single = repo.SingleOrDefault<UserSession>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<UserSession, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<UserSession, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyUserSessionLoaded = false;
        protected static UserSession EmptyUserSessionMember = null;

        public static UserSession GetByID(Guid? value) 
        {
            UserSession rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static UserSession GetByID(Guid value) 
        {
            UserSession rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyUserSessionLoaded )
                    {
                        rc = EmptyUserSessionMember;
                    }
                    else
                    {
                        IsEmptyUserSessionLoaded = true;
                        rc = UserSession.Find( L => L.UserSessionID.Equals( value ) ).FirstOrDefault( );
                        EmptyUserSessionMember = rc;
                    }
                }
                else
                {
                    rc = UserSession.Find( L => L.UserSessionID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<UserSession> Find(Expression<Func<UserSession, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<UserSession> Find(Expression<Func<UserSession, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<UserSession> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<UserSession> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<UserSession> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<UserSession> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<UserSession> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<UserSession> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "UserSessionID";
        }

        public object KeyValue()
        {
            return this.UserSessionID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.UserID )
//			{
//				rc = this.UserID.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is UserSession)
            {
                UserSession compare=(UserSession)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.UserSessionID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.UserID.ToString();
        }

        public string DescriptorColumn() 
        {
            return "UserID";
        }

        public static string GetKeyColumn()
        {
            return "UserSessionID";
        }        

        public static string GetDescriptorColumn()
        {
            return "UserID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<User> UsersItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.User.GetRepo();
                  return from items in repo.GetAll()
                       where items.UserID == m_Internal.UserID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.UserSessionID;
            }
            set
            {
                m_Internal.UserSessionID = value;
            }
        }


//        Guid _UserSessionID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid UserSessionID
        {
            get { return m_Internal.UserSessionID; }
            set
            {
                if(m_Internal.UserSessionID!=value){
                    m_Internal.UserSessionID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserSessionID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _UserID;
        [LocalData]
        public Guid UserID
        {
            get { return m_Internal.UserID; }
            set
            {
                if(m_Internal.UserID!=value){
                    m_Internal.UserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _SessionID;
        [LocalData]
        public Guid SessionID
        {
            get { return m_Internal.SessionID; }
            set
            {
                if(m_Internal.SessionID!=value){
                    m_Internal.SessionID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SessionID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<UserSession, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataUsersXGroup : IWCFDataElement
    {
        [DataMember]
        public Guid UserID { get; set; }
        [DataMember]
        public Guid GroupID { get; set; }

        public void Copy( DataUsersXGroup _Item )
        {
             UserID = _Item.UserID;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new UsersXGroup( this );
        }


    }


    /// <summary>
    /// A class which represents the UsersXGroups table in the BeverageMonitor Database.
    /// </summary>
    public partial class UsersXGroup: BaseDataObject<DataUsersXGroup>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<UsersXGroup> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<UsersXGroup>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<UsersXGroup> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(UsersXGroup item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                UsersXGroup item=new UsersXGroup();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<UsersXGroup> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public UsersXGroup()
        {
            m_Internal = new DataUsersXGroup();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.GroupID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public UsersXGroup( bool _CallOnCreated )
        {
            m_Internal = new DataUsersXGroup();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public UsersXGroup(string connectionString, string providerName) 
        {
            m_Internal = new DataUsersXGroup();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.GroupID = Guid.NewGuid( );     
        }

        public UsersXGroup( UsersXGroup _Item )
        {
            m_Internal = new DataUsersXGroup();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public UsersXGroup( DataUsersXGroup _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( UsersXGroup _Item )
        {
            m_Internal.UserID = _Item.UserID;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.GroupID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                UsersXGroup.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<UsersXGroup>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public UsersXGroup(Expression<Func<UsersXGroup, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<UsersXGroup> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<UsersXGroup> _repo;
            
            if(db.TestMode)
            {
                UsersXGroup.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<UsersXGroup>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<UsersXGroup> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static UsersXGroup SingleOrDefault(Expression<Func<UsersXGroup, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static UsersXGroup SingleOrDefault(Expression<Func<UsersXGroup, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<UsersXGroup> repo = GetRepo(connectionString,providerName);
            UsersXGroup single = repo.SingleOrDefault<UsersXGroup>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<UsersXGroup, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<UsersXGroup, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyUsersXGroupLoaded = false;
        protected static UsersXGroup EmptyUsersXGroupMember = null;

        public static UsersXGroup GetByID(Guid? value) 
        {
            UsersXGroup rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static UsersXGroup GetByID(Guid value) 
        {
            UsersXGroup rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyUsersXGroupLoaded )
                    {
                        rc = EmptyUsersXGroupMember;
                    }
                    else
                    {
                        IsEmptyUsersXGroupLoaded = true;
                        rc = UsersXGroup.Find( L => L.GroupID.Equals( value ) ).FirstOrDefault( );
                        EmptyUsersXGroupMember = rc;
                    }
                }
                else
                {
                    rc = UsersXGroup.Find( L => L.GroupID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<UsersXGroup> Find(Expression<Func<UsersXGroup, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<UsersXGroup> Find(Expression<Func<UsersXGroup, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<UsersXGroup> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<UsersXGroup> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<UsersXGroup> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<UsersXGroup> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<UsersXGroup> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<UsersXGroup> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "GroupID";
        }

        public object KeyValue()
        {
            return this.GroupID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.GroupID )
//			{
//				rc = this.GroupID.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is UsersXGroup)
            {
                UsersXGroup compare=(UsersXGroup)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.GroupID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.GroupID.ToString();
        }

        public string DescriptorColumn() 
        {
            return "GroupID";
        }

        public static string GetKeyColumn()
        {
            return "GroupID";
        }        

        public static string GetDescriptorColumn()
        {
            return "GroupID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Group> GroupItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Group.GetRepo();
                  return from items in repo.GetAll()
                       where items.GroupID == m_Internal.GroupID
                       select items;
            }
        }
        public IQueryable<User> UserItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.User.GetRepo();
                  return from items in repo.GetAll()
                       where items.UserID == m_Internal.UserID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.GroupID;
            }
            set
            {
                m_Internal.GroupID = value;
            }
        }


//        Guid _UserID;
        [LocalData]
        public Guid UserID
        {
            get { return m_Internal.UserID; }
            set
            {
                if(m_Internal.UserID!=value){
                    m_Internal.UserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _GroupID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid GroupID
        {
            get { return m_Internal.GroupID; }
            set
            {
                if(m_Internal.GroupID!=value){
                    m_Internal.GroupID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GroupID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<UsersXGroup, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DataUsersXOrganization : IWCFDataElement
    {
        [DataMember]
        public Guid UxOID { get; set; }
        [DataMember]
        public Guid UserID { get; set; }
        [DataMember]
        public Guid OrganizationID { get; set; }

        public void Copy( DataUsersXOrganization _Item )
        {
             UserID = _Item.UserID;			
             OrganizationID = _Item.OrganizationID;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new UsersXOrganization( this );
        }


    }


    /// <summary>
    /// A class which represents the UsersXOrganizations table in the BeverageMonitor Database.
    /// </summary>
    public partial class UsersXOrganization: BaseDataObject<DataUsersXOrganization>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<UsersXOrganization> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<UsersXOrganization>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<UsersXOrganization> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(UsersXOrganization item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                UsersXOrganization item=new UsersXOrganization();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<UsersXOrganization> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public UsersXOrganization()
        {
            m_Internal = new DataUsersXOrganization();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.UxOID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public UsersXOrganization( bool _CallOnCreated )
        {
            m_Internal = new DataUsersXOrganization();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public UsersXOrganization(string connectionString, string providerName) 
        {
            m_Internal = new DataUsersXOrganization();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.UxOID = Guid.NewGuid( );     
        }

        public UsersXOrganization( UsersXOrganization _Item )
        {
            m_Internal = new DataUsersXOrganization();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public UsersXOrganization( DataUsersXOrganization _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( UsersXOrganization _Item )
        {
            m_Internal.UserID = _Item.UserID;			
            m_Internal.OrganizationID = _Item.OrganizationID;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.UxOID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                UsersXOrganization.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<UsersXOrganization>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public UsersXOrganization(Expression<Func<UsersXOrganization, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<UsersXOrganization> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<UsersXOrganization> _repo;
            
            if(db.TestMode)
            {
                UsersXOrganization.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<UsersXOrganization>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<UsersXOrganization> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static UsersXOrganization SingleOrDefault(Expression<Func<UsersXOrganization, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static UsersXOrganization SingleOrDefault(Expression<Func<UsersXOrganization, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<UsersXOrganization> repo = GetRepo(connectionString,providerName);
            UsersXOrganization single = repo.SingleOrDefault<UsersXOrganization>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<UsersXOrganization, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<UsersXOrganization, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyUsersXOrganizationLoaded = false;
        protected static UsersXOrganization EmptyUsersXOrganizationMember = null;

        public static UsersXOrganization GetByID(Guid? value) 
        {
            UsersXOrganization rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static UsersXOrganization GetByID(Guid value) 
        {
            UsersXOrganization rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyUsersXOrganizationLoaded )
                    {
                        rc = EmptyUsersXOrganizationMember;
                    }
                    else
                    {
                        IsEmptyUsersXOrganizationLoaded = true;
                        rc = UsersXOrganization.Find( L => L.UxOID.Equals( value ) ).FirstOrDefault( );
                        EmptyUsersXOrganizationMember = rc;
                    }
                }
                else
                {
                    rc = UsersXOrganization.Find( L => L.UxOID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<UsersXOrganization> Find(Expression<Func<UsersXOrganization, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<UsersXOrganization> Find(Expression<Func<UsersXOrganization, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<UsersXOrganization> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<UsersXOrganization> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<UsersXOrganization> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<UsersXOrganization> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<UsersXOrganization> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<UsersXOrganization> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "UxOID";
        }

        public object KeyValue()
        {
            return this.UxOID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.UserID )
//			{
//				rc = this.UserID.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is UsersXOrganization)
            {
                UsersXOrganization compare=(UsersXOrganization)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.UxOID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.UserID.ToString();
        }

        public string DescriptorColumn() 
        {
            return "UserID";
        }

        public static string GetKeyColumn()
        {
            return "UxOID";
        }        

        public static string GetDescriptorColumn()
        {
            return "UserID";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Organization> OrganizationItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.Organization.GetRepo();
                  return from items in repo.GetAll()
                       where items.OrganizationID == m_Internal.OrganizationID
                       select items;
            }
        }
        public IQueryable<User> UsersItem
        {
            get
            {
                  var repo=Jaxis.Inventory.Data.User.GetRepo();
                  return from items in repo.GetAll()
                       where items.UserID == m_Internal.UserID
                       select items;
            }
        }
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.UxOID;
            }
            set
            {
                m_Internal.UxOID = value;
            }
        }


//        Guid _UxOID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid UxOID
        {
            get { return m_Internal.UxOID; }
            set
            {
                if(m_Internal.UxOID!=value){
                    m_Internal.UxOID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UxOID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _UserID;
        [LocalData]
        public Guid UserID
        {
            get { return m_Internal.UserID; }
            set
            {
                if(m_Internal.UserID!=value){
                    m_Internal.UserID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _OrganizationID;
        [LocalData]
        public Guid OrganizationID
        {
            get { return m_Internal.OrganizationID; }
            set
            {
                if(m_Internal.OrganizationID!=value){
                    m_Internal.OrganizationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrganizationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<UsersXOrganization, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatavwDefaultNozzleValue : IWCFDataElement
    {
        [DataMember]
        public string NozzleWidth { get; set; }
        [DataMember]
        public string NozzleLength { get; set; }
        [DataMember]
        public string NozzleShape { get; set; }

        public void Copy( DatavwDefaultNozzleValue _Item )
        {
             NozzleLength = _Item.NozzleLength;			
             NozzleShape = _Item.NozzleShape;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwDefaultNozzleValue( this );
        }


    }


    /// <summary>
    /// A class which represents the vwDefaultNozzleValues table in the BeverageMonitor Database.
    /// </summary>
    public partial class vwDefaultNozzleValue: BaseDataObject<DatavwDefaultNozzleValue>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwDefaultNozzleValue> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwDefaultNozzleValue>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwDefaultNozzleValue> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwDefaultNozzleValue item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwDefaultNozzleValue item=new vwDefaultNozzleValue();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<vwDefaultNozzleValue> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public vwDefaultNozzleValue()
        {
            m_Internal = new DatavwDefaultNozzleValue();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwDefaultNozzleValue( bool _CallOnCreated )
        {
            m_Internal = new DatavwDefaultNozzleValue();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwDefaultNozzleValue(string connectionString, string providerName) 
        {
            m_Internal = new DatavwDefaultNozzleValue();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public vwDefaultNozzleValue( vwDefaultNozzleValue _Item )
        {
            m_Internal = new DatavwDefaultNozzleValue();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public vwDefaultNozzleValue( DatavwDefaultNozzleValue _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( vwDefaultNozzleValue _Item )
        {
            m_Internal.NozzleLength = _Item.NozzleLength;			
            m_Internal.NozzleShape = _Item.NozzleShape;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwDefaultNozzleValue.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDefaultNozzleValue>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwDefaultNozzleValue(Expression<Func<vwDefaultNozzleValue, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwDefaultNozzleValue> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<vwDefaultNozzleValue> _repo;
            
            if(db.TestMode)
            {
                vwDefaultNozzleValue.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwDefaultNozzleValue>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwDefaultNozzleValue> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwDefaultNozzleValue SingleOrDefault(Expression<Func<vwDefaultNozzleValue, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwDefaultNozzleValue SingleOrDefault(Expression<Func<vwDefaultNozzleValue, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwDefaultNozzleValue> repo = GetRepo(connectionString,providerName);
            vwDefaultNozzleValue single = repo.SingleOrDefault<vwDefaultNozzleValue>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwDefaultNozzleValue, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwDefaultNozzleValue, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwDefaultNozzleValue GetByID(string value) 
        {
            return vwDefaultNozzleValue.Find( L => L.NozzleWidth.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwDefaultNozzleValue> Find(Expression<Func<vwDefaultNozzleValue, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwDefaultNozzleValue> Find(Expression<Func<vwDefaultNozzleValue, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwDefaultNozzleValue> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwDefaultNozzleValue> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwDefaultNozzleValue> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwDefaultNozzleValue> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwDefaultNozzleValue> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwDefaultNozzleValue> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "NozzleWidth";
        }

        public object KeyValue()
        {
            return this.NozzleWidth;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.NozzleWidth )
//			{
//				rc = this.NozzleWidth.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwDefaultNozzleValue)
            {
                vwDefaultNozzleValue compare=(vwDefaultNozzleValue)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.NozzleWidth.ToString();
        }

        public string DescriptorColumn() 
        {
            return "NozzleWidth";
        }

        public static string GetKeyColumn()
        {
            return "NozzleWidth";
        }        

        public static string GetDescriptorColumn()
        {
            return "NozzleWidth";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _NozzleWidth;
        [SubSonicPrimaryKey]
        [LocalData]
        public string NozzleWidth
        {
            get { return m_Internal.NozzleWidth; }
            set
            {
                if(m_Internal.NozzleWidth!=value){
                    m_Internal.NozzleWidth=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NozzleWidth");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _NozzleLength;
        [LocalData]
        public string NozzleLength
        {
            get { return m_Internal.NozzleLength; }
            set
            {
                if(m_Internal.NozzleLength!=value){
                    m_Internal.NozzleLength=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NozzleLength");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _NozzleShape;
        [LocalData]
        public string NozzleShape
        {
            get { return m_Internal.NozzleShape; }
            set
            {
                if(m_Internal.NozzleShape!=value){
                    m_Internal.NozzleShape=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NozzleShape");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwDefaultNozzleValue, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatavwFullBottleInventory : IWCFDataElement
    {
        [DataMember]
        public string ItemNumber { get; set; }
        [DataMember]
        public string UPCName { get; set; }
        [DataMember]
        public int? BottleCount { get; set; }
        [DataMember]
        public int? TaggedBottles { get; set; }
        [DataMember]
        public double? Quantity { get; set; }
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public decimal? BottleCost { get; set; }
        [DataMember]
        public double? TotalCost { get; set; }
        [DataMember]
        public string Category { get; set; }

        public void Copy( DatavwFullBottleInventory _Item )
        {
             UPCName = _Item.UPCName;			
             BottleCount = _Item.BottleCount;			
             TaggedBottles = _Item.TaggedBottles;			
             Quantity = _Item.Quantity;			
             Location = _Item.Location;			
             BottleCost = _Item.BottleCost;			
             TotalCost = _Item.TotalCost;			
             Category = _Item.Category;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwFullBottleInventory( this );
        }


    }


    /// <summary>
    /// A class which represents the vwFullBottleInventory table in the BeverageMonitor Database.
    /// </summary>
    public partial class vwFullBottleInventory: BaseDataObject<DatavwFullBottleInventory>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwFullBottleInventory> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwFullBottleInventory>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwFullBottleInventory> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwFullBottleInventory item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwFullBottleInventory item=new vwFullBottleInventory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<vwFullBottleInventory> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public vwFullBottleInventory()
        {
            m_Internal = new DatavwFullBottleInventory();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwFullBottleInventory( bool _CallOnCreated )
        {
            m_Internal = new DatavwFullBottleInventory();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwFullBottleInventory(string connectionString, string providerName) 
        {
            m_Internal = new DatavwFullBottleInventory();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public vwFullBottleInventory( vwFullBottleInventory _Item )
        {
            m_Internal = new DatavwFullBottleInventory();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public vwFullBottleInventory( DatavwFullBottleInventory _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( vwFullBottleInventory _Item )
        {
            m_Internal.UPCName = _Item.UPCName;			
            m_Internal.BottleCount = _Item.BottleCount;			
            m_Internal.TaggedBottles = _Item.TaggedBottles;			
            m_Internal.Quantity = _Item.Quantity;			
            m_Internal.Location = _Item.Location;			
            m_Internal.BottleCost = _Item.BottleCost;			
            m_Internal.TotalCost = _Item.TotalCost;			
            m_Internal.Category = _Item.Category;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwFullBottleInventory.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwFullBottleInventory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwFullBottleInventory(Expression<Func<vwFullBottleInventory, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwFullBottleInventory> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<vwFullBottleInventory> _repo;
            
            if(db.TestMode)
            {
                vwFullBottleInventory.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwFullBottleInventory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwFullBottleInventory> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwFullBottleInventory SingleOrDefault(Expression<Func<vwFullBottleInventory, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwFullBottleInventory SingleOrDefault(Expression<Func<vwFullBottleInventory, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwFullBottleInventory> repo = GetRepo(connectionString,providerName);
            vwFullBottleInventory single = repo.SingleOrDefault<vwFullBottleInventory>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwFullBottleInventory, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwFullBottleInventory, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwFullBottleInventory GetByID(string value) 
        {
            return vwFullBottleInventory.Find( L => L.ItemNumber.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwFullBottleInventory> Find(Expression<Func<vwFullBottleInventory, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwFullBottleInventory> Find(Expression<Func<vwFullBottleInventory, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwFullBottleInventory> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwFullBottleInventory> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwFullBottleInventory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwFullBottleInventory> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwFullBottleInventory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwFullBottleInventory> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "ItemNumber";
        }

        public object KeyValue()
        {
            return this.ItemNumber;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.ItemNumber )
//			{
//				rc = this.ItemNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwFullBottleInventory)
            {
                vwFullBottleInventory compare=(vwFullBottleInventory)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.ItemNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ItemNumber";
        }

        public static string GetKeyColumn()
        {
            return "ItemNumber";
        }        

        public static string GetDescriptorColumn()
        {
            return "ItemNumber";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _ItemNumber;
        [SubSonicPrimaryKey]
        [LocalData]
        public string ItemNumber
        {
            get { return m_Internal.ItemNumber; }
            set
            {
                if(m_Internal.ItemNumber!=value){
                    m_Internal.ItemNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _UPCName;
        [LocalData]
        public string UPCName
        {
            get { return m_Internal.UPCName; }
            set
            {
                if(m_Internal.UPCName!=value){
                    m_Internal.UPCName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UPCName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _BottleCount;
        [LocalData]
        public int? BottleCount
        {
            get { return m_Internal.BottleCount; }
            set
            {
                if(m_Internal.BottleCount!=value){
                    m_Internal.BottleCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BottleCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TaggedBottles;
        [LocalData]
        public int? TaggedBottles
        {
            get { return m_Internal.TaggedBottles; }
            set
            {
                if(m_Internal.TaggedBottles!=value){
                    m_Internal.TaggedBottles=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TaggedBottles");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _Quantity;
        [LocalData]
        public double? Quantity
        {
            get { return m_Internal.Quantity; }
            set
            {
                if(m_Internal.Quantity!=value){
                    m_Internal.Quantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Location;
        [LocalData]
        public string Location
        {
            get { return m_Internal.Location; }
            set
            {
                if(m_Internal.Location!=value){
                    m_Internal.Location=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Location");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _BottleCost;
        [LocalData]
        public decimal? BottleCost
        {
            get { return m_Internal.BottleCost; }
            set
            {
                if(m_Internal.BottleCost!=value){
                    m_Internal.BottleCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BottleCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _TotalCost;
        [LocalData]
        public double? TotalCost
        {
            get { return m_Internal.TotalCost; }
            set
            {
                if(m_Internal.TotalCost!=value){
                    m_Internal.TotalCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Category;
        [LocalData]
        public string Category
        {
            get { return m_Internal.Category; }
            set
            {
                if(m_Internal.Category!=value){
                    m_Internal.Category=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwFullBottleInventory, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatavwInventoryItem : IWCFDataElement
    {
        [DataMember]
        public Guid InventoryItemID { get; set; }
        [DataMember]
        public string ItemNumber { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public Guid UPCID { get; set; }
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public Guid LocationID { get; set; }
        [DataMember]
        public string CustomID { get; set; }
        [DataMember]
        public int? TaggedQuantity { get; set; }
        [DataMember]
        public int? StockQuantity { get; set; }
        [DataMember]
        public int? TotalQuantity { get; set; }
        [DataMember]
        public decimal? TotalCost { get; set; }
        [DataMember]
        public double? ParBottleCount { get; set; }

        public void Copy( DatavwInventoryItem _Item )
        {
             ItemNumber = _Item.ItemNumber;			
             Name = _Item.Name;			
             UPCID = _Item.UPCID;			
             LocationName = _Item.LocationName;			
             LocationID = _Item.LocationID;			
             CustomID = _Item.CustomID;			
             TaggedQuantity = _Item.TaggedQuantity;			
             StockQuantity = _Item.StockQuantity;			
             TotalQuantity = _Item.TotalQuantity;			
             TotalCost = _Item.TotalCost;			
             ParBottleCount = _Item.ParBottleCount;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwInventoryItem( this );
        }


    }


    /// <summary>
    /// A class which represents the vwInventoryItems table in the BeverageMonitor Database.
    /// </summary>
    public partial class vwInventoryItem: BaseDataObject<DatavwInventoryItem>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwInventoryItem> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwInventoryItem>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwInventoryItem> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwInventoryItem item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwInventoryItem item=new vwInventoryItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<vwInventoryItem> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public vwInventoryItem()
        {
            m_Internal = new DatavwInventoryItem();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.InventoryItemID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwInventoryItem( bool _CallOnCreated )
        {
            m_Internal = new DatavwInventoryItem();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwInventoryItem(string connectionString, string providerName) 
        {
            m_Internal = new DatavwInventoryItem();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.InventoryItemID = Guid.NewGuid( );     
        }

        public vwInventoryItem( vwInventoryItem _Item )
        {
            m_Internal = new DatavwInventoryItem();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public vwInventoryItem( DatavwInventoryItem _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( vwInventoryItem _Item )
        {
            m_Internal.ItemNumber = _Item.ItemNumber;			
            m_Internal.Name = _Item.Name;			
            m_Internal.UPCID = _Item.UPCID;			
            m_Internal.LocationName = _Item.LocationName;			
            m_Internal.LocationID = _Item.LocationID;			
            m_Internal.CustomID = _Item.CustomID;			
            m_Internal.TaggedQuantity = _Item.TaggedQuantity;			
            m_Internal.StockQuantity = _Item.StockQuantity;			
            m_Internal.TotalQuantity = _Item.TotalQuantity;			
            m_Internal.TotalCost = _Item.TotalCost;			
            m_Internal.ParBottleCount = _Item.ParBottleCount;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.InventoryItemID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwInventoryItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwInventoryItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwInventoryItem(Expression<Func<vwInventoryItem, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwInventoryItem> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<vwInventoryItem> _repo;
            
            if(db.TestMode)
            {
                vwInventoryItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwInventoryItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwInventoryItem> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwInventoryItem SingleOrDefault(Expression<Func<vwInventoryItem, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwInventoryItem SingleOrDefault(Expression<Func<vwInventoryItem, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwInventoryItem> repo = GetRepo(connectionString,providerName);
            vwInventoryItem single = repo.SingleOrDefault<vwInventoryItem>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwInventoryItem, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwInventoryItem, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyvwInventoryItemLoaded = false;
        protected static vwInventoryItem EmptyvwInventoryItemMember = null;

        public static vwInventoryItem GetByID(Guid? value) 
        {
            vwInventoryItem rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static vwInventoryItem GetByID(Guid value) 
        {
            vwInventoryItem rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyvwInventoryItemLoaded )
                    {
                        rc = EmptyvwInventoryItemMember;
                    }
                    else
                    {
                        IsEmptyvwInventoryItemLoaded = true;
                        rc = vwInventoryItem.Find( L => L.InventoryItemID.Equals( value ) ).FirstOrDefault( );
                        EmptyvwInventoryItemMember = rc;
                    }
                }
                else
                {
                    rc = vwInventoryItem.Find( L => L.InventoryItemID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<vwInventoryItem> Find(Expression<Func<vwInventoryItem, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwInventoryItem> Find(Expression<Func<vwInventoryItem, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwInventoryItem> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwInventoryItem> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwInventoryItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwInventoryItem> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwInventoryItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwInventoryItem> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "InventoryItemID";
        }

        public object KeyValue()
        {
            return this.InventoryItemID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.ItemNumber )
//			{
//				rc = this.ItemNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwInventoryItem)
            {
                vwInventoryItem compare=(vwInventoryItem)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.InventoryItemID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.ItemNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ItemNumber";
        }

        public static string GetKeyColumn()
        {
            return "InventoryItemID";
        }        

        public static string GetDescriptorColumn()
        {
            return "ItemNumber";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.InventoryItemID;
            }
            set
            {
                m_Internal.InventoryItemID = value;
            }
        }


//        Guid? _InventoryItemID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid InventoryItemID
        {
            get { return m_Internal.InventoryItemID; }
            set
            {
                if(m_Internal.InventoryItemID!=value){
                    m_Internal.InventoryItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InventoryItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ItemNumber;
        [LocalData]
        public string ItemNumber
        {
            get { return m_Internal.ItemNumber; }
            set
            {
                if(m_Internal.ItemNumber!=value){
                    m_Internal.ItemNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _UPCID;
        [LocalData]
        public Guid UPCID
        {
            get { return m_Internal.UPCID; }
            set
            {
                if(m_Internal.UPCID!=value){
                    m_Internal.UPCID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UPCID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _LocationName;
        [LocalData]
        public string LocationName
        {
            get { return m_Internal.LocationName; }
            set
            {
                if(m_Internal.LocationName!=value){
                    m_Internal.LocationName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _LocationID;
        [LocalData]
        public Guid LocationID
        {
            get { return m_Internal.LocationID; }
            set
            {
                if(m_Internal.LocationID!=value){
                    m_Internal.LocationID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocationID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CustomID;
        [LocalData]
        public string CustomID
        {
            get { return m_Internal.CustomID; }
            set
            {
                if(m_Internal.CustomID!=value){
                    m_Internal.CustomID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TaggedQuantity;
        [LocalData]
        public int? TaggedQuantity
        {
            get { return m_Internal.TaggedQuantity; }
            set
            {
                if(m_Internal.TaggedQuantity!=value){
                    m_Internal.TaggedQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TaggedQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _StockQuantity;
        [LocalData]
        public int? StockQuantity
        {
            get { return m_Internal.StockQuantity; }
            set
            {
                if(m_Internal.StockQuantity!=value){
                    m_Internal.StockQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StockQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _TotalQuantity;
        [LocalData]
        public int? TotalQuantity
        {
            get { return m_Internal.TotalQuantity; }
            set
            {
                if(m_Internal.TotalQuantity!=value){
                    m_Internal.TotalQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _TotalCost;
        [LocalData]
        public decimal? TotalCost
        {
            get { return m_Internal.TotalCost; }
            set
            {
                if(m_Internal.TotalCost!=value){
                    m_Internal.TotalCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _ParBottleCount;
        [LocalData]
        public double? ParBottleCount
        {
            get { return m_Internal.ParBottleCount; }
            set
            {
                if(m_Internal.ParBottleCount!=value){
                    m_Internal.ParBottleCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParBottleCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwInventoryItem, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatavwManufacturer : IWCFDataElement
    {
        [DataMember]
        public Guid ManufacturerID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public Guid CategoryID { get; set; }
        [DataMember]
        public Guid RootCategoryID { get; set; }

        public void Copy( DatavwManufacturer _Item )
        {
             Name = _Item.Name;			
             CategoryID = _Item.CategoryID;			
             RootCategoryID = _Item.RootCategoryID;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwManufacturer( this );
        }


    }


    /// <summary>
    /// A class which represents the vwManufacturers table in the BeverageMonitor Database.
    /// </summary>
    public partial class vwManufacturer: BaseDataObject<DatavwManufacturer>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwManufacturer> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwManufacturer>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwManufacturer> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwManufacturer item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwManufacturer item=new vwManufacturer();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<vwManufacturer> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public vwManufacturer()
        {
            m_Internal = new DatavwManufacturer();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.ManufacturerID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwManufacturer( bool _CallOnCreated )
        {
            m_Internal = new DatavwManufacturer();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwManufacturer(string connectionString, string providerName) 
        {
            m_Internal = new DatavwManufacturer();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.ManufacturerID = Guid.NewGuid( );     
        }

        public vwManufacturer( vwManufacturer _Item )
        {
            m_Internal = new DatavwManufacturer();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public vwManufacturer( DatavwManufacturer _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( vwManufacturer _Item )
        {
            m_Internal.Name = _Item.Name;			
            m_Internal.CategoryID = _Item.CategoryID;			
            m_Internal.RootCategoryID = _Item.RootCategoryID;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.ManufacturerID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwManufacturer.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwManufacturer>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwManufacturer(Expression<Func<vwManufacturer, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwManufacturer> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<vwManufacturer> _repo;
            
            if(db.TestMode)
            {
                vwManufacturer.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwManufacturer>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwManufacturer> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwManufacturer SingleOrDefault(Expression<Func<vwManufacturer, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwManufacturer SingleOrDefault(Expression<Func<vwManufacturer, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwManufacturer> repo = GetRepo(connectionString,providerName);
            vwManufacturer single = repo.SingleOrDefault<vwManufacturer>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwManufacturer, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwManufacturer, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyvwManufacturerLoaded = false;
        protected static vwManufacturer EmptyvwManufacturerMember = null;

        public static vwManufacturer GetByID(Guid? value) 
        {
            vwManufacturer rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static vwManufacturer GetByID(Guid value) 
        {
            vwManufacturer rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyvwManufacturerLoaded )
                    {
                        rc = EmptyvwManufacturerMember;
                    }
                    else
                    {
                        IsEmptyvwManufacturerLoaded = true;
                        rc = vwManufacturer.Find( L => L.ManufacturerID.Equals( value ) ).FirstOrDefault( );
                        EmptyvwManufacturerMember = rc;
                    }
                }
                else
                {
                    rc = vwManufacturer.Find( L => L.ManufacturerID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<vwManufacturer> Find(Expression<Func<vwManufacturer, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwManufacturer> Find(Expression<Func<vwManufacturer, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwManufacturer> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwManufacturer> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwManufacturer> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwManufacturer> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwManufacturer> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwManufacturer> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "ManufacturerID";
        }

        public object KeyValue()
        {
            return this.ManufacturerID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Name )
//			{
//				rc = this.Name.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwManufacturer)
            {
                vwManufacturer compare=(vwManufacturer)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.ManufacturerID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.Name.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Name";
        }

        public static string GetKeyColumn()
        {
            return "ManufacturerID";
        }        

        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.ManufacturerID;
            }
            set
            {
                m_Internal.ManufacturerID = value;
            }
        }


//        Guid _ManufacturerID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid ManufacturerID
        {
            get { return m_Internal.ManufacturerID; }
            set
            {
                if(m_Internal.ManufacturerID!=value){
                    m_Internal.ManufacturerID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ManufacturerID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _CategoryID;
        [LocalData]
        public Guid CategoryID
        {
            get { return m_Internal.CategoryID; }
            set
            {
                if(m_Internal.CategoryID!=value){
                    m_Internal.CategoryID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CategoryID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _RootCategoryID;
        [LocalData]
        public Guid RootCategoryID
        {
            get { return m_Internal.RootCategoryID; }
            set
            {
                if(m_Internal.RootCategoryID!=value){
                    m_Internal.RootCategoryID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RootCategoryID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwManufacturer, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatavwParCount : IWCFDataElement
    {
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public string Category { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Manufacturer { get; set; }
        [DataMember]
        public double ParLevel { get; set; }
        [DataMember]
        public int? BottleCount { get; set; }

        public void Copy( DatavwParCount _Item )
        {
             Type = _Item.Type;			
             Category = _Item.Category;			
             Name = _Item.Name;			
             Manufacturer = _Item.Manufacturer;			
             ParLevel = _Item.ParLevel;			
             BottleCount = _Item.BottleCount;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwParCount( this );
        }


    }


    /// <summary>
    /// A class which represents the vwParCounts table in the BeverageMonitor Database.
    /// </summary>
    public partial class vwParCount: BaseDataObject<DatavwParCount>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwParCount> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwParCount>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwParCount> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwParCount item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwParCount item=new vwParCount();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<vwParCount> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public vwParCount()
        {
            m_Internal = new DatavwParCount();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwParCount( bool _CallOnCreated )
        {
            m_Internal = new DatavwParCount();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwParCount(string connectionString, string providerName) 
        {
            m_Internal = new DatavwParCount();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public vwParCount( vwParCount _Item )
        {
            m_Internal = new DatavwParCount();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public vwParCount( DatavwParCount _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( vwParCount _Item )
        {
            m_Internal.Type = _Item.Type;			
            m_Internal.Category = _Item.Category;			
            m_Internal.Name = _Item.Name;			
            m_Internal.Manufacturer = _Item.Manufacturer;			
            m_Internal.ParLevel = _Item.ParLevel;			
            m_Internal.BottleCount = _Item.BottleCount;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwParCount.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwParCount>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwParCount(Expression<Func<vwParCount, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwParCount> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<vwParCount> _repo;
            
            if(db.TestMode)
            {
                vwParCount.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwParCount>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwParCount> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwParCount SingleOrDefault(Expression<Func<vwParCount, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwParCount SingleOrDefault(Expression<Func<vwParCount, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwParCount> repo = GetRepo(connectionString,providerName);
            vwParCount single = repo.SingleOrDefault<vwParCount>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwParCount, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwParCount, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwParCount GetByID(string value) 
        {
            return vwParCount.Find( L => L.Location.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwParCount> Find(Expression<Func<vwParCount, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwParCount> Find(Expression<Func<vwParCount, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwParCount> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwParCount> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwParCount> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwParCount> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwParCount> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwParCount> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Location";
        }

        public object KeyValue()
        {
            return this.Location;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Location )
//			{
//				rc = this.Location.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwParCount)
            {
                vwParCount compare=(vwParCount)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Location.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Location";
        }

        public static string GetKeyColumn()
        {
            return "Location";
        }        

        public static string GetDescriptorColumn()
        {
            return "Location";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Location;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Location
        {
            get { return m_Internal.Location; }
            set
            {
                if(m_Internal.Location!=value){
                    m_Internal.Location=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Location");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Type;
        [LocalData]
        public string Type
        {
            get { return m_Internal.Type; }
            set
            {
                if(m_Internal.Type!=value){
                    m_Internal.Type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Category;
        [LocalData]
        public string Category
        {
            get { return m_Internal.Category; }
            set
            {
                if(m_Internal.Category!=value){
                    m_Internal.Category=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Manufacturer;
        [LocalData]
        public string Manufacturer
        {
            get { return m_Internal.Manufacturer; }
            set
            {
                if(m_Internal.Manufacturer!=value){
                    m_Internal.Manufacturer=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Manufacturer");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _ParLevel;
        [LocalData]
        public double ParLevel
        {
            get { return m_Internal.ParLevel; }
            set
            {
                if(m_Internal.ParLevel!=value){
                    m_Internal.ParLevel=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParLevel");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _BottleCount;
        [LocalData]
        public int? BottleCount
        {
            get { return m_Internal.BottleCount; }
            set
            {
                if(m_Internal.BottleCount!=value){
                    m_Internal.BottleCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BottleCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwParCount, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatavwParLevelIssue : IWCFDataElement
    {
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public string Category { get; set; }
        [DataMember]
        public string UPCName { get; set; }
        [DataMember]
        public string Manufacturer { get; set; }
        [DataMember]
        public double ParLevel { get; set; }
        [DataMember]
        public int? BottleCount { get; set; }
        [DataMember]
        public string OverUnder { get; set; }
        [DataMember]
        public double? OffBy { get; set; }

        public void Copy( DatavwParLevelIssue _Item )
        {
             Type = _Item.Type;			
             Category = _Item.Category;			
             UPCName = _Item.UPCName;			
             Manufacturer = _Item.Manufacturer;			
             ParLevel = _Item.ParLevel;			
             BottleCount = _Item.BottleCount;			
             OverUnder = _Item.OverUnder;			
             OffBy = _Item.OffBy;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwParLevelIssue( this );
        }


    }


    /// <summary>
    /// A class which represents the vwParLevelIssues table in the BeverageMonitor Database.
    /// </summary>
    public partial class vwParLevelIssue: BaseDataObject<DatavwParLevelIssue>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwParLevelIssue> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwParLevelIssue>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwParLevelIssue> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwParLevelIssue item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwParLevelIssue item=new vwParLevelIssue();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<vwParLevelIssue> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public vwParLevelIssue()
        {
            m_Internal = new DatavwParLevelIssue();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwParLevelIssue( bool _CallOnCreated )
        {
            m_Internal = new DatavwParLevelIssue();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwParLevelIssue(string connectionString, string providerName) 
        {
            m_Internal = new DatavwParLevelIssue();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public vwParLevelIssue( vwParLevelIssue _Item )
        {
            m_Internal = new DatavwParLevelIssue();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public vwParLevelIssue( DatavwParLevelIssue _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( vwParLevelIssue _Item )
        {
            m_Internal.Type = _Item.Type;			
            m_Internal.Category = _Item.Category;			
            m_Internal.UPCName = _Item.UPCName;			
            m_Internal.Manufacturer = _Item.Manufacturer;			
            m_Internal.ParLevel = _Item.ParLevel;			
            m_Internal.BottleCount = _Item.BottleCount;			
            m_Internal.OverUnder = _Item.OverUnder;			
            m_Internal.OffBy = _Item.OffBy;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwParLevelIssue.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwParLevelIssue>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwParLevelIssue(Expression<Func<vwParLevelIssue, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwParLevelIssue> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<vwParLevelIssue> _repo;
            
            if(db.TestMode)
            {
                vwParLevelIssue.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwParLevelIssue>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwParLevelIssue> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwParLevelIssue SingleOrDefault(Expression<Func<vwParLevelIssue, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwParLevelIssue SingleOrDefault(Expression<Func<vwParLevelIssue, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwParLevelIssue> repo = GetRepo(connectionString,providerName);
            vwParLevelIssue single = repo.SingleOrDefault<vwParLevelIssue>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwParLevelIssue, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwParLevelIssue, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwParLevelIssue GetByID(string value) 
        {
            return vwParLevelIssue.Find( L => L.Location.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwParLevelIssue> Find(Expression<Func<vwParLevelIssue, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwParLevelIssue> Find(Expression<Func<vwParLevelIssue, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwParLevelIssue> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwParLevelIssue> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwParLevelIssue> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwParLevelIssue> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwParLevelIssue> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwParLevelIssue> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "Location";
        }

        public object KeyValue()
        {
            return this.Location;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.Location )
//			{
//				rc = this.Location.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwParLevelIssue)
            {
                vwParLevelIssue compare=(vwParLevelIssue)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.Location.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Location";
        }

        public static string GetKeyColumn()
        {
            return "Location";
        }        

        public static string GetDescriptorColumn()
        {
            return "Location";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _Location;
        [SubSonicPrimaryKey]
        [LocalData]
        public string Location
        {
            get { return m_Internal.Location; }
            set
            {
                if(m_Internal.Location!=value){
                    m_Internal.Location=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Location");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Type;
        [LocalData]
        public string Type
        {
            get { return m_Internal.Type; }
            set
            {
                if(m_Internal.Type!=value){
                    m_Internal.Type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Category;
        [LocalData]
        public string Category
        {
            get { return m_Internal.Category; }
            set
            {
                if(m_Internal.Category!=value){
                    m_Internal.Category=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _UPCName;
        [LocalData]
        public string UPCName
        {
            get { return m_Internal.UPCName; }
            set
            {
                if(m_Internal.UPCName!=value){
                    m_Internal.UPCName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UPCName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Manufacturer;
        [LocalData]
        public string Manufacturer
        {
            get { return m_Internal.Manufacturer; }
            set
            {
                if(m_Internal.Manufacturer!=value){
                    m_Internal.Manufacturer=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Manufacturer");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _ParLevel;
        [LocalData]
        public double ParLevel
        {
            get { return m_Internal.ParLevel; }
            set
            {
                if(m_Internal.ParLevel!=value){
                    m_Internal.ParLevel=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParLevel");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _BottleCount;
        [LocalData]
        public int? BottleCount
        {
            get { return m_Internal.BottleCount; }
            set
            {
                if(m_Internal.BottleCount!=value){
                    m_Internal.BottleCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BottleCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _OverUnder;
        [LocalData]
        public string OverUnder
        {
            get { return m_Internal.OverUnder; }
            set
            {
                if(m_Internal.OverUnder!=value){
                    m_Internal.OverUnder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OverUnder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _OffBy;
        [LocalData]
        public double? OffBy
        {
            get { return m_Internal.OffBy; }
            set
            {
                if(m_Internal.OffBy!=value){
                    m_Internal.OffBy=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OffBy");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwParLevelIssue, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatavwPartialBottleInventory : IWCFDataElement
    {
        [DataMember]
        public string ItemNumber { get; set; }
        [DataMember]
        public string UPCName { get; set; }
        [DataMember]
        public string TagNumber { get; set; }
        [DataMember]
        public int Size { get; set; }
        [DataMember]
        public double Quantity { get; set; }
        [DataMember]
        public string Location { get; set; }
        [DataMember]
        public decimal BottleCost { get; set; }
        [DataMember]
        public double? PartialInventory { get; set; }
        [DataMember]
        public string Category { get; set; }

        public void Copy( DatavwPartialBottleInventory _Item )
        {
             UPCName = _Item.UPCName;			
             TagNumber = _Item.TagNumber;			
             Size = _Item.Size;			
             Quantity = _Item.Quantity;			
             Location = _Item.Location;			
             BottleCost = _Item.BottleCost;			
             PartialInventory = _Item.PartialInventory;			
             Category = _Item.Category;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPartialBottleInventory( this );
        }


    }


    /// <summary>
    /// A class which represents the vwPartialBottleInventory table in the BeverageMonitor Database.
    /// </summary>
    public partial class vwPartialBottleInventory: BaseDataObject<DatavwPartialBottleInventory>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwPartialBottleInventory> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwPartialBottleInventory>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwPartialBottleInventory> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwPartialBottleInventory item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwPartialBottleInventory item=new vwPartialBottleInventory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<vwPartialBottleInventory> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public vwPartialBottleInventory()
        {
            m_Internal = new DatavwPartialBottleInventory();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwPartialBottleInventory( bool _CallOnCreated )
        {
            m_Internal = new DatavwPartialBottleInventory();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwPartialBottleInventory(string connectionString, string providerName) 
        {
            m_Internal = new DatavwPartialBottleInventory();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public vwPartialBottleInventory( vwPartialBottleInventory _Item )
        {
            m_Internal = new DatavwPartialBottleInventory();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public vwPartialBottleInventory( DatavwPartialBottleInventory _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( vwPartialBottleInventory _Item )
        {
            m_Internal.UPCName = _Item.UPCName;			
            m_Internal.TagNumber = _Item.TagNumber;			
            m_Internal.Size = _Item.Size;			
            m_Internal.Quantity = _Item.Quantity;			
            m_Internal.Location = _Item.Location;			
            m_Internal.BottleCost = _Item.BottleCost;			
            m_Internal.PartialInventory = _Item.PartialInventory;			
            m_Internal.Category = _Item.Category;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwPartialBottleInventory.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPartialBottleInventory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwPartialBottleInventory(Expression<Func<vwPartialBottleInventory, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwPartialBottleInventory> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<vwPartialBottleInventory> _repo;
            
            if(db.TestMode)
            {
                vwPartialBottleInventory.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPartialBottleInventory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwPartialBottleInventory> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwPartialBottleInventory SingleOrDefault(Expression<Func<vwPartialBottleInventory, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwPartialBottleInventory SingleOrDefault(Expression<Func<vwPartialBottleInventory, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwPartialBottleInventory> repo = GetRepo(connectionString,providerName);
            vwPartialBottleInventory single = repo.SingleOrDefault<vwPartialBottleInventory>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwPartialBottleInventory, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwPartialBottleInventory, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwPartialBottleInventory GetByID(string value) 
        {
            return vwPartialBottleInventory.Find( L => L.ItemNumber.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwPartialBottleInventory> Find(Expression<Func<vwPartialBottleInventory, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwPartialBottleInventory> Find(Expression<Func<vwPartialBottleInventory, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwPartialBottleInventory> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwPartialBottleInventory> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwPartialBottleInventory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwPartialBottleInventory> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwPartialBottleInventory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwPartialBottleInventory> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "ItemNumber";
        }

        public object KeyValue()
        {
            return this.ItemNumber;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.ItemNumber )
//			{
//				rc = this.ItemNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwPartialBottleInventory)
            {
                vwPartialBottleInventory compare=(vwPartialBottleInventory)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.ItemNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ItemNumber";
        }

        public static string GetKeyColumn()
        {
            return "ItemNumber";
        }        

        public static string GetDescriptorColumn()
        {
            return "ItemNumber";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _ItemNumber;
        [SubSonicPrimaryKey]
        [LocalData]
        public string ItemNumber
        {
            get { return m_Internal.ItemNumber; }
            set
            {
                if(m_Internal.ItemNumber!=value){
                    m_Internal.ItemNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _UPCName;
        [LocalData]
        public string UPCName
        {
            get { return m_Internal.UPCName; }
            set
            {
                if(m_Internal.UPCName!=value){
                    m_Internal.UPCName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UPCName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TagNumber;
        [LocalData]
        public string TagNumber
        {
            get { return m_Internal.TagNumber; }
            set
            {
                if(m_Internal.TagNumber!=value){
                    m_Internal.TagNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Size;
        [LocalData]
        public int Size
        {
            get { return m_Internal.Size; }
            set
            {
                if(m_Internal.Size!=value){
                    m_Internal.Size=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _Quantity;
        [LocalData]
        public double Quantity
        {
            get { return m_Internal.Quantity; }
            set
            {
                if(m_Internal.Quantity!=value){
                    m_Internal.Quantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Location;
        [LocalData]
        public string Location
        {
            get { return m_Internal.Location; }
            set
            {
                if(m_Internal.Location!=value){
                    m_Internal.Location=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Location");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal _BottleCost;
        [LocalData]
        public decimal BottleCost
        {
            get { return m_Internal.BottleCost; }
            set
            {
                if(m_Internal.BottleCost!=value){
                    m_Internal.BottleCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BottleCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _PartialInventory;
        [LocalData]
        public double? PartialInventory
        {
            get { return m_Internal.PartialInventory; }
            set
            {
                if(m_Internal.PartialInventory!=value){
                    m_Internal.PartialInventory=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PartialInventory");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Category;
        [LocalData]
        public string Category
        {
            get { return m_Internal.Category; }
            set
            {
                if(m_Internal.Category!=value){
                    m_Internal.Category=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwPartialBottleInventory, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatavwPosPour : IWCFDataElement
    {
        [DataMember]
        public Guid PourID { get; set; }
        [DataMember]
        public string StatusText { get; set; }
        [DataMember]
        public double PourAmount { get; set; }
        [DataMember]
        public string Type { get; set; }
        [DataMember]
        public string Category { get; set; }
        [DataMember]
        public DateTime PourTime { get; set; }

        public void Copy( DatavwPosPour _Item )
        {
             StatusText = _Item.StatusText;			
             PourAmount = _Item.PourAmount;			
             Type = _Item.Type;			
             Category = _Item.Category;			
             PourTime = _Item.PourTime;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPosPour( this );
        }


    }


    /// <summary>
    /// A class which represents the vwPosPours table in the BeverageMonitor Database.
    /// </summary>
    public partial class vwPosPour: BaseDataObject<DatavwPosPour>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwPosPour> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwPosPour>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwPosPour> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwPosPour item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwPosPour item=new vwPosPour();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<vwPosPour> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public vwPosPour()
        {
            m_Internal = new DatavwPosPour();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.PourID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwPosPour( bool _CallOnCreated )
        {
            m_Internal = new DatavwPosPour();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwPosPour(string connectionString, string providerName) 
        {
            m_Internal = new DatavwPosPour();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.PourID = Guid.NewGuid( );     
        }

        public vwPosPour( vwPosPour _Item )
        {
            m_Internal = new DatavwPosPour();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public vwPosPour( DatavwPosPour _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( vwPosPour _Item )
        {
            m_Internal.StatusText = _Item.StatusText;			
            m_Internal.PourAmount = _Item.PourAmount;			
            m_Internal.Type = _Item.Type;			
            m_Internal.Category = _Item.Category;			
            m_Internal.PourTime = _Item.PourTime;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.PourID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwPosPour.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPosPour>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwPosPour(Expression<Func<vwPosPour, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwPosPour> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<vwPosPour> _repo;
            
            if(db.TestMode)
            {
                vwPosPour.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPosPour>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwPosPour> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwPosPour SingleOrDefault(Expression<Func<vwPosPour, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwPosPour SingleOrDefault(Expression<Func<vwPosPour, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwPosPour> repo = GetRepo(connectionString,providerName);
            vwPosPour single = repo.SingleOrDefault<vwPosPour>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwPosPour, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwPosPour, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyvwPosPourLoaded = false;
        protected static vwPosPour EmptyvwPosPourMember = null;

        public static vwPosPour GetByID(Guid? value) 
        {
            vwPosPour rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static vwPosPour GetByID(Guid value) 
        {
            vwPosPour rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyvwPosPourLoaded )
                    {
                        rc = EmptyvwPosPourMember;
                    }
                    else
                    {
                        IsEmptyvwPosPourLoaded = true;
                        rc = vwPosPour.Find( L => L.PourID.Equals( value ) ).FirstOrDefault( );
                        EmptyvwPosPourMember = rc;
                    }
                }
                else
                {
                    rc = vwPosPour.Find( L => L.PourID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<vwPosPour> Find(Expression<Func<vwPosPour, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwPosPour> Find(Expression<Func<vwPosPour, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwPosPour> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwPosPour> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwPosPour> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwPosPour> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwPosPour> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwPosPour> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "PourID";
        }

        public object KeyValue()
        {
            return this.PourID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.StatusText )
//			{
//				rc = this.StatusText.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwPosPour)
            {
                vwPosPour compare=(vwPosPour)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.PourID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.StatusText.ToString();
        }

        public string DescriptorColumn() 
        {
            return "StatusText";
        }

        public static string GetKeyColumn()
        {
            return "PourID";
        }        

        public static string GetDescriptorColumn()
        {
            return "StatusText";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.PourID;
            }
            set
            {
                m_Internal.PourID = value;
            }
        }


//        Guid _PourID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid PourID
        {
            get { return m_Internal.PourID; }
            set
            {
                if(m_Internal.PourID!=value){
                    m_Internal.PourID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _StatusText;
        [LocalData]
        public string StatusText
        {
            get { return m_Internal.StatusText; }
            set
            {
                if(m_Internal.StatusText!=value){
                    m_Internal.StatusText=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StatusText");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _PourAmount;
        [LocalData]
        public double PourAmount
        {
            get { return m_Internal.PourAmount; }
            set
            {
                if(m_Internal.PourAmount!=value){
                    m_Internal.PourAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Type;
        [LocalData]
        public string Type
        {
            get { return m_Internal.Type; }
            set
            {
                if(m_Internal.Type!=value){
                    m_Internal.Type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Category;
        [LocalData]
        public string Category
        {
            get { return m_Internal.Category; }
            set
            {
                if(m_Internal.Category!=value){
                    m_Internal.Category=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        DateTime _PourTime;
        [LocalData]
        public DateTime PourTime
        {
            get { return m_Internal.PourTime; }
            set
            {
                if(m_Internal.PourTime!=value){
                    m_Internal.PourTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwPosPour, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatavwPour : IWCFDataElement
    {
        [DataMember]
        public string LocationName { get; set; }
        [DataMember]
        public string TagNumber { get; set; }
        [DataMember]
        public double? Volume { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string PourTime { get; set; }

        public void Copy( DatavwPour _Item )
        {
             TagNumber = _Item.TagNumber;			
             Volume = _Item.Volume;			
             Name = _Item.Name;			
             PourTime = _Item.PourTime;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwPour( this );
        }


    }


    /// <summary>
    /// A class which represents the vwPours table in the BeverageMonitor Database.
    /// </summary>
    public partial class vwPour: BaseDataObject<DatavwPour>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwPour> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwPour>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwPour> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwPour item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwPour item=new vwPour();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<vwPour> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public vwPour()
        {
            m_Internal = new DatavwPour();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwPour( bool _CallOnCreated )
        {
            m_Internal = new DatavwPour();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwPour(string connectionString, string providerName) 
        {
            m_Internal = new DatavwPour();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public vwPour( vwPour _Item )
        {
            m_Internal = new DatavwPour();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public vwPour( DatavwPour _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( vwPour _Item )
        {
            m_Internal.TagNumber = _Item.TagNumber;			
            m_Internal.Volume = _Item.Volume;			
            m_Internal.Name = _Item.Name;			
            m_Internal.PourTime = _Item.PourTime;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwPour.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPour>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwPour(Expression<Func<vwPour, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwPour> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<vwPour> _repo;
            
            if(db.TestMode)
            {
                vwPour.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwPour>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwPour> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwPour SingleOrDefault(Expression<Func<vwPour, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwPour SingleOrDefault(Expression<Func<vwPour, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwPour> repo = GetRepo(connectionString,providerName);
            vwPour single = repo.SingleOrDefault<vwPour>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwPour, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwPour, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwPour GetByID(string value) 
        {
            return vwPour.Find( L => L.LocationName.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwPour> Find(Expression<Func<vwPour, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwPour> Find(Expression<Func<vwPour, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwPour> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwPour> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwPour> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwPour> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwPour> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwPour> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "LocationName";
        }

        public object KeyValue()
        {
            return this.LocationName;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.LocationName )
//			{
//				rc = this.LocationName.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwPour)
            {
                vwPour compare=(vwPour)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.LocationName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "LocationName";
        }

        public static string GetKeyColumn()
        {
            return "LocationName";
        }        

        public static string GetDescriptorColumn()
        {
            return "LocationName";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _LocationName;
        [SubSonicPrimaryKey]
        [LocalData]
        public string LocationName
        {
            get { return m_Internal.LocationName; }
            set
            {
                if(m_Internal.LocationName!=value){
                    m_Internal.LocationName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Location Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _TagNumber;
        [LocalData]
        public string TagNumber
        {
            get { return m_Internal.TagNumber; }
            set
            {
                if(m_Internal.TagNumber!=value){
                    m_Internal.TagNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TagNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _Volume;
        [LocalData]
        public double? Volume
        {
            get { return m_Internal.Volume; }
            set
            {
                if(m_Internal.Volume!=value){
                    m_Internal.Volume=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Volume");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _PourTime;
        [LocalData]
        public string PourTime
        {
            get { return m_Internal.PourTime; }
            set
            {
                if(m_Internal.PourTime!=value){
                    m_Internal.PourTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwPour, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatavwReader : IWCFDataElement
    {
        [DataMember]
        public string HardwareID { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public string Description { get; set; }
        [DataMember]
        public string Location { get; set; }

        public void Copy( DatavwReader _Item )
        {
             Name = _Item.Name;			
             Description = _Item.Description;			
             Location = _Item.Location;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwReader( this );
        }


    }


    /// <summary>
    /// A class which represents the vwReaders table in the BeverageMonitor Database.
    /// </summary>
    public partial class vwReader: BaseDataObject<DatavwReader>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwReader> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwReader>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwReader> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwReader item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwReader item=new vwReader();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<vwReader> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public vwReader()
        {
            m_Internal = new DatavwReader();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwReader( bool _CallOnCreated )
        {
            m_Internal = new DatavwReader();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwReader(string connectionString, string providerName) 
        {
            m_Internal = new DatavwReader();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
        }

        public vwReader( vwReader _Item )
        {
            m_Internal = new DatavwReader();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public vwReader( DatavwReader _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( vwReader _Item )
        {
            m_Internal.Name = _Item.Name;			
            m_Internal.Description = _Item.Description;			
            m_Internal.Location = _Item.Location;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwReader.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwReader>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwReader(Expression<Func<vwReader, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwReader> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<vwReader> _repo;
            
            if(db.TestMode)
            {
                vwReader.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwReader>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwReader> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwReader SingleOrDefault(Expression<Func<vwReader, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwReader SingleOrDefault(Expression<Func<vwReader, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwReader> repo = GetRepo(connectionString,providerName);
            vwReader single = repo.SingleOrDefault<vwReader>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwReader, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwReader, bool>> expression) 
        {
            return All().Any(expression);
        }        

        
        public static vwReader GetByID(string value) 
        {
            return vwReader.Find( L => L.HardwareID.Equals( value ) ).FirstOrDefault( );
        }

        public static IList<vwReader> Find(Expression<Func<vwReader, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwReader> Find(Expression<Func<vwReader, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwReader> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwReader> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwReader> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwReader> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwReader> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwReader> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "HardwareID";
        }

        public object KeyValue()
        {
            return this.HardwareID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.HardwareID )
//			{
//				rc = this.HardwareID.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwReader)
            {
                vwReader compare=(vwReader)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }



        public string DescriptorValue()
        {
            return this.HardwareID.ToString();
        }

        public string DescriptorColumn() 
        {
            return "HardwareID";
        }

        public static string GetKeyColumn()
        {
            return "HardwareID";
        }        

        public static string GetDescriptorColumn()
        {
            return "HardwareID";
        }
        
        #region ' Foreign Keys '
        #endregion



//        string _HardwareID;
        [SubSonicPrimaryKey]
        [LocalData]
        public string HardwareID
        {
            get { return m_Internal.HardwareID; }
            set
            {
                if(m_Internal.HardwareID!=value){
                    m_Internal.HardwareID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HardwareID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Description;
        [LocalData]
        public string Description
        {
            get { return m_Internal.Description; }
            set
            {
                if(m_Internal.Description!=value){
                    m_Internal.Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Location;
        [LocalData]
        public string Location
        {
            get { return m_Internal.Location; }
            set
            {
                if(m_Internal.Location!=value){
                    m_Internal.Location=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Location");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwReader, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 

    [DataContract]
    public partial class DatavwUPCItem : IWCFDataElement
    {
        [DataMember]
        public Guid UPCID { get; set; }
        [DataMember]
        public string ItemNumber { get; set; }
        [DataMember]
        public string Manufacturer { get; set; }
        [DataMember]
        public string Name { get; set; }
        [DataMember]
        public int Size { get; set; }
        [DataMember]
        public Guid SizeTypeID { get; set; }
        [DataMember]
        public Guid CategoryID { get; set; }
        [DataMember]
        public Guid RootCategoryID { get; set; }
        [DataMember]
        public string CategoryName { get; set; }
        [DataMember]
        public string RootCategory { get; set; }
        [DataMember]
        public Guid? SubCategoryItemID { get; set; }
        [DataMember]
        public double? NozzleLength { get; set; }
        [DataMember]
        public double? NozzleWidth { get; set; }
        [DataMember]
        public int? NozzleShape { get; set; }
        [DataMember]
        public double PourModifier { get; set; }
        [DataMember]
        public int MinimumParLevel { get; set; }
        [DataMember]
        public decimal? UnitPrice { get; set; }
        [DataMember]
        public string CustomID { get; set; }

        public void Copy( DatavwUPCItem _Item )
        {
             ItemNumber = _Item.ItemNumber;			
             Manufacturer = _Item.Manufacturer;			
             Name = _Item.Name;			
             Size = _Item.Size;			
             SizeTypeID = _Item.SizeTypeID;			
             CategoryID = _Item.CategoryID;			
             RootCategoryID = _Item.RootCategoryID;			
             CategoryName = _Item.CategoryName;			
             RootCategory = _Item.RootCategory;			
             SubCategoryItemID = _Item.SubCategoryItemID;			
             NozzleLength = _Item.NozzleLength;			
             NozzleWidth = _Item.NozzleWidth;			
             NozzleShape = _Item.NozzleShape;			
             PourModifier = _Item.PourModifier;			
             MinimumParLevel = _Item.MinimumParLevel;			
             UnitPrice = _Item.UnitPrice;			
             CustomID = _Item.CustomID;			
        }

		public IBaseDataObject CreateDBObject( )
        {
            return new vwUPCItem( this );
        }


    }


    /// <summary>
    /// A class which represents the vwUPCItems table in the BeverageMonitor Database.
    /// </summary>
    public partial class vwUPCItem: BaseDataObject<DatavwUPCItem>, IActiveRecord, ICallOnCreated
    {
        #region Built-in testing
        [NonSerialized]
        static TestRepository<vwUPCItem> _testRepo;
       
        static void SetTestRepo()
        {
            _testRepo = _testRepo ?? new TestRepository<vwUPCItem>(new Jaxis.Inventory.Data.BeverageMonitorDB());
        }

        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }

        public static void Setup(List<vwUPCItem> testlist)
        {
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }

        public static void Setup(vwUPCItem item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }

        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                vwUPCItem item=new vwUPCItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;
        #endregion

        IRepository<vwUPCItem> _repo;

        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaving();
        
        partial void OnSaved();
        
        partial void OnChanged();

        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        Jaxis.Inventory.Data.BeverageMonitorDB _db;
        
        public vwUPCItem()
        {
            m_Internal = new DatavwUPCItem();
             _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();   
            this.UPCID = Guid.NewGuid( );     
        }

        ///<summary>
        ///Set bool to true to assign NewGuid to PrimaryKey (if appropriate) and to call OnCreated
        ///</summary>
        public vwUPCItem( bool _CallOnCreated )
        {
            m_Internal = new DatavwUPCItem();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();  
            CallOnCreated( _CallOnCreated );
        }

        public vwUPCItem(string connectionString, string providerName) 
        {
            m_Internal = new DatavwUPCItem();
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            Init();            
            this.UPCID = Guid.NewGuid( );     
        }

        public vwUPCItem( vwUPCItem _Item )
        {
            m_Internal = new DatavwUPCItem();
            Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }

        public vwUPCItem( DatavwUPCItem _Item )
        {
            m_Internal.Copy( _Item );
            _db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            Init();            
        }         
         
        public void Copy( vwUPCItem _Item )
        {
            m_Internal.ItemNumber = _Item.ItemNumber;			
            m_Internal.Manufacturer = _Item.Manufacturer;			
            m_Internal.Name = _Item.Name;			
            m_Internal.Size = _Item.Size;			
            m_Internal.SizeTypeID = _Item.SizeTypeID;			
            m_Internal.CategoryID = _Item.CategoryID;			
            m_Internal.RootCategoryID = _Item.RootCategoryID;			
            m_Internal.CategoryName = _Item.CategoryName;			
            m_Internal.RootCategory = _Item.RootCategory;			
            m_Internal.SubCategoryItemID = _Item.SubCategoryItemID;			
            m_Internal.NozzleLength = _Item.NozzleLength;			
            m_Internal.NozzleWidth = _Item.NozzleWidth;			
            m_Internal.NozzleShape = _Item.NozzleShape;			
            m_Internal.PourModifier = _Item.PourModifier;			
            m_Internal.MinimumParLevel = _Item.MinimumParLevel;			
            m_Internal.UnitPrice = _Item.UnitPrice;			
            m_Internal.CustomID = _Item.CustomID;			
        }         

        public void CallOnCreated( bool _CallOnCreated )
        {
            if( _CallOnCreated )
            {
                m_Internal.UPCID = Guid.NewGuid( );     
	
                OnCreated( );
            }
        }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                vwUPCItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwUPCItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
        }

        public vwUPCItem(Expression<Func<vwUPCItem, bool>> expression):this() 
        {
            SetIsLoaded(_repo.Load(this,expression));
        }
        
        internal static IRepository<vwUPCItem> GetRepo(string connectionString, string providerName)
        {
            Jaxis.Inventory.Data.BeverageMonitorDB db;

            db = String.IsNullOrEmpty(connectionString) ? new Jaxis.Inventory.Data.BeverageMonitorDB() : new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);

            /*
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB();
            }
            else
            {
                db=new Jaxis.Inventory.Data.BeverageMonitorDB(connectionString, providerName);
            }
            */

            IRepository<vwUPCItem> _repo;
            
            if(db.TestMode)
            {
                vwUPCItem.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<vwUPCItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<vwUPCItem> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static vwUPCItem SingleOrDefault(Expression<Func<vwUPCItem, bool>> expression) 
        {
            return SingleOrDefault( expression, String.Empty, String.Empty );
        }      
        
        public static vwUPCItem SingleOrDefault(Expression<Func<vwUPCItem, bool>> expression,string connectionString, string providerName) 
        {
            IRepository<vwUPCItem> repo = GetRepo(connectionString,providerName);
            vwUPCItem single = repo.SingleOrDefault<vwUPCItem>( expression );
            if( null != single )
            {
                single.OnLoaded( );
            }
            return single;
        }
        
        public static bool Exists(Expression<Func<vwUPCItem, bool>> expression,string connectionString, string providerName) 
        {
            return All(connectionString,providerName).Any(expression);
        }        
        
        public static bool Exists(Expression<Func<vwUPCItem, bool>> expression) 
        {
            return All().Any(expression);
        }        

        protected static bool IsEmptyvwUPCItemLoaded = false;
        protected static vwUPCItem EmptyvwUPCItemMember = null;

        public static vwUPCItem GetByID(Guid? value) 
        {
            vwUPCItem rc = null;
            if( value.HasValue )
            {
                rc = GetByID( value.Value );
            }
            return rc;
        }
        
        public static vwUPCItem GetByID(Guid value) 
        {
            vwUPCItem rc = null;
            if( null != value )
            {
                if( value == Guid.Empty )
                {
                    if( true == IsEmptyvwUPCItemLoaded )
                    {
                        rc = EmptyvwUPCItemMember;
                    }
                    else
                    {
                        IsEmptyvwUPCItemLoaded = true;
                        rc = vwUPCItem.Find( L => L.UPCID.Equals( value ) ).FirstOrDefault( );
                        EmptyvwUPCItemMember = rc;
                    }
                }
                else
                {
                    rc = vwUPCItem.Find( L => L.UPCID.Equals( value ) ).FirstOrDefault( );
                } 
            }
            return rc;
        }

        public static IList<vwUPCItem> Find(Expression<Func<vwUPCItem, bool>> expression) 
        {
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<vwUPCItem> Find(Expression<Func<vwUPCItem, bool>> expression,string connectionString, string providerName) 
        {
            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();
        }

        public static IQueryable<vwUPCItem> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }

        public static IQueryable<vwUPCItem> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<vwUPCItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<vwUPCItem> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<vwUPCItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
        }

        public static PagedList<vwUPCItem> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);
        }

        public string KeyName()
        {
            return "UPCID";
        }

        public object KeyValue()
        {
            return this.UPCID;
        }
        
        public void SetKeyValue(object value) 
        {
            if (value != null && value!=DBNull.Value) 
            {
                var settable = value.ChangeTypeTo<Guid>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
//        public override string ToString()
//        {
//			string rc = string.Empty;
//			if( null != this.ItemNumber )
//			{
//				rc = this.ItemNumber.ToString();
//			}
//            return rc;
//        }

        public override bool Equals(object obj)
        {
            if(obj == null)
                return false;
            if(obj is vwUPCItem)
            {
                vwUPCItem compare=(vwUPCItem)obj;
                return compare.KeyValue().Equals( this.KeyValue() );
                //return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }


        public override int GetHashCode() 
        {
            return this.UPCID.GetHashCode( );
        }

        public string DescriptorValue()
        {
            return this.ItemNumber.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ItemNumber";
        }

        public static string GetKeyColumn()
        {
            return "UPCID";
        }        

        public static string GetDescriptorColumn()
        {
            return "ItemNumber";
        }
        
        #region ' Foreign Keys '
        #endregion


		[ObfuscationAttribute(Exclude=true)]
        public virtual Guid ObjectID 
        {
            get
            {
                return m_Internal.UPCID;
            }
            set
            {
                m_Internal.UPCID = value;
            }
        }


//        Guid _UPCID;
        [SubSonicPrimaryKey]
        [LocalData]
        public Guid UPCID
        {
            get { return m_Internal.UPCID; }
            set
            {
                if(m_Internal.UPCID!=value){
                    m_Internal.UPCID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UPCID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _ItemNumber;
        [LocalData]
        public string ItemNumber
        {
            get { return m_Internal.ItemNumber; }
            set
            {
                if(m_Internal.ItemNumber!=value){
                    m_Internal.ItemNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Manufacturer;
        [LocalData]
        public string Manufacturer
        {
            get { return m_Internal.Manufacturer; }
            set
            {
                if(m_Internal.Manufacturer!=value){
                    m_Internal.Manufacturer=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Manufacturer");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _Name;
        [LocalData]
        public string Name
        {
            get { return m_Internal.Name; }
            set
            {
                if(m_Internal.Name!=value){
                    m_Internal.Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _Size;
        [LocalData]
        public int Size
        {
            get { return m_Internal.Size; }
            set
            {
                if(m_Internal.Size!=value){
                    m_Internal.Size=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _SizeTypeID;
        [LocalData]
        public Guid SizeTypeID
        {
            get { return m_Internal.SizeTypeID; }
            set
            {
                if(m_Internal.SizeTypeID!=value){
                    m_Internal.SizeTypeID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SizeTypeID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _CategoryID;
        [LocalData]
        public Guid CategoryID
        {
            get { return m_Internal.CategoryID; }
            set
            {
                if(m_Internal.CategoryID!=value){
                    m_Internal.CategoryID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CategoryID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid _RootCategoryID;
        [LocalData]
        public Guid RootCategoryID
        {
            get { return m_Internal.RootCategoryID; }
            set
            {
                if(m_Internal.RootCategoryID!=value){
                    m_Internal.RootCategoryID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RootCategoryID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CategoryName;
        [LocalData]
        public string CategoryName
        {
            get { return m_Internal.CategoryName; }
            set
            {
                if(m_Internal.CategoryName!=value){
                    m_Internal.CategoryName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CategoryName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _RootCategory;
        [LocalData]
        public string RootCategory
        {
            get { return m_Internal.RootCategory; }
            set
            {
                if(m_Internal.RootCategory!=value){
                    m_Internal.RootCategory=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RootCategory");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        Guid? _SubCategoryItemID;
        [LocalData]
        public Guid? SubCategoryItemID
        {
            get { return m_Internal.SubCategoryItemID; }
            set
            {
                if(m_Internal.SubCategoryItemID!=value){
                    m_Internal.SubCategoryItemID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubCategoryItemID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _NozzleLength;
        [LocalData]
        public double? NozzleLength
        {
            get { return m_Internal.NozzleLength; }
            set
            {
                if(m_Internal.NozzleLength!=value){
                    m_Internal.NozzleLength=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NozzleLength");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double? _NozzleWidth;
        [LocalData]
        public double? NozzleWidth
        {
            get { return m_Internal.NozzleWidth; }
            set
            {
                if(m_Internal.NozzleWidth!=value){
                    m_Internal.NozzleWidth=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NozzleWidth");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int? _NozzleShape;
        [LocalData]
        public int? NozzleShape
        {
            get { return m_Internal.NozzleShape; }
            set
            {
                if(m_Internal.NozzleShape!=value){
                    m_Internal.NozzleShape=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NozzleShape");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        double _PourModifier;
        [LocalData]
        public double PourModifier
        {
            get { return m_Internal.PourModifier; }
            set
            {
                if(m_Internal.PourModifier!=value){
                    m_Internal.PourModifier=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PourModifier");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        int _MinimumParLevel;
        [LocalData]
        public int MinimumParLevel
        {
            get { return m_Internal.MinimumParLevel; }
            set
            {
                if(m_Internal.MinimumParLevel!=value){
                    m_Internal.MinimumParLevel=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinimumParLevel");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        decimal? _UnitPrice;
        [LocalData]
        public decimal? UnitPrice
        {
            get { return m_Internal.UnitPrice; }
            set
            {
                if(m_Internal.UnitPrice!=value){
                    m_Internal.UnitPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UnitPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

//        string _CustomID;
        [LocalData]
        public string CustomID
        {
            get { return m_Internal.CustomID; }
            set
            {
                if(m_Internal.CustomID!=value){
                    m_Internal.CustomID=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomID");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }


        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }

        public DbCommand GetInsertCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        public void Update()
        {
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider)
        {
            OnSaving( );
            
            if(this._dirtyColumns.Count>0)
            {
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add()
        {
            Add(_db.DataProvider);
        }
        
        public void Add(IDataProvider provider)
        {
            OnSaving( );

            var key=KeyValue();
            if(key==null)
            {
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }
            else
            {
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
        public override void Save() 
        {
            Save(_db.DataProvider);
        }      

        public void Save(IDataProvider provider) 
        {
            if (_isNew) 
            {
                Add(provider);
            }
            else 
            {
                Update(provider);
            }
            SetIsLoaded( true );
        }

        public void Delete(IDataProvider provider) 
        {
                   
                 
            _repo.Delete(KeyValue());
                    }

        public void Delete() 
        {
            Delete(_db.DataProvider);
        }

        public static void Delete(Expression<Func<vwUPCItem, bool>> expression) 
        {
            var repo = GetRepo();
            
       
            repo.DeleteMany(expression);
        }

        
        public void Load(IDataReader rdr) 
        {
            Load(rdr, true);
        }

        public void Load(IDataReader rdr, bool closeReader) 
        {
            if (rdr.Read()) 
            {
                try 
                {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                }
                catch
                {
                    SetIsLoaded(false);
                    throw;
                }
            }
            else
            {
                SetIsLoaded(false);
            
            }

            if (closeReader)
                rdr.Dispose();
        }
    } 
}
