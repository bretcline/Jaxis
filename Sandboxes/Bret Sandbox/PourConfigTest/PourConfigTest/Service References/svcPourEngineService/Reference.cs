//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PourConfigTest.svcPourEngineService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UPCData", Namespace="http://schemas.datacontract.org/2004/07/BEVMET.PourEngine")]
    [System.SerializableAttribute()]
    public partial class UPCData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short AmountInBottleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short BottleSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float NozzleDiameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TagIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, double> ViscocityByTemperatureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short AmountInBottle {
            get {
                return this.AmountInBottleField;
            }
            set {
                if ((this.AmountInBottleField.Equals(value) != true)) {
                    this.AmountInBottleField = value;
                    this.RaisePropertyChanged("AmountInBottle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short BottleSize {
            get {
                return this.BottleSizeField;
            }
            set {
                if ((this.BottleSizeField.Equals(value) != true)) {
                    this.BottleSizeField = value;
                    this.RaisePropertyChanged("BottleSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float NozzleDiameter {
            get {
                return this.NozzleDiameterField;
            }
            set {
                if ((this.NozzleDiameterField.Equals(value) != true)) {
                    this.NozzleDiameterField = value;
                    this.RaisePropertyChanged("NozzleDiameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TagID {
            get {
                return this.TagIDField;
            }
            set {
                if ((this.TagIDField.Equals(value) != true)) {
                    this.TagIDField = value;
                    this.RaisePropertyChanged("TagID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, double> ViscocityByTemperature {
            get {
                return this.ViscocityByTemperatureField;
            }
            set {
                if ((object.ReferenceEquals(this.ViscocityByTemperatureField, value) != true)) {
                    this.ViscocityByTemperatureField = value;
                    this.RaisePropertyChanged("ViscocityByTemperature");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EngineSettings", Namespace="http://schemas.datacontract.org/2004/07/BEVMET.PourEngine")]
    [System.SerializableAttribute()]
    public partial class EngineSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, float> FormulaValuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FreeFormulaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NozzleFormulaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short SleepTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, float> FormulaValues {
            get {
                return this.FormulaValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.FormulaValuesField, value) != true)) {
                    this.FormulaValuesField = value;
                    this.RaisePropertyChanged("FormulaValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FreeFormula {
            get {
                return this.FreeFormulaField;
            }
            set {
                if ((object.ReferenceEquals(this.FreeFormulaField, value) != true)) {
                    this.FreeFormulaField = value;
                    this.RaisePropertyChanged("FreeFormula");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddress {
            get {
                return this.IPAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressField, value) != true)) {
                    this.IPAddressField = value;
                    this.RaisePropertyChanged("IPAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NozzleFormula {
            get {
                return this.NozzleFormulaField;
            }
            set {
                if ((object.ReferenceEquals(this.NozzleFormulaField, value) != true)) {
                    this.NozzleFormulaField = value;
                    this.RaisePropertyChanged("NozzleFormula");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short SleepTime {
            get {
                return this.SleepTimeField;
            }
            set {
                if ((this.SleepTimeField.Equals(value) != true)) {
                    this.SleepTimeField = value;
                    this.RaisePropertyChanged("SleepTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PourData", Namespace="http://schemas.datacontract.org/2004/07/BEVMET.PourEngine")]
    [System.SerializableAttribute()]
    public partial class PourData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short PourAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan PourTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RawDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TagIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short TemperatureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceID {
            get {
                return this.DeviceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceIDField, value) != true)) {
                    this.DeviceIDField = value;
                    this.RaisePropertyChanged("DeviceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventID {
            get {
                return this.EventIDField;
            }
            set {
                if ((this.EventIDField.Equals(value) != true)) {
                    this.EventIDField = value;
                    this.RaisePropertyChanged("EventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short PourAmount {
            get {
                return this.PourAmountField;
            }
            set {
                if ((this.PourAmountField.Equals(value) != true)) {
                    this.PourAmountField = value;
                    this.RaisePropertyChanged("PourAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan PourTime {
            get {
                return this.PourTimeField;
            }
            set {
                if ((this.PourTimeField.Equals(value) != true)) {
                    this.PourTimeField = value;
                    this.RaisePropertyChanged("PourTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RawData {
            get {
                return this.RawDataField;
            }
            set {
                if ((object.ReferenceEquals(this.RawDataField, value) != true)) {
                    this.RawDataField = value;
                    this.RaisePropertyChanged("RawData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TagID {
            get {
                return this.TagIDField;
            }
            set {
                if ((this.TagIDField.Equals(value) != true)) {
                    this.TagIDField = value;
                    this.RaisePropertyChanged("TagID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagPhase", Namespace="http://schemas.datacontract.org/2004/07/BEVMET.PourEngine")]
    [System.SerializableAttribute()]
    public partial class TagPhase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short BatteryVoltageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EventTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PourConfigTest.svcPourEngineService.TagPhaseType EventTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TagIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short TemperatureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short BatteryVoltage {
            get {
                return this.BatteryVoltageField;
            }
            set {
                if ((this.BatteryVoltageField.Equals(value) != true)) {
                    this.BatteryVoltageField = value;
                    this.RaisePropertyChanged("BatteryVoltage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EventTime {
            get {
                return this.EventTimeField;
            }
            set {
                if ((this.EventTimeField.Equals(value) != true)) {
                    this.EventTimeField = value;
                    this.RaisePropertyChanged("EventTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PourConfigTest.svcPourEngineService.TagPhaseType EventType {
            get {
                return this.EventTypeField;
            }
            set {
                if ((this.EventTypeField.Equals(value) != true)) {
                    this.EventTypeField = value;
                    this.RaisePropertyChanged("EventType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TagID {
            get {
                return this.TagIDField;
            }
            set {
                if ((this.TagIDField.Equals(value) != true)) {
                    this.TagIDField = value;
                    this.RaisePropertyChanged("TagID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagPhaseType", Namespace="http://schemas.datacontract.org/2004/07/BEVMET.PourEngine")]
    public enum TagPhaseType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Heartbeat = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Connect = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disconnect = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dormant = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="svcPourEngineService.IPourEngineService")]
    public interface IPourEngineService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPourEngineService/GetUPCByTag", ReplyAction="http://tempuri.org/IPourEngineService/GetUPCByTagResponse")]
        PourConfigTest.svcPourEngineService.UPCData GetUPCByTag(int tagID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPourEngineService/GetSettings", ReplyAction="http://tempuri.org/IPourEngineService/GetSettingsResponse")]
        PourConfigTest.svcPourEngineService.EngineSettings GetSettings(string deviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPourEngineService/PushPourData", ReplyAction="http://tempuri.org/IPourEngineService/PushPourDataResponse")]
        void PushPourData(PourConfigTest.svcPourEngineService.PourData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPourEngineService/PushTagEvent", ReplyAction="http://tempuri.org/IPourEngineService/PushTagEventResponse")]
        void PushTagEvent(PourConfigTest.svcPourEngineService.TagPhase data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPourEngineService/PushStoredEvents", ReplyAction="http://tempuri.org/IPourEngineService/PushStoredEventsResponse")]
        void PushStoredEvents(PourConfigTest.svcPourEngineService.TagPhase[] data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPourEngineServiceChannel : PourConfigTest.svcPourEngineService.IPourEngineService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PourEngineServiceClient : System.ServiceModel.ClientBase<PourConfigTest.svcPourEngineService.IPourEngineService>, PourConfigTest.svcPourEngineService.IPourEngineService {
        
        public PourEngineServiceClient() {
        }
        
        public PourEngineServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PourEngineServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PourEngineServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PourEngineServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PourConfigTest.svcPourEngineService.UPCData GetUPCByTag(int tagID) {
            return base.Channel.GetUPCByTag(tagID);
        }
        
        public PourConfigTest.svcPourEngineService.EngineSettings GetSettings(string deviceID) {
            return base.Channel.GetSettings(deviceID);
        }
        
        public void PushPourData(PourConfigTest.svcPourEngineService.PourData data) {
            base.Channel.PushPourData(data);
        }
        
        public void PushTagEvent(PourConfigTest.svcPourEngineService.TagPhase data) {
            base.Channel.PushTagEvent(data);
        }
        
        public void PushStoredEvents(PourConfigTest.svcPourEngineService.TagPhase[] data) {
            base.Channel.PushStoredEvents(data);
        }
    }
}
