//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PourConfigTest.svcPour {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UPCData", Namespace="http://schemas.datacontract.org/2004/07/BevWebServiceData")]
    [System.SerializableAttribute()]
    public partial class UPCData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private short AmountInBottlek__BackingFieldField;
        
        private short BottleSizek__BackingFieldField;
        
        private float NozzleDiameterk__BackingFieldField;
        
        private int TagIDk__BackingFieldField;
        
        private System.Collections.Generic.Dictionary<int, double> ViscocityByTemperaturek__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<AmountInBottle>k__BackingField", IsRequired=true)]
        public short AmountInBottlek__BackingField {
            get {
                return this.AmountInBottlek__BackingFieldField;
            }
            set {
                if ((this.AmountInBottlek__BackingFieldField.Equals(value) != true)) {
                    this.AmountInBottlek__BackingFieldField = value;
                    this.RaisePropertyChanged("AmountInBottlek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<BottleSize>k__BackingField", IsRequired=true)]
        public short BottleSizek__BackingField {
            get {
                return this.BottleSizek__BackingFieldField;
            }
            set {
                if ((this.BottleSizek__BackingFieldField.Equals(value) != true)) {
                    this.BottleSizek__BackingFieldField = value;
                    this.RaisePropertyChanged("BottleSizek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<NozzleDiameter>k__BackingField", IsRequired=true)]
        public float NozzleDiameterk__BackingField {
            get {
                return this.NozzleDiameterk__BackingFieldField;
            }
            set {
                if ((this.NozzleDiameterk__BackingFieldField.Equals(value) != true)) {
                    this.NozzleDiameterk__BackingFieldField = value;
                    this.RaisePropertyChanged("NozzleDiameterk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<TagID>k__BackingField", IsRequired=true)]
        public int TagIDk__BackingField {
            get {
                return this.TagIDk__BackingFieldField;
            }
            set {
                if ((this.TagIDk__BackingFieldField.Equals(value) != true)) {
                    this.TagIDk__BackingFieldField = value;
                    this.RaisePropertyChanged("TagIDk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ViscocityByTemperature>k__BackingField", IsRequired=true)]
        public System.Collections.Generic.Dictionary<int, double> ViscocityByTemperaturek__BackingField {
            get {
                return this.ViscocityByTemperaturek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ViscocityByTemperaturek__BackingFieldField, value) != true)) {
                    this.ViscocityByTemperaturek__BackingFieldField = value;
                    this.RaisePropertyChanged("ViscocityByTemperaturek__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="svcPour.IPourEngineConfig")]
    public interface IPourEngineConfig {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPourEngineConfig/AddUPCData", ReplyAction="http://tempuri.org/IPourEngineConfig/AddUPCDataResponse")]
        void AddUPCData(PourConfigTest.svcPour.UPCData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPourEngineConfig/StartEvent", ReplyAction="http://tempuri.org/IPourEngineConfig/StartEventResponse")]
        void StartEvent(int eventID, System.Collections.Generic.List<PourConfigTest.svcPour.UPCData> upcData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPourEngineConfig/StopEvent", ReplyAction="http://tempuri.org/IPourEngineConfig/StopEventResponse")]
        void StopEvent(int eventID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPourEngineConfigChannel : PourConfigTest.svcPour.IPourEngineConfig, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PourEngineConfigClient : System.ServiceModel.ClientBase<PourConfigTest.svcPour.IPourEngineConfig>, PourConfigTest.svcPour.IPourEngineConfig {
        
        public PourEngineConfigClient() {
        }
        
        public PourEngineConfigClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PourEngineConfigClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PourEngineConfigClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PourEngineConfigClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddUPCData(PourConfigTest.svcPour.UPCData data) {
            base.Channel.AddUPCData(data);
        }
        
        public void StartEvent(int eventID, System.Collections.Generic.List<PourConfigTest.svcPour.UPCData> upcData) {
            base.Channel.StartEvent(eventID, upcData);
        }
        
        public void StopEvent(int eventID) {
            base.Channel.StopEvent(eventID);
        }
    }
}
