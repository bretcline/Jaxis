<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IDENTEC</name>
    </assembly>
    <members>
        <member name="T:IDENTEC.Readers.BeaconReaders.TagListBehavior">
            <summary>
            The tag list behavior of the beacon reader.            
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.BeaconReaders.TagListBehavior.DiscardOldTagsWhenFull">
            <summary>
            Discards old tags if the list gets too full (FIFO).
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.BeaconReaders.TagListBehavior.ClearListWhenFull">
            <summary>
            Clears the entire list when it gets too full.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.BeaconReaders.TagListBehavior.RemoveTagsWhenReported">
            <summary>
            Removes tags from the list as they are reported. This setting will reveal each tag's ping rate.
            </summary>
            <remarks>Inhibit time and and re-reporting rate have no effect when this setting is used.</remarks>				
        </member>
        <member name="T:IDENTEC.Readers.BeaconReaders.IBeaconReader">
            <summary>
            Common interface for i-PORT R2 and i-CARD CF 'B'
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.IBeaconReader.SetTagListBehavior(IDENTEC.Readers.BeaconReaders.TagListBehavior)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <returns></returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.IBeaconReader.GetTagListBehavior">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.IBeaconReader.GetTags(System.Boolean)">
            <summary>
            
            </summary>
            <param name="enableExtendedInfo"></param>
            <returns></returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.IBeaconReader.EnableHighRfSensitivity(System.Boolean)">
            <summary>
            
            </summary>
            <param name="enable"></param>
            <returns></returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.IBeaconReader.SetTagListInhibitTime(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="lifetimeInList"></param>
            <returns></returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.IBeaconReader.SetTagReReportingInterval(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <returns></returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.IBeaconReader.ClearTagList">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.IBeaconReader.SetAllTagsInListAsNotYetReported">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
        </member>
        <member name="T:IDENTEC.Readers.BeaconReaders.iPortR2">
            <summary>
            The i-PORT R2 class provides methods for communicating with an i-PORT R2 and i-B2 tags.
            <seealso cref="T:IDENTEC.Readers.ModularReaderBus"/>						
            </summary>
            <remarks>The i-PORT R2's firmware is identical to an i-CARD CF "B". Once the reader is powered on, it continuously listens for beaconing tags.</remarks>
            <example>
            This example shows how to connect to a series of i-PORT R2's and query each reader for its list of tags. <B>[C#]:</B>
            <code>
            		using System;
            		using System.Diagnostics;
            		using System.Net.Sockets;
            
            		//IDENTEC SOLUTIONS specific:
            		using IDENTEC;
            		using IDENTEC.Readers;
            		using IDENTEC.Tags;
            
            		//IDENTEC SOLUTIONS Beacon technology specific:
            		using IDENTEC.Readers.BeaconReaders;
            		using IDENTEC.Tags.BeaconTags;
            
            		namespace i_PORT_R2
            		{
            
            			class i_PORT_R2_Example
            			{
            				[STAThread]
            				static void Main(string[] args)
            				{
            					/* 
            					 Notes: 			 
            						This example is designed to be used with a serial server over TCP such as a "Digi One SP" from Digi (www.digi.com).
            						Please contact IDENTEC SOLUTIONS Inc. for a quick setup guide on using a Digi device with the i-PORT R2.
            			
            						Alternatively you could use a USB to RS-422 convertor that provides a com port (this would require a code change below)
            					*/
            
            					try
            					{
            						Console.WriteLine("----- IDENTEC SOLUTIONS Inc. i-PORT R2 Sample -----\n\n\n");
            						Console.WriteLine("Please input the IP Address of serial server to connect to then press ENTER:");
            						ModularReaderBus r2SerialServer = new ModularReaderBus();
            						string strIP = Console.ReadLine();
            
            						Console.WriteLine("Connecting to " + strIP + " ...");				
            						//Note: the default port for the Digi One SP is 2101
            						r2SerialServer.ConnectTCP(strIP, 2101);
            						Console.WriteLine("Connected!");				
            			
            						//TODO: set the socket options to match your network 
            						//(for example if you are on a cellular connection with a digi device you'll want to increase these timeouts
            						//Here we are setting the timeout to be reasonable for the device on a fast LAN:				
            						r2SerialServer.Socket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 10000);
            						r2SerialServer.Socket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.SendTimeout, 10000);
            
            						Console.WriteLine("Enumerating readers. Please wait...");				
            						//Now start enumerating the readers connected to the serial server (on the daisy chain chain)
            						//We specify up to a 5 second wait for the first i-PORT R2 to respond (if there are no readers then it will take 5 seconds)
            						ModularReader [] readers = r2SerialServer.EnumerateReaders(new TimeSpan(0,0,0,5,0));
            						if (readers.Length == 0)
            						{
            							Console.WriteLine("There were no readers found on the serial server");
            						}
            						else
            						{
            							Console.WriteLine("There were {0} readers found on the serial server\n\n", readers.Length);
            							Console.WriteLine("Reader\tSerial #\tInput Power\t\tPowered On");
            							foreach (iPortR2 r2 in readers)
            							{
            								//Tell the reader to clear the tags out of its internal list when we ask for the list of tags:
            								r2.SetTagListBehavior(TagListBehavior.RemoveTagsWhenReported);
            								//Turn on the receive amplifier to increase read range, 
            								//with it on we can "hear" tags at down to -90 dBm, with it off only at -60
            					
            								r2.EnableHighRfSensitivity(true);
            								int nmV = r2.GetPowerSupplyVoltage();
            								Console.WriteLine("{0}\t{1}\t{2}mV\t\t{3}",
            								r2.Address, r2.SerialNumber, nmV, r2.BootDateTime.ToString())					
            							}
            
            							Console.WriteLine("\n\n");
            							Console.WriteLine("Press ENTER to start querying for tag lists\n\n");
            							Console.ReadLine();
            
            							while (true)
            							{
            
            								foreach (iPortR2 r2 in readers)
            								{
            									//Get the tag extended info (first time and last time seen)
            						
            									Console.WriteLine("\nQuerying reader {0} for its list of tags...", r2.Address);
            									TagCollection tags = r2.GetTags(true);
            									if (tags.Count == 0)
            									{
            										Console.WriteLine("\nNo tags to report");
            									}
            									else
            									{
            										tags.Sort();
            										Console.WriteLine("\n{0} tags to report:\n", tags.Count);
            							
            										Console.WriteLine("\n{0,-15} {1,-20} {2,-20} {3,-10} {4,-10}", 
            											"Tag", "First Detected", "Last Detected", "Max RSSI", "Last RSSI");
            										Console.WriteLine("----------------------------------------------------------------------------");
            										foreach (iB2Tag t in tags)
            										{
            											Console.WriteLine("{0,-15} {1,-20:g} {2,-20:g} {3,-10} {4,-10}", 
            												t.Label, t.FirstSeen, t.ContactTime, t.MaxSignal, t.Signal);
            										}
            									}
            									Console.WriteLine("\r\n");
            								}
            
            								Console.Write("View tags seen on each reader again (Y/N)? Y: ");
            								string strReponse = Console.ReadLine();
            								if (strReponse.ToLower() == "n")
            									break;
            							}
            						}
            			
            
            					}
            					catch (Exception ex)
            					{
            						Console.WriteLine(ex.Message);
            					}
            					Console.WriteLine("Press ENTER to end the program");
            					Console.ReadLine();
            				}
            			}
            		}
            </code>
            <B>Output</B>			
            <code>
            		----- IDENTEC SOLUTIONS Inc. i-PORT R2 Sample -----
            
            
            
            		Please input the IP Address of serial server to connect to then press ENTER:
            		192.168.168.54
            		Connecting to 192.168.168.54 ...
            		Connected!
            		Enumerating readers. Please wait...
            		There were 1 readers found on the serial server
            
            
            		Reader  Serial #        Input Power             Powered On
            		1       636000949       23807mV         10/16/2006 3:44:48 PM
            
            
            
            		Press ENTER to start querying for tag lists
            
            
            
            
            		Querying reader 1 for its list of tags...
            
            		17 tags to report:
            
            
            		Tag             First Detected       Last Detected        Max RSSI   Last RSSI
            		----------------------------------------------------------------------------
            		0.360.100.432   10/17/2006 1:27 PM   10/17/2006 1:41 PM   -80        -82
            		0.360.102.456   10/17/2006 1:27 PM   10/17/2006 1:41 PM   -70        -78
            		0.380.000.106   10/17/2006 1:27 PM   10/17/2006 1:41 PM   -69        -74
            		0.380.000.115   10/17/2006 1:27 PM   10/17/2006 1:35 PM   -70        -80
            		0.380.000.118   10/17/2006 1:27 PM   10/17/2006 1:41 PM   -69        -72
            		0.380.000.120   10/17/2006 1:27 PM   10/17/2006 1:41 PM   -72        -77
            		0.380.000.121   10/17/2006 1:27 PM   10/17/2006 1:41 PM   -65        -70
            		0.390.101.140   10/17/2006 1:27 PM   10/17/2006 1:41 PM   -73        -82
            		0.390.101.926   10/17/2006 1:27 PM   10/17/2006 1:41 PM   -68        -77
            		0.390.102.348   10/17/2006 1:27 PM   10/17/2006 1:41 PM   -80        -82
            		0.390.102.994   10/17/2006 1:27 PM   10/17/2006 1:41 PM   -69        -73
            		0.390.104.174   10/17/2006 1:27 PM   10/17/2006 1:41 PM   -64        -65
            		0.390.104.481   10/17/2006 1:27 PM   10/17/2006 1:30 PM   -80        -82
            		0.390.104.538   10/17/2006 1:27 PM   10/17/2006 1:32 PM   -82        -82
            		0.390.104.759   10/17/2006 1:27 PM   10/17/2006 1:27 PM   -82        -82
            		0.390.104.766   10/17/2006 1:27 PM   10/17/2006 1:41 PM   -77        -78
            		0.390.104.972   10/17/2006 1:27 PM   10/17/2006 1:41 PM   -72        -82
            
            
            		View tags seen on each reader again (Y/N)? Y: n
            		Press ENTER to end the program
            </code>
            </example>
            <seealso cref="T:IDENTEC.iBusAdapter"/>
            <seealso cref="T:IDENTEC.DataStream"/>
        </member>
        <member name="T:IDENTEC.Readers.ModularReader">
            <summary>
            Implements functionality for ILR readers that can be daisy-chained together.
            </summary>        
            <seealso cref="T:IDENTEC.iBusAdapter"/>
            <seealso cref="P:IDENTEC.Readers.ModularReader.DataStream"/>
        </member>
        <member name="T:IDENTEC.Readers.Reader">
            <summary>
            Represents an RFID reader.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.Reader.CalculateSlotSize(System.Int32)">
            <summary>
            Helper to specify the slot size to the iCard (slots to fit x tags)
            </summary>
            <param name="nTags"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.Reader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.Reader.Disconnect">
            <summary>
            Closes the connection to the reader.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.Readers.Reader.Connected">
            <summary>
            Returns whether the reader is connected or not.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.Reader.WorkingRegion">
             <summary>
             The specific region/frequency that the card is allowed to operate in. Some cards will work in all regions, others are set to specific regions only.
            <seealso cref="T:IDENTEC.Frequency"/>			
             </summary>			
        </member>
        <member name="T:IDENTEC.Readers.Reader.CompatibleRegion">
            <summary>
            Specifies the region compatibility of the reader.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.Reader.CompatibleRegion.Indeterminate">
            <summary>
            The working region is not known.				
            </summary>
            <remarks>This is the default value for a disconnected reader.</remarks>				
        </member>
        <member name="F:IDENTEC.Readers.Reader.CompatibleRegion.EuropeanOnly">
            <summary>
            The card is only capable of communicating at 868MHz
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.Reader.CompatibleRegion.NorthAmericanOnly">
            <summary>
            The card is only capable of communicating at 916.5MHz
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.Reader.CompatibleRegion.All">
            <summary>
            The card is capable of communicating at 868MHz and 916.5MHz
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.ModularReader.FIRSTREADERWITHDISCONNECTEDSLAVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.ModularReader.m_byAddress">
            <summary>
            It is super important that the broadcast address be used by default for the discover routine
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.Disconnect">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.#ctor(IDENTEC.Readers.ModularReaderBus)">
            <summary>
            
            </summary>
            <param name="comm"></param>
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.#ctor(IDENTEC.iBusAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Readers.ModularReader"/> class.
            </summary>
            <param name="iBus">The i bus.</param>
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.RecvMsg(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="nPauseBeforeRead"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.SendMessage(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="len"></param>
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.SetParameter(System.Byte,System.UInt32)">
            <summary>
            For advanced parameter setting.
            </summary>
            <param name="bySubCmd"></param>
            <param name="dwParameter"></param>
            <returns></returns>
            <remarks>This method is provided for advanced applications only. It is unlikely that you will need to call this method.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.GetParameter(System.Byte,System.UInt32@)">
            <summary>
            For advanced parameter reading.
            </summary>
            <param name="bySubCmd"></param>
            <param name="dwParameter"></param>
            <remarks>This method is provided for advanced applications only. It is unlikely that you will need to call this method.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.ReadVersion">
            <summary>
            The response to this call helps us enumerate the bus. That is, if it times
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.EnableSlavePort(System.Boolean)">
            <summary>
            Enables/disables the slave port on reader. The slave port is enabled on power up default.
            </summary>
            <param name="enable"></param>
            <returns></returns>
            <remarks>If you disable the slave port on a reader all readers daisy-chained from this reader will no longer respond.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.SetStaticAddress(System.Int32)">
            <summary>
            Sets the static address of the reader.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.GetStaticAddress">
            <summary>
            Gets the static address of the reader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.GetPowerSupplyVoltage">
            <summary>
            Gets the voltage of the external power supply (millivolts).
            </summary>
            <returns>The voltage in millivolts.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.GetUptime">
            <summary>
            Gets the elapsed time since the reader was powered on or reset.
            </summary>
            <returns>A TimeSpan object representing the elapsed time since the reader last rebooted.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.ModularReader.CompareTo(System.Object)">
            <summary>
            Compares the serial number of the reader to another reader
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.Readers.ModularReader.ModularReaderBus">
            <summary>
            The communications bus used by the host to talk to the reader(s).
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.ModularReader.Address">
            <summary>
            The address/number of the reader on the daisy chain. The higher the number, the further along the chain the reader is.            
            </summary>
            <remarks> The address is set during enumeration.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.ModularReader.SerialNumber">
            <summary>
            The reader's unique serial number.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.ModularReader.MajorVersion">
            <summary>
            The major firmware version.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.ModularReader.MinorVersion">
            <summary>
            The minor firmware version.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.ModularReader.Connected">
            <summary>
            Reports the connection state of the reader
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.ModularReader.PacketsSent">
            <summary>
            The number of messages/packets sent to the reader
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.ModularReader.PacketsReceived">
            <summary>
            The number of messages/packets received from the reader
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.ModularReader.BootDateTime">
            <summary>
            The time when the reader was powered on or reset. Only valid after a successful connection.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.ModularReader.Information">
            <summary>
            The information string as returned by the reader during intialization.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.ModularReader.FirmwareVersion">
            <summary>
            Firmware version string as returned by the reader.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.ModularReader.DataStream">
            <summary>
            Gets or sets the data stream.
            </summary>
            <value>The data stream.</value>
        </member>
        <member name="T:IDENTEC.IBusDevice">
            <summary>
            Declares common methods and properties for devices that can be daisy-chained 
            on the IDENTEC SOLUTIONS R2-422 "iBUS".
            </summary>
        </member>
        <member name="M:IDENTEC.IBusDevice.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:IDENTEC.IBusDevice.SetBusAddress(System.Int32)">
            <summary>
            Sets the bus address.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:IDENTEC.IBusDevice.GetBusAddress">
            <summary>
            Gets the bus address.
            </summary>
            <returns>The address.</returns>
        </member>
        <member name="M:IDENTEC.IBusDevice.ResetToFactoryDefault">
            <summary>
            This command reset all parameters to default configuration.
            </summary>
        </member>
        <member name="M:IDENTEC.IBusDevice.ConnectSlavePort(System.Boolean)">
            <summary>
            Connects the slave port.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="P:IDENTEC.IBusDevice.SerialNumber">
            <summary>
            The reader's unique serial number.
            </summary>
        </member>
        <member name="P:IDENTEC.IBusDevice.MajorVersion">
            <summary>
            The major firmware version.
            </summary>
        </member>
        <member name="P:IDENTEC.IBusDevice.MinorVersion">
            <summary>
            The minor firmware version.
            </summary>
        </member>
        <member name="P:IDENTEC.IBusDevice.Address">
            <summary>
            Gets the bus address.
            </summary>
            <value>The bus address.</value>
        </member>
        <member name="P:IDENTEC.IBusDevice.Information">
            <summary>
            Gets the information.
            </summary>
            <value>The information.</value>
        </member>
        <member name="P:IDENTEC.IBusDevice.FirmwareVersion">
            <summary>
            Gets the Firmware version.
            </summary>
            <value>The Firmware version.</value>
        </member>
        <member name="P:IDENTEC.IBusDevice.DataStream">
            <summary>
            Get the device Datastream
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.BeaconReaders.iPortR2.m_bEnableRxBoost">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.#ctor(IDENTEC.Readers.ModularReaderBus)">
            <summary>
            Initializes a new iPortR2 object and connects it to a ModularReaderBus.
            </summary>
            <param name="comm"></param>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.#ctor(IDENTEC.iBusAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Readers.BeaconReaders.iPortR2"/> class.
            </summary>
            <param name="iBus">The i bus.</param>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.ToString">
            <summary>
            Overriden to show <I>i-PORT R2</I>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.EnableHighRfSensitivity(System.Boolean)">
            <summary>
            Enables/disables high sensitivty receive.
            <seealso cref="P:IDENTEC.Readers.BeaconReaders.iPortR2.RxBoostEnabled"/>
            <seealso cref="P:IDENTEC.Tags.Tag.Signal"/>
            </summary>
            <param name="enable">True for -85 receive, false for -55 receive</param>
            <returns></returns>
            <remarks>When disabled the reader's range will be significantly reduced. You may find it more useful to filter tags at the application level based on the tag's signal strength</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.SetTagSignalFilterLevel(System.Int32)">
            <summary>
            Sets up a filter so tags that are ignored when detected at levels below the specified signal (dBm)
            </summary>
            <param name="minSignal"></param>
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.GetTagSignalFilterLevel">
            <summary>
            Gets the current signal filter used to ignore tags that are detected at levels below the specified signal (dBm)
            </summary>
            <returns></returns>
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.LimitNumberOfTagsDuringRequest(System.Int32)">
            <summary>
            Limits the number of tags the reader responds with during a request for tags.
            </summary>
            <param name="maxTags">The maximum number of tags the reader will reply with during a request. Set to 0 for unlimited or any number below 100.</param>
            <returns></returns>
            <remarks>The default on power-up is 0.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.SetTagListBehavior(IDENTEC.Readers.BeaconReaders.TagListBehavior)">
            <summary>
            Sets the reader's list behavior.
            <seealso cref="T:IDENTEC.Readers.BeaconReaders.TagListBehavior"/>				
            <seealso cref="M:IDENTEC.Readers.BeaconReaders.iPortR2.GetTagListBehavior"/>
            </summary>
            <remarks>You should clear the list after changing the list behavior!!</remarks>
            <param name="mode">The TagListBehavior enumerated setting.</param>			
            <returns></returns>			
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.GetTagListBehavior">
            <summary>
            Queries the reader for its list behavior.
            </summary>
            <seealso cref="M:IDENTEC.Readers.BeaconReaders.iPortR2.SetTagListBehavior(IDENTEC.Readers.BeaconReaders.TagListBehavior)"/>
            <returns></returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.SetTagListInhibitTime(System.TimeSpan)">
            <summary>
            Tags that have not been detected in longer than the inhibit time and have been reported are removed from the reader's internal list.
            </summary>
            <param name="lifetimeInList">The length of time that the tag remains in the list if it is not detected again. Set to 0 to keep the tag in the list. </param>
            <returns></returns>
            <remarks>The default is 60 seconds when the unit powers up.</remarks>
            <remarks>The resolution of the reader's timer is in seconds.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.SetTagReReportingInterval(System.TimeSpan)">
            <summary>
            The time in seconds after which a tag is re-reported if it is still detected.
            </summary>
            <param name="interval">The amount of time after which a tag is re-reported if it is still detected. To disable re-reporting set to 0 (default on power up). </param>
            <returns></returns>
            <remarks>The resolution of the reader's timer is in seconds.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.ClearTagList">
            <summary>
            Removes all tags from the reader's list.
            </summary>
            <returns></returns>
            <remarks>The list is empty on power-up.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.SetAllTagsInListAsNotYetReported">
            <summary>
            This command causes a resend of all tags in reader memory  (schedule for retransmission).
            </summary>
            <returns>True if successful, false if it fails.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.SetFrequency(IDENTEC.Frequency)">
            <summary>
            Set the device frequency
            </summary>
            <param name="freq">The frequency to use</param>
            <returns>True is successfull</returns>
            <seealso cref="T:IDENTEC.Frequency"/>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.ResetToFactoryDefault">
            <summary>
            This command reset all parameters to default configuration.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.RXReaderMessages(System.UInt32,System.Byte,System.Exception@)">
            <summary>
            Receive all readers messages
            </summary>
            <param name="MaxMessages">The maximum number of messages to receive. If 0 unlimited</param>
            <param name="Cmd">The command used to get those messages</param>
            <param name="RXException"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.GetTagsVariableDataLen">
            <summary>
            Gets the tag list from the reader. 
            </summary>
            <returns>The collection of tags that have been detected.</returns>
            <exception cref="T:System.InvalidOperationException">The reader returned the wrong command code.</exception>	
            <remarks>The <see cref="P:IDENTEC.Tags.Tag.ContactTime"/> property of the iB2Tag is actually the last time the tag was seen when <I>enableExtendedInfo</I> is enabled and may not be the current time. When <I>enableExtendedInfo</I> is disabled the <see cref="P:IDENTEC.Tags.Tag.ContactTime"/> may not reflect the actual time the tag was detected.</remarks>				
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.ParseDetection(System.DateTime,System.Byte[],System.Int32)">
            <summary>
            Parse antenna detection from response
            </summary>
            <param name="time">The date data has been received</param>
            <param name="buffer">the buffer to parse</param>
            <param name="offset">The offset of the data in the buffer</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.GetTags(System.Boolean)">
            <summary>
            Gets the tag list from the reader. 
            <seealso cref="P:IDENTEC.Tags.BeaconTags.iB2Tag.DetectedCount"/>
            </summary>
            <param name="enableExtendedInfo">True to include the tag's detected count since the last call to GetTags or ClearTags.</param>			
            <returns>The collection of tags that have been detected.</returns>
            <exception cref="T:System.InvalidOperationException">The reader returned the wrong command code.</exception>	
            <remarks>The <see cref="P:IDENTEC.Tags.Tag.ContactTime"/> property of the iB2Tag is actually the last time the tag was seen when <I>enableExtendedInfo</I> is enabled and may not be the current time. When <I>enableExtendedInfo</I> is disabled the <see cref="P:IDENTEC.Tags.Tag.ContactTime"/> may not reflect the actual time the tag was detected.</remarks>				
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.GetBusAddress">
            <summary>
            Gets the bus address.
            </summary>
            <returns>The bus address.</returns>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.SetBusAddress(System.Int32)">
            <summary>
            Sets the bus address.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortR2.ConnectSlavePort(System.Boolean)">
            <summary>
            Connects the slave port.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iPortR2.RxBoostEnabled">
            <summary>
            Reports the status of the receive boost enabled.
            <seealso cref="M:IDENTEC.Readers.BeaconReaders.iPortR2.EnableHighRfSensitivity(System.Boolean)"/>
            </summary>
            <remarks>This property is only valid after a connection to an actual i-PORT R2 has been made.</remarks>
        </member>
        <member name="T:IDENTEC.Readers.BeaconReaders.iPortMB">
            <summary>
            Represents an i-PORT MB modular beacon reader
            </summary>
            <seealso cref="T:IDENTEC.iBusAdapter"/>
            <seealso cref="T:IDENTEC.DataStream"/>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortMB.#ctor(IDENTEC.Readers.ModularReaderBus)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Readers.BeaconReaders.iPortMB"/> class.
            </summary>
            <param name="comm"></param>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortMB.#ctor(IDENTEC.Readers.ModularReaderBus,IDENTEC.Readers.BeaconReaders.iPortR2)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Readers.BeaconReaders.iPortMB"/> class.
            </summary>
            <param name="comm">The comm.</param>
            <param name="r2">The r2.</param>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortMB.#ctor(IDENTEC.iBusAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Readers.BeaconReaders.iPortMB"/> class.
            </summary>
            <param name="iBus">The i bus.</param>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortMB.EnableHighRfSensitivity(System.Int32,System.Boolean)">
            <summary>
            Enables/disables the receive boost setting on the reader.
            </summary>
            <param name="antenna"></param>
            <param name="enable"></param>
            <returns></returns>
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortMB.SetDataLen(System.Int32)">
            <summary>
            Sets the reader's internal taglist's data length.
            <seealso cref="T:IDENTEC.Readers.BeaconReaders.TagListBehavior"/>				
            <seealso cref="M:IDENTEC.Readers.BeaconReaders.iPortMB.GetDataLen(System.Int32)"/>
            </summary>
            <remarks>You should clear the list after changing the data length!!</remarks>
            <param name="len">The maximum number of bytes to save. Maximum is 64</param>			
            <returns></returns>							
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortMB.GetDataLen(System.Int32)">
            <summary>
            Gets the reader's internal taglist's data length.
            <seealso cref="T:IDENTEC.Readers.BeaconReaders.TagListBehavior"/>				
            <seealso cref="M:IDENTEC.Readers.BeaconReaders.iPortMB.SetDataLen(System.Int32)"/>
            </summary>
            <param name="len">The maximum number of bytes to save. Maximum is 64</param>			
            <returns></returns>							
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortMB.SetTagSignalFilterLevelAntenna(System.Int32,System.Int32)">
            <summary>
            Sets up a filter so tags that are ignored when detected at levels below the specified signal (dBm)
            </summary>
            <param name="minSignal"></param>
            <param name="antenna">The antenna to set the filter on.</param>
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortMB.GetTagSignalFilterLevel(System.Int32)">
            <summary>
            Gets the current signal filter used to ignore tags that are detected at levels below the specified signal (dBm)
            </summary>
            <returns></returns>
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortMB.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortMB.ToString">
            <summary>
            Overriden to show <I>i-PORT MB</I>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortMB.GetTagsOnSeparateAntennas">
            <summary>
            Returns a list of tags and specifies the signal for each antenna a tag was detected with.
            </summary>
            <returns>A collection of tags detected</returns>
            <seealso cref="P:IDENTEC.Tags.BeaconTags.iB2Tag.AnntennaInfo"/>
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortMB.GetStatus">
            <summary>
            Gets the status.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            The reader does not support this operation.
            </exception>
            <remarks>If the reader is actually an i-PORT R2, then this operation is not supported.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iPortMB.GetRegion">
            <summary>
            Gets the reader frequency.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            The reader does not support this operation.
            </exception>
            <remarks>If the reader is actually an i-PORT R2, then this operation is not supported.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iPortMB.RxBoostEnabledAntenna2">
            <summary>
            Gets a value indicating whether rx boost enabled on antenna 2.
            </summary>
            <value>
            	<c>true</c> if [rx boost enabled antenna2]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iPortMB.Region">
            <summary>
            The RF frequency. Set this to NA (916.5MHz) or European (868MHz). 
            <seealso cref="P:IDENTEC.Tags.Tag.Region"/>
            </summary>		
            <exception cref="T:IDENTEC.Readers.RegionException">Thrown when the region specified is incompatible.</exception>				
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iPortMB.IsiPortR2">
            <summary>
            Gets a value indicating whether the device connected is actually an i-PORT R2
            </summary>
            <value><c>true</c> if [isi port r2]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iPortMB.AntennaCount">
            <summary>
            Gets the antenna count.
            </summary>
            <value>The antenna count.</value>
        </member>
        <member name="T:IDENTEC.CommPortException">
            <summary>
            Exceptions thrown by the communications port
            </summary>
        </member>
        <member name="M:IDENTEC.CommPortException.#ctor(System.String)">
            <summary>
            Default CommPortException
            </summary>
            <param name="desc"></param>
        </member>
        <member name="M:IDENTEC.CommPortException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.CommPortException"/> class.
            </summary>
            <param name="desc">The desc.</param>
            <param name="Win32ErrorCode">The win32 error code.</param>
        </member>
        <member name="P:IDENTEC.CommPortException.Win32ErrorCode">
            <summary>
            Gets the win32 error code.
            </summary>
            <value>The win32 error code.</value>
        </member>
        <member name="T:IDENTEC.CommEventFlags">
            <summary>
            Event Flags
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.NONE">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.RXCHAR">
            <summary>
            Event on receive
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.RXFLAG">
            <summary>
            Event when specific character is received
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.TXEMPTY">
            <summary>
            Event when the transmit buffer is empty
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.CTS">
            <summary>
            Event on CTS state change
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.DSR">
            <summary>
            Event on DSR state change
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.RLSD">
            <summary>
            Event on RLSD state change
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.BREAK">
            <summary>
            Event on BREAK
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.ERR">
            <summary>
            Event on line error
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.RING">
            <summary>
            Event on ring detect
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.PERR">
            <summary>
            Event on printer error
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.RX80FULL">
            <summary>
            Event on 80% high-water
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.EVENT1">
            <summary>
            Provider event 1
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.EVENT2">
            <summary>
            Provider event 2
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.POWER">
            <summary>
            Event on CE power notification
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.ALLCE">
            <summary>
            Mask for all flags under CE
            </summary>
        </member>
        <member name="F:IDENTEC.CommEventFlags.ALLPC">
            <summary>
            Mask for all flags under desktop Windows
            </summary>
        </member>
        <member name="T:IDENTEC.CommErrorFlags">
            <summary>
            Error flags
            </summary>
        </member>
        <member name="F:IDENTEC.CommErrorFlags.RXOVER">
            <summary>
            Receive overrun
            </summary>
        </member>
        <member name="F:IDENTEC.CommErrorFlags.OVERRUN">
            <summary>
            Overrun
            </summary>
        </member>
        <member name="F:IDENTEC.CommErrorFlags.RXPARITY">
            <summary>
            Parity error
            </summary>
        </member>
        <member name="F:IDENTEC.CommErrorFlags.FRAME">
            <summary>
            Frame error
            </summary>
        </member>
        <member name="F:IDENTEC.CommErrorFlags.BREAK">
            <summary>
            BREAK received
            </summary>
        </member>
        <member name="F:IDENTEC.CommErrorFlags.TXFULL">
            <summary>
            Transmit buffer full
            </summary>
        </member>
        <member name="F:IDENTEC.CommErrorFlags.IOE">
            <summary>
            IO Error
            </summary>
        </member>
        <member name="F:IDENTEC.CommErrorFlags.MODE">
            <summary>
            Requested mode not supported
            </summary>
        </member>
        <member name="T:IDENTEC.CommModemStatusFlags">
            <summary>
            Modem status flags
            </summary>
        </member>
        <member name="F:IDENTEC.CommModemStatusFlags.MS_CTS_ON">
            <summary>
            The CTS (Clear To Send) signal is on.
            </summary>
        </member>
        <member name="F:IDENTEC.CommModemStatusFlags.MS_DSR_ON">
            <summary>
            The DSR (Data Set Ready) signal is on.
            </summary>
        </member>
        <member name="F:IDENTEC.CommModemStatusFlags.MS_RING_ON">
            <summary>
            The ring indicator signal is on.
            </summary>
        </member>
        <member name="F:IDENTEC.CommModemStatusFlags.MS_RLSD_ON">
            <summary>
            The RLSD (Receive Line Signal Detect) signal is on.
            </summary>
        </member>
        <member name="T:IDENTEC.CommEscapes">
            <summary>
            Communication escapes
            </summary>
        </member>
        <member name="F:IDENTEC.CommEscapes.SETXOFF">
            <summary>
            Causes transmission to act as if an XOFF character has been received.
            </summary>
        </member>
        <member name="F:IDENTEC.CommEscapes.SETXON">
            <summary>
            Causes transmission to act as if an XON character has been received.
            </summary>
        </member>
        <member name="F:IDENTEC.CommEscapes.SETRTS">
            <summary>
            Sends the RTS (Request To Send) signal.
            </summary>
        </member>
        <member name="F:IDENTEC.CommEscapes.CLRRTS">
            <summary>
            Clears the RTS (Request To Send) signal
            </summary>
        </member>
        <member name="F:IDENTEC.CommEscapes.SETDTR">
            <summary>
            Sends the DTR (Data Terminal Ready) signal.
            </summary>
        </member>
        <member name="F:IDENTEC.CommEscapes.CLRDTR">
            <summary>
            Clears the DTR (Data Terminal Ready) signal.
            </summary>
        </member>
        <member name="F:IDENTEC.CommEscapes.SETBREAK">
            <summary>
            Suspends character transmission and places the transmission line in a break state until the ClearCommBreak function is called (or EscapeCommFunction is called with the CLRBREAK extended function code). The SETBREAK extended function code is identical to the SetCommBreak function. This extended function does not flush data that has not been transmitted.
            </summary>
        </member>
        <member name="F:IDENTEC.CommEscapes.CLRBREAK">
            <summary>
            Restores character transmission and places the transmission line in a nonbreak state. The CLRBREAK extended function code is identical to the ClearCommBreak function
            </summary>
        </member>
        <member name="F:IDENTEC.CommEscapes.SETIR">
            Set the port to IR mode.
        </member>
        <member name="F:IDENTEC.CommEscapes.CLRIR">
            <summary>
            Set the port to non-IR mode.
            </summary>
        </member>
        <member name="T:IDENTEC.APIErrors">
            <summary>
            Error values from serial API calls
            </summary>
        </member>
        <member name="F:IDENTEC.APIErrors.ERROR_FILE_NOT_FOUND">
            <summary>
            Port not found
            </summary>
        </member>
        <member name="F:IDENTEC.APIErrors.ERROR_INVALID_NAME">
            <summary>
            Invalid port name
            </summary>
        </member>
        <member name="F:IDENTEC.APIErrors.ERROR_ACCESS_DENIED">
            <summary>
            Access denied
            </summary>
        </member>
        <member name="F:IDENTEC.APIErrors.ERROR_INVALID_HANDLE">
            <summary>
            invalid handle
            </summary>
        </member>
        <member name="F:IDENTEC.APIErrors.ERROR_IO_PENDING">
            <summary>
            IO pending
            </summary>
        </member>
        <member name="T:IDENTEC.ByteBufferArray">
            <summary>
            A buffer that supports dynamic resizing of the byte array. Based on the List T implementation (does not use ListT).
            </summary>
        </member>
        <member name="M:IDENTEC.ByteBufferArray.ToArray(System.Int32)">
            <summary>
            Gets a portion of the array
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.ByteBufferArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Byte"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="F:IDENTEC.IC3ProtocolMessage.EOT">
            <summary>
            End Of Transmission
            </summary>
        </member>
        <member name="F:IDENTEC.IC3ProtocolMessage.DLE">
            <summary>
            Data Link Escape
            </summary>
        </member>
        <member name="M:IDENTEC.IC3ProtocolMessage.SynchronizeMessage">
            <summary>
            Remove all bytes received before SOH
            to make sure a message start with SOH
            </summary>
        </member>
        <member name="M:IDENTEC.IC3ProtocolMessage.SplitBuffer">
            <summary>
            Splits the buffer by returning a new instance; note that the new instance may not be a complete message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.IC3ProtocolMessage.CheckResponse(System.Byte,System.Byte)">
            <summary>
            Checks the response.
            </summary>
            <param name="address">The address.</param>        
            <param name="command">The command sent to the device.</param>
            <returns>The command status code; 0 if everything is OK.</returns>        
            <exception cref="T:IDENTEC.InvalidDeviceResponseException">The device had the incorrect response code.</exception>
            <exception cref="T:System.InvalidOperationException">The message length is invalid.</exception>
        </member>
        <member name="P:IDENTEC.IC3ProtocolMessage.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Byte"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:IDENTEC.IC3ProtocolMessage.MessageBodyLength">
            <summary>
            The body length with out the CRC or the transmission characters
            </summary>
        </member>
        <member name="T:IDENTEC.CRC">
            <summary>
            The CRC class that helps us calculate a CRC for communications with the iCard
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.ISolProtocolFramer">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.ISolProtocolFramer.SOH">
            <summary>
            Start Of Header
            </summary> 
        </member>
        <member name="F:IDENTEC.Readers.ISolProtocolFramer.EOT">
            <summary>
            End Of Transmission
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.ISolProtocolFramer.DLE">
            <summary>
            Data Link Escape
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.ISolProtocolFramer.m_byBusAddress">
            <summary>
            The address if multiple readers are used on a bus; that is modular readers such as the T2
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.ISolProtocolFramer.m_mutexConnection">
            <summary>
            Helps with multiple connections between applications (CF does not support the constructor we need to use
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.ISolProtocolFramer.StuffiCard3Message(System.Int32@,System.Byte[],System.Byte)">
            <summary>
            
            </summary>
            <param name="nIndex"></param>
            <param name="bySendBuffer"></param>
            <param name="byChar"></param>
        </member>
        <member name="M:IDENTEC.Readers.ISolProtocolFramer.ClearReceiveBuffer">
            <summary>
            Resets the buffer count so that the instance doesn't think it still has data in the buffer.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.ISolProtocolFramer.SendMessage(System.Byte[],System.Int32)">
            <summary>
            Frames the message with SOH, EOT CRC's etc.
            </summary>
            <param name="msg"></param>
            <param name="len"></param>
        </member>
        <member name="M:IDENTEC.Readers.ISolProtocolFramer.ConnectPCMCIA(System.Int32)">
            <summary>
            The PCMCIA port number to connect to.
            </summary>
            <param name="nPort">The port number; the first iCard in the system is 1</param>
            <returns></returns>
        </member>
        <member name="E:IDENTEC.Readers.ISolProtocolFramer.PacketReceived">
            <summary>
            The event that is fired each time a full message is received.			
            </summary>
        </member>
        <member name="E:IDENTEC.Readers.ISolProtocolFramer.PacketSent">
            <summary>
            The event that is fired each time a full message is sent.			
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.ISolProtocolFramer.Transport.Serial">
            <summary>
            A serial/PCMCIA connection
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.ISolProtocolFramer.Transport.TCP">
            <summary>
            A TCP socket based (client) connection
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.ISolProtocolFramer.Transport.Stream">
            <summary>
            Compatible stream (Serial port, file?)
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.ISolProtocolFramer.Transport.DataStream2007">
            <summary>
            New (2007) stream class based
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.iCardCommunicationsException">
            <summary>
            The exception that is thrown when communication with the i-CARD fails for one reason or another.		
            </summary>		
        </member>
        <member name="M:IDENTEC.Readers.iCardCommunicationsException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iCardCommunicationsException.#ctor(System.String)">
            <summary>
            Constructor containing a message.
            </summary>
            <param name="message">Message detailing the exception source.</param>
        </member>
        <member name="M:IDENTEC.Readers.iCardCommunicationsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message and a reference to the inner 
            exception that is the cause of this exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The inner exception reference.</param>
        </member>
        <member name="T:IDENTEC.Readers.iCardTimeoutException">
            <summary>
            The exception that is thrown when a timeout communicating with the i-CARD occurs.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iCardTimeoutException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iCardTimeoutException.#ctor(System.String)">
            <summary>
            Constructor containing a message.
            </summary>
            <param name="message">Message detailing the exception source.</param>
        </member>
        <member name="M:IDENTEC.Readers.iCardTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message and a reference to the inner 
            exception that is the cause of this exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The inner exception reference.</param>
        </member>
        <member name="T:IDENTEC.Readers.ReaderTimeoutException">
            <summary>
            The exception that is thrown when a timeout communicating with the reader occurs.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.ReaderTimeoutException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.ReaderTimeoutException.#ctor(System.String)">
            <summary>
            Constructor containing a message.
            </summary>
            <param name="message">Message detailing the exception source.</param>
        </member>
        <member name="M:IDENTEC.Readers.ReaderTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message and a reference to the inner 
            exception that is the cause of this exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The inner exception reference.</param>
        </member>
        <member name="T:IDENTEC.Readers.iCard3">
            <summary>
            Represents an i-CARD 3 reader.
            </summary>
            <example>
            This example shows how to connect to an i-CARD 3 and scan for tags at a high power. <B>[C#]:</B>
            <code>
            		using IDENTEC.Readers;
            		using IDENTEC.Tags;
            
            		class NewTest
            		{
            			public static void Main()
            			{
            				iCard3 myReader = new iCard3();
            				try
            				{
            					if (myReader.Connect())
            					{
            						// Set the transmission power to be high so that we detect tags at a fair distance
            						myReader.TxPowerIQ = 6;
            						// Scan for up to 64 tags; allow them to blink when they respond
            						TagCollection tags = myReader.ScanForIQTags(64, true);
            						// Sort the tags numerically
            						tags.Sort();
            						Console.WriteLine(tags.Count + " tags detected during scan:");
            						foreach (Tag t in tags)
            						{
            							Console.WriteLine(t.Number);
            						}
            					}
            				}
            				catch (Exception ex)
            				{
            					Console.WriteLine(ex);
            				}            
            			}
            		}			
            </code>
            <B>Output</B>			
            <code>
            		22 tags detected during scan:
            		208753
            		209648
            		330205
            		369021
            		369027
            		369938
            		380008
            		200055865
            		200066462
            		200071726
            		200072219
            		200074601
            		200074604
            		200074606
            		200074607
            		200074617
            		200074630
            		200081930
            		200081940
            		200081996
            		220000800
            		220000821
            </code>
            </example>
        </member>
        <member name="T:IDENTEC.Readers.iCard">
            <summary>
            Represents an i-CARD based RFID reader. These cards typically work through the Type II PC Slot or via a special RS232 cable (serial port connection)
            <seealso cref="T:IDENTEC.Readers.ITagReaderIQ"/>
            <seealso cref="T:IDENTEC.Readers.ITagReaderID2"/>
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard.m_deviceCode">
            <summary>
            The device code as set by the i-CARD protocol.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iCard.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iCard.Connect(System.Int32)">
            <summary>
            Connects to the reader using its default connection type. 			
            </summary>
            <remarks>Refer to the specific reader class to see what type of connection is applicable.</remarks>
            <param name="port">The port number to connect to.</param>
            <returns>True if successful, false if it fails.</returns>		
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            </exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard.TestCommunications">
            <summary>
            Tests communications 
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iCard.CompareTo(System.Object)">
            <summary>
            Compares i-CARD's based on their serial numbers
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.Readers.iCard.ProductionInformation">
            <summary>
            The production information
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCard.SerialNumber">
            <summary>
            The i-CARD  unique identifier.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCard.Information">
            <summary>
            i-CARD version information.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCard.Region">
            <summary>
            The RF frequency. Set this to NA (916.5MHz) or European (868MHz). 
            <seealso cref="P:IDENTEC.Tags.Tag.Region"/>
            </summary>		
            <exception cref="T:IDENTEC.Readers.RegionException">Thrown when the region specified is incompatible.</exception>				
        </member>
        <member name="P:IDENTEC.Readers.iCard.DeviceStatus">
            <summary>
            The error code as returned by the hardware. It is reset with each call to the card and may provide additional troubleshooting information.
            </summary>
            <remarks>This is the <B><I>device error code</I></B> message as returned directly from the card's low level communications with the tag(s). If there are no problems then OK is returned.</remarks>
        </member>
        <member name="T:IDENTEC.Readers.iCard.DeviceCode">
            <summary>
            The status codes provided from the i-CARD hardware after all communications.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard.DeviceCode.OK">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard.DeviceCode.NoAcknowledgementFromTag">
            <summary>
            The reader could not contact the specified tag.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard.DeviceCode.TagPartialRead">
            <summary>
            Only a partial amount of the data requested could be read
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard.DeviceCode.InvalidParameter">
            <summary>
            The internal parameter was invalid
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard.DeviceCode.TagNoSessionSetup">
            <summary>
            A <I>session</I> could not be established with the tag.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard.DeviceCode.TagNoRead">
            <summary>
            The reader could not read data from the tag.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard.DeviceCode.TagSignalTooWeak">
            <summary>
            The signal was too weak.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard.DeviceCode.TagPartialWrite">
            <summary>
            Only a partial amount of the data requested could be written to the tag.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard.DeviceCode.TagNoWrite">
            <summary>
            The reader could not write data on the tag.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard.DeviceCode.TagWriteNoAcknowledge">
            <summary>
            The reader did not receive an acknowledgment from the tag during a data write.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard.DeviceCode.TagReadNoAcknowledge">
            <summary>
            The reader did not receive an acknowledgment from the tag during a data read.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.ITagReaderIQ">
            <summary>
            Defines properties and methods that an i-Q tag reader class implements.		
            </summary>
            <remarks>This interface is implemented by types that support i-Q tag communications.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ScanForIQTags(System.Int32)">
            <summary>
            Scan the area for i-Q type tags.
            <seealso cref="P:IDENTEC.Readers.iCard.Region"/>
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>			
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>	
            <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>
            <returns>true if successful, false if it fails.</returns>
            <remarks>If no tags are detected, the arraylist will contain 0 tags.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ScanForIQTags(System.Int32,System.Boolean)">
             <summary>
             Scan the area for i-Q type tags.
            <seealso cref="P:IDENTEC.Readers.iCard.Region"/>
             </summary>
             <example>
             This example shows how to connect to an i-CARD 3 and scan for tags at a high power. <B>[C#]:</B>
             <code>
            			using IDENTEC.Readers;
            			using IDENTEC.Tags;
            
            			class NewTest
            			{
            				public static void Main()
            				{
            					iCard3 myReader = new iCard3();
            					try
            					{
            						if (myReader.Connect())
            						{
            							// Set the transmission power to be high so that we detect tags at a fair distance
            							myReader.TxPowerIQ = 6;
            							// Scan for up to 64 tags; allow them to blink when they respond
            							TagCollection tags = myReader.ScanForIQTags(64, true);
            							// Sort the tags numerically
            							tags.Sort();
            							Console.WriteLine(tags.Count + " tags detected during scan:");
            							foreach (Tag t in tags)
            							{
            								Console.WriteLine(t.Number);
            							}
            						}
            					}
            					catch (Exception ex)
            					{
            						Console.WriteLine(ex);
            					}            
            				}
            			}			
             </code>
             <B>Output</B>			
             <code>
            			22 tags detected during scan:
            			208753
            			209648
            			330205
            			369021
            			369027
            			369938
            			380008
            			200055865
            			200066462
            			200071726
            			200072219
            			200074601
            			200074604
            			200074606
            			200074607
            			200074617
            			200074630
            			200081930
            			200081940
            			200081996
            			220000800
            			220000821
             </code>
             </example>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>			
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>		
             <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>
             <param name="blink">When set to true the tags detected in the scan will blink.</param>
             <returns>true if successful, false if it fails.</returns>
             <remarks>If no tags are detected, the arraylist will contain 0 tags.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.WriteTagData(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write data to the tag's EEPROM memory.
            </summary>
            <param name="tag">The tag to write data to.</param>
            <param name="address">The start address to begin writing data at.</param>
            <param name="byData">The data to write.</param>
            <param name="bytesToWrite">The number of bytes to write.</param>		
            <remarks>For i-Q tags, the start address should be 160 or greater. If communications with the tag fails, you can check the number of bytes actually written.</remarks>
            <returns>true if successful, false if it fails</returns>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadTagData(IDENTEC.Tags.iQTag,System.Int32,System.Int32)">
            <summary>
            Reads unformatted data from the tag.
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <param name="tag">The tag to read data from.</param>
            <param name="address">The start address of the requested data.</param>		
            <param name="bytesToRead">The number of bytes to read.</param>		
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)">
             <summary>
             Writes a string to the tag.
             <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.ReadTagDataString(IDENTEC.Tags.iQTag,System.Int32)"/>
             <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)"/>	
             <seealso cref="P:System.Text.Encoding.ASCII"/>				 				
             </summary>
             <example>This example shows how to write and read text data with tags <B>[C#]:</B>
             <code>
            	using System;
            	using System.Diagnostics;
            	using System.Collections;
            	using IDENTEC.Readers;
            	using IDENTEC.Tags;
            
            	namespace Read_and_Write_Tag_Data
            			  {
            	class ExampleReadWriteTags
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			iCard3 myReader = new iCard3();
            			// Since we are doing a lot of communications, set the card retries high
            			myReader.Retries = 4;			
            			try
            			{
            				if (myReader.Connect())
            				{
            					// Set the transmission power to be high
            					myReader.TxPowerIQ = 6;
            					// Scan for up to 32 tags; no blink during scan
            					TagCollection tags = myReader.ScanForIQTags(32, false);
            					// Sort the tags numerically
            					tags.Sort();					
            			
            					ArrayList phrases = new ArrayList();
            					phrases.Add("You say yes");
            					phrases.Add("I say no");
            					phrases.Add("You say stop");
            					phrases.Add("And I say go go go");
            					phrases.Add("You say goodbye");
            					phrases.Add("And I say hello");
            					phrases.Add("Hello hello");
            					Random rand = new Random();
            					TagCollection successfulTags = new TagCollection();
            
            					foreach (iQTag t in tags)
            					{
            						if (phrases.Count == 0)
            							break;
            						try
            						{
            							int i = rand.Next(0, phrases.Count -1);
            							TagWriteDataResult writeResult =
            								myReader.WriteTagDataString(t, 200, phrases[i] as string);
            							if (writeResult.Success)
            							{
            								//remove the phrase so that each tag has something unique to say
            								phrases.RemoveAt(i);
            								successfulTags.Add(t);
            							}
            						}
            						catch (iCardCommunicationsException ex)
            						{
            							Console.WriteLine("An error occured communicating with the iCard: " + ex.Message);
            						}
            						catch (Exception ex)
            						{
            							Console.WriteLine("An error occured: " + ex.Message);
            						}						
            					}					
            
            					foreach (iQTag t in successfulTags)
            					{
            						TagReadStringResult readResult = myReader.ReadTagDataString(t, 200);
            						if (readResult.Success)
            							Console.WriteLine(t.ToString() + ": " + readResult.Text);
            					}
            				}
            			}
            			catch (Exception ex)
            			{
            				Console.WriteLine(ex);
            			} 
            			Console.WriteLine("Press ENTER to continue...");
            			Console.ReadLine();
            		}
            	}
            }
            </code>
            <B>Output:</B>
            <code>
            208753: You say goodbye
            209648: You say stop
            369021: I say no
            369027: And I say hello
            383261: And I say go go go
            200066114: You say yes
            230001047: Hello hello
            Press ENTER to continue...
            </code>
             </example>			
             <param name="tag">The tag to write the string to.</param>
             <param name="address">The start address.</param>
             <param name="text">The text to write to the tag.</param>		
             <returns>true if successful, false if it fails.</returns>
             <remarks>Only standard ASCII text is valid. Extended characters are not compatible. Uses WriteTagDataWithCRCAndLength</remarks>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <exception cref="T:System.ArgumentNullException"> <I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>	
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes data to a tag with a crc and a known length.
            <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            </summary>
            <param name="tag">the tag to write formatted data to.</param>
            <param name="address">The memory address to store the data.</param>
            <param name="byData">The byte array of data.</param>
            <param name="bytesToWrite">The number of bytes to write from <I>byData</I> on to the tag.</param>		
            <returns>A reference to a TagWriteDataResult object.</returns>
            <remarks>A 5 byte header is actually written to the tag at the address specified. If you try to read the data raw at this address, you will read the header. <B>Therefore the actual amount of data you write on the tag is <I>bytesToWrite</I> + 5.</B></remarks>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <exception cref="T:System.ArgumentNullException"> <I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>	
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Reads formatted data off of the tag that was written using WriteTagDataWithCRCAndLength
            </summary>
            <param name="tag"></param>
            <param name="address"></param>					
            <returns></returns>			
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            </exception>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadTagDataString(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Reads a formatted data off of the tag as a string.
            <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            <seealso cref="P:System.Text.Encoding.ASCII"/>
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="address">The memory address on the tag.</param>				
            <returns>A TagReadStringResult object containing the string.</returns>
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            </exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <remarks><I>tag</I> must already have formatted string data at the given <I>address</I>.</remarks>			
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.BlinkTag(IDENTEC.Tags.iQTag,System.Int32)">
             <summary>
             Some versions of iQ based tags support a periodic blink command.	
            <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.PingTag(IDENTEC.Tags.iQTag)"/>
             <seealso cref="M:IDENTEC.Readers.ITagReaderID2.BlinkTag(IDENTEC.Tags.iD2Tag,System.TimeSpan,System.TimeSpan,System.Int32)"/>
             </summary>
             <remarks>The tag will blink every 500ms for the specified count.</remarks>
             <param name="tag">The tag to blink.</param>
             <param name="blinkCount">The nunber of blinks. 255 maximum.</param>
             <returns>True if successful, false if it fails.</returns>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
              to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
             </exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><I>blinkCount</I> exceeds the maximum 255 blinks allowed.</exception>			
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.SleepTag(IDENTEC.Tags.iQTag,System.Int32)">
             <summary>
             Sets the tag into a state where it does not respond to any RF for the specified time.
             </summary>
             <example>
             <B>[C#]</B>
             <code>
            	using System;
            	using IDENTEC.Readers;
            	using IDENTEC.Tags;
            		
            	namespace ScanAndSleep
            	{
            	class NewTest
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			iCard3 myReader = new iCard3();
            			try
            			{
            				if (myReader.Connect())
            				{
            					/// Set the transmission power to be high so that we detect tags at a medium distance
            					myReader.TxPowerIQ = 0;
            					/// Scan for up to 32 tags; no blink during scan
            					TagCollection tags = myReader.ScanForIQTags(32, false);
            					/// Sort the tags numerically
            					tags.Sort();
            					Console.WriteLine(tags.Count + " tags detected during scan:");
            							/// Bump up the transmission power a bit in case the tag is moving away from the reader
            					myReader.TxPowerIQ = 3;
            					foreach (iQTag t in tags)
            					{
            						try
            						{
            							if (myReader.SleepTag(t, 30))
            							{
            								Console.WriteLine("Tag " + t.Number + " now sleeping for 30 seconds");
            							}
            							else
            							{
            								Console.WriteLine("Could not sleep tag " + t.Number + ". Reason: " 
            									+ myReader.DeviceStatus);
            							}
            						}
            						catch (iCardCommunicationsException ex)
            						{
            							Console.WriteLine("An error occured communicating with the iCard: " + ex.Message);
            						}
            						catch (Exception ex)
            						{
            							Console.WriteLine("An error occured: " + ex.Message);
            						}						
            					}
            				}
            			}
            			catch (Exception ex)
            			{
            				Console.WriteLine(ex);
            			} 
            		}
            	}
            }
            </code>
            <B>Output</B>
            	<code>
            	4 tags detected during scan:
            	Tag 369021 now sleeping for 30 seconds
            	Tag 369027 now sleeping for 30 seconds
            	Tag 380008 now sleeping for 30 seconds
            	Tag 200074689 now sleeping for 30 seconds			
            </code>
             </example>
             <param name="tag"></param>
             <param name="seconds">The number of seconds to sleep. Maximum of 255.</param>
             <returns>True if successful, false if it fails.</returns>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.PingTag(IDENTEC.Tags.iQTag)">
             <summary>
             Contact a tag. If the tag is equipped with an LED, it will blink as a side effect.			
             <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.BlinkTag(IDENTEC.Tags.iQTag,System.Int32)"/>
             </summary>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <example> This example shows how to connect to an iCard and contact an IQ tag without scanning first and then displays the tag's state information. <B>[C#]</B>
             <code>
            using System;
            using IDENTEC.Readers;
            using IDENTEC.Tags;
            
            
            namespace iCardConnectAndPingTag
            {
            	class NewTest
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			if (args.Length == 0)
            			{
            				Console.WriteLine("You must specify a tag number to ping");
            			}
            			else
            			{				
            				try
            				{
            					uint id = uint.Parse(args[0]);
            					iCard3 myReader = new iCard3();
            					if (myReader.Connect())
            					{
            						iQTag tag = new iQTag(id);
            						if (myReader.PingTag(tag))
            						{
            							Console.WriteLine("Tag info: ");
            							Console.WriteLine("ID: " + tag.Number.ToString());
            							Console.WriteLine("Model: " +  tag.ModelType.ToString());
            							if (iQTag.LoggerInstalledState.Available == tag.LoggerInstalled)
            							{
            								Console.WriteLine("Logging State: " + tag.Logging.ToString());
            							}
            							Console.WriteLine("Range State: " + tag.Range);
            							if (tag.BatteryPercent)
            							{
            								Console.WriteLine(tag.BatteryPercentUsed.ToString() + "% of battery consumed"); 
            							}
            						}
            					}
            					else
            					{
            						Console.WriteLine("Error reading card: " + myReader.DeviceStatus);
            					}
            				}
            				catch (Exception ex)
            				{
            					Console.WriteLine("An exception was thrown : " + ex);
            				}
            			}
            			Console.WriteLine("Press Enter to continue...");
            			Console.ReadLine();                
            		}
            	}
            }
            
            </code>
            <B>Output:</B>
            <code>
            Tag info:
            ID: 200074790
            Model: IQ8N
            Range State: NormalRange
            11% of battery consumed
            Press Enter to continue...
            </code>
             </example>
             <param name="tag"></param>
             <returns>true if successful, false if communication cannot be established.</returns>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.SetTagRangeState(IDENTEC.Tags.iQTag,System.Boolean)">
            <summary>
            Sets the i-Qx tag into extended or normal range mode.
            <seealso cref="P:IDENTEC.Tags.iQTag.Range"/>
            <seealso cref="P:IDENTEC.Tags.iQTag.ReportsBatteryVoltage"/>
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <param name="tag">The i-Qx tag to communicate with.</param>
            <param name="enableExtendedRange">Set to true for extended range, false for normal range.</param>
            <remarks>The extended range state may not be as reliable as normal range for data transfer. <B>If the tag supports reporting battery voltage then a Scan must be performed before the tag will change state.</B></remarks>									
            <returns>true if successful, false if it fails</returns>						
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadiQTagVersion(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the version information from the i-Q tag.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadTagCurrentTemperature(IDENTEC.Tags.iQTag)">
            <summary>
            Forces the temperature tag to report the current temperature even if the tag is not in a logging state.
            </summary>
            <param name="tag">The tag to read the current temperature from.</param>
            <returns>A TemperatureLogSample object containing the temperature and time of the reading.</returns>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.StartTagLogging(IDENTEC.Tags.iQTag,System.TimeSpan)">
             <summary>Sets <I>tag</I> into the logging mode. If it is already logging the log will clear and restart.
             <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.StopTagLogging(IDENTEC.Tags.iQTag)"/>
             <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>	
             <remarks>The maximum sampling interval of the tag is 65 535 seconds (approx 18 hours).</remarks>
             <param name="tag">The tag to commence logging.</param>
             <param name="samplingRate">The rate at which samples are recorded in the log.</param>			
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:System.ArgumentOutOfRangeException"><I>samplingRate</I> exceeds 65535 seconds.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>						
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.StopTagLogging(IDENTEC.Tags.iQTag)">
             <summary>Stops <I>tag</I> from logging.
             <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.StartTagLogging(IDENTEC.Tags.iQTag,System.TimeSpan)"/>
             <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>	
             <remarks>A log does not need to be stopped in order to be read.</remarks>
             <param name="tag">The tag to stop logging.</param>			
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>				
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the log off of the tag and converts it to a temperature log.
             <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>			
             <remarks>This method actually calls ReadTagRawLog and does a conversion.</remarks>
             <param name="tag">The tag to read.</param>
             <returns>A TemperatureLogData object containing the sampled data.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadTagRawLog(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the log samples as stored on the tag.
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>
             <param name="tag">The tag to read.</param>
             <returns>The RawLogData object containing the raw samples.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadTagLogSamplingInterval(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the log sampling interval off of the tag.
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>
             <param name="tag">The tag to read.</param>
             <returns>The Timespan representing the logging interval.</returns>	
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadTagTemperatureExtremes(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the highest recorded temperature and lowest recorded temperature as recorded in the temperature log.		
             <seealso cref="T:IDENTEC.Tags.Logging.TemperatureExtremes"/>
             </summary>						
             <remarks>This capability is only available on i-Q temperature tags that support reporting battery percent used.
             </remarks>
             <param name="tag">The tag to contact.</param>			
             <returns>A TemperatureExtremes object.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadLastSampledTemperature(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the last temperature sample logged.
             </summary>
             <param name="tag">The tag to query.</param>
             <returns>The most recently logged TemperatureLogSample.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.StartTagDigitalInputEventLog(IDENTEC.Tags.iQTag)">
            <summary>
            Starts the tag digital input event log.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.StartTagDigitalInputEventLog(IDENTEC.Tags.iQTag,System.Boolean)">
            <summary>
            Starts the tag digital input event log.
            </summary>
            <param name="tag">The tag.</param>
            <param name="synchronize">if set to <c>true</c> [synchronize].</param>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadTagDigitalInputEventLog(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the tag digital input event log.
            </summary>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadiQLTagMarkerInfo(IDENTEC.Tags.iQTag)">
            <summary>
            Reads Marker info off of i-Q tags with the "L" indicator on the label.
            </summary>
            <param name="tag"></param>
            <returns>A Tags.LoopData object.</returns>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadIQTagAbsoluteEngineHourCounter(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the total hours logged by the tag (6 minute resolution). <B>For i-Q8C tags only.</B>
            </summary>
            <remarks>The IQ8C has a combined PNP/NPN input to recognise pulses or a high/low status. This input is polled every 2 seconds and when active increments the hour counter in RAM. If the RAM hour counter reaches the value for 6 minutes (1/10 hour), the hour counter in EEPROM is incremented. Also a absolute hour counter(not user writeable) is updated.</remarks>
            <param name="tag">The tag to read from.</param>
            <returns>The total amount of time the engine has been running for.</returns>
            <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)"/>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the user engine counter value from the tag (6 minute resolution). <B>For i-Q8C tags only.</B>
            </summary>
            <param name="tag">The tag to read from.</param>
            <returns>The amount of time the engine has been running for as specified by the user counter.</returns>
            <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.ReadIQTagAbsoluteEngineHourCounter(IDENTEC.Tags.iQTag)"/>
            <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.WriteIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag,System.TimeSpan)"/>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderIQ.WriteIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag,System.TimeSpan)">
            <summary>
            Writes the specified amount of time to the user/trip hour meter. Typically used to set the time back to zero. <B>For i-Q8C tags only.</B>
            </summary>
            <param name="tag">The tag.</param>
            <param name="ts">The amount of time to reset the user counter to. In a resolution of 6 minutes.</param>
            <remarks>The counter is reported in 6 minute increments (10x per hour). Any value lesser or greater will be rounded.</remarks>
            <seealso cref="M:IDENTEC.Readers.ITagReaderIQ.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)"/>
        </member>
        <member name="T:IDENTEC.Readers.ITagReaderID2">
            <summary>
            Defines properties and methods that an i-D2 tag reader class implements.		
            </summary>
            <remarks>This interface is implemented by types that support i-D2 tag communications.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderID2.ScanForID2Tags(System.Int32)">
            <summary>
            Scan the area for i-Q type tags.
            <seealso cref="P:IDENTEC.Readers.iCard.Region"/>
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>			
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>	
            <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>
            <returns>true if successful, false if it fails.</returns>
            <remarks>If no tags are detected, the arraylist will contain 0 tags.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderID2.ScanForID2Tags(System.Int32,System.Boolean)">
             <summary>
             Scan the area for i-Q type tags.
            <seealso cref="P:IDENTEC.Readers.iCard.Region"/>
             </summary>
             <example>
             This example shows how to connect to an i-CARD 3 and scan for tags at a high power. <B>[C#]:</B>
             <code>
            			using IDENTEC.Readers;
            			using IDENTEC.Tags;
            
            			class NewTest
            			{
            				public static void Main()
            				{
            					iCard3 myReader = new iCard3();
            					try
            					{
            						if (myReader.Connect())
            						{
            							// Set the transmission power to be high so that we detect tags at a fair distance
            							myReader.TxPowerIQ = 6;
            							// Scan for up to 64 tags; allow them to blink when they respond
            							TagCollection tags = myReader.ScanForIQTags(64, true);
            							// Sort the tags numerically
            							tags.Sort();
            							Console.WriteLine(tags.Count + " tags detected during scan:");
            							foreach (Tag t in tags)
            							{
            								Console.WriteLine(t.Number);
            							}
            						}
            					}
            					catch (Exception ex)
            					{
            						Console.WriteLine(ex);
            					}            
            				}
            			}			
             </code>
             <B>Output</B>			
             <code>
            			22 tags detected during scan:
            			208753
            			209648
            			330205
            			369021
            			369027
            			369938
            			380008
            			200055865
            			200066462
            			200071726
            			200072219
            			200074601
            			200074604
            			200074606
            			200074607
            			200074617
            			200074630
            			200081930
            			200081940
            			200081996
            			220000800
            			220000821
             </code>
             </example>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>			
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>		
             <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>
             <param name="blink">When set to true the tags detected in the scan will blink.</param>
             <returns>true if successful, false if it fails.</returns>
             <remarks>If no tags are detected, the arraylist will contain 0 tags.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderID2.WriteTagData(IDENTEC.Tags.iD2Tag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write data to the tag's EEPROM memory.
            </summary>
            <param name="tag">The tag to write data to.</param>
            <param name="address">The start address to begin writing data at.</param>
            <param name="byData">The data to write.</param>
            <param name="bytesToWrite">The number of bytes to write.</param>		
            <remarks>For i-Q tags, the start address should be 160 or greater. If communications with the tag fails, you can check the number of bytes actually written.</remarks>
            <returns>true if successful, false if it fails</returns>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderID2.ReadTagData(IDENTEC.Tags.iD2Tag,System.Int32,System.Int32)">
            <summary>
            Reads unformatted data from the tag.
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <param name="tag">The tag to read data from.</param>
            <param name="address">The start address of the requested data.</param>		
            <param name="bytesToRead">The number of bytes to read.</param>		
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderID2.WriteTagDataString(IDENTEC.Tags.iD2Tag,System.Int32,System.String)">
             <summary>
             Writes a string to the tag.
             <seealso cref="M:IDENTEC.Readers.ITagReaderID2.ReadTagDataString(IDENTEC.Tags.iD2Tag,System.Int32)"/>
             <seealso cref="M:IDENTEC.Readers.ITagReaderID2.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iD2Tag,System.Int32,System.Byte[],System.Int32)"/>	
             <seealso cref="P:System.Text.Encoding.ASCII"/>				 				
             </summary>
             <example>This example shows how to write and read text data with tags <B>[C#]:</B>
             <code>
            	using System;
            	using System.Diagnostics;
            	using System.Collections;
            	using IDENTEC.Readers;
            	using IDENTEC.Tags;
            
            	namespace Read_and_Write_Tag_Data
            			  {
            	class ExampleReadWriteTags
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			iCard3 myReader = new iCard3();
            			// Since we are doing a lot of communications, set the card retries high
            			myReader.Retries = 4;			
            			try
            			{
            				if (myReader.Connect())
            				{
            					// Set the transmission power to be high
            					myReader.TxPowerIQ = 6;
            					// Scan for up to 32 tags; no blink during scan
            					TagCollection tags = myReader.ScanForIQTags(32, false);
            					// Sort the tags numerically
            					tags.Sort();					
            			
            					ArrayList phrases = new ArrayList();
            					phrases.Add("You say yes");
            					phrases.Add("I say no");
            					phrases.Add("You say stop");
            					phrases.Add("And I say go go go");
            					phrases.Add("You say goodbye");
            					phrases.Add("And I say hello");
            					phrases.Add("Hello hello");
            					Random rand = new Random();
            					TagCollection successfulTags = new TagCollection();
            
            					foreach (iQTag t in tags)
            					{
            						if (phrases.Count == 0)
            							break;
            						try
            						{
            							int i = rand.Next(0, phrases.Count -1);
            							TagWriteDataResult writeResult =
            								myReader.WriteTagDataString(t, 200, phrases[i] as string);
            							if (writeResult.Success)
            							{
            								//remove the phrase so that each tag has something unique to say
            								phrases.RemoveAt(i);
            								successfulTags.Add(t);
            							}
            						}
            						catch (iCardCommunicationsException ex)
            						{
            							Console.WriteLine("An error occured communicating with the iCard: " + ex.Message);
            						}
            						catch (Exception ex)
            						{
            							Console.WriteLine("An error occured: " + ex.Message);
            						}						
            					}					
            
            					foreach (iQTag t in successfulTags)
            					{
            						TagReadStringResult readResult = myReader.ReadTagDataString(t, 200);
            						if (readResult.Success)
            							Console.WriteLine(t.ToString() + ": " + readResult.Text);
            					}
            				}
            			}
            			catch (Exception ex)
            			{
            				Console.WriteLine(ex);
            			} 
            			Console.WriteLine("Press ENTER to continue...");
            			Console.ReadLine();
            		}
            	}
            }
            </code>
            <B>Output:</B>
            <code>
            208753: You say goodbye
            209648: You say stop
            369021: I say no
            369027: And I say hello
            383261: And I say go go go
            200066114: You say yes
            230001047: Hello hello
            Press ENTER to continue...
            </code>
             </example>			
             <param name="tag">The tag to write the string to.</param>
             <param name="address">The start address.</param>
             <param name="text">The text to write to the tag.</param>		
             <returns>true if successful, false if it fails.</returns>
             <remarks>Only standard ASCII text is valid. Extended characters are not compatible. Uses WriteTagDataWithCRCAndLength</remarks>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <exception cref="T:System.ArgumentNullException"> <I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>	
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderID2.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iD2Tag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes data to a tag with a crc and a known length.
            <seealso cref="M:IDENTEC.Readers.ITagReaderID2.WriteTagDataString(IDENTEC.Tags.iD2Tag,System.Int32,System.String)"/>
            </summary>
            <param name="tag">the tag to write formatted data to.</param>
            <param name="address">The memory address to store the data.</param>
            <param name="byData">The byte array of data.</param>
            <param name="bytesToWrite">The number of bytes to write from <I>byData</I> on to the tag.</param>		
            <returns>A reference to a TagWriteDataResult object.</returns>
            <remarks>A 5 byte header is actually written to the tag at the address specified. If you try to read the data raw at this address, you will read the header. <B>Therefore the actual amount of data you write on the tag is <I>bytesToWrite</I> + 5.</B></remarks>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <exception cref="T:System.ArgumentNullException"> <I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>	
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderID2.ReadTagDataWithCRCAndLength(IDENTEC.Tags.iD2Tag,System.Int32)">
            <summary>
            Reads formatted data off of the tag that was written using WriteTagDataWithCRCAndLength
            </summary>
            <param name="tag"></param>
            <param name="address"></param>					
            <returns></returns>			
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            </exception>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderID2.ReadTagDataString(IDENTEC.Tags.iD2Tag,System.Int32)">
            <summary>
            Reads a formatted data off of the tag as a string.
            <seealso cref="M:IDENTEC.Readers.ITagReaderID2.WriteTagDataString(IDENTEC.Tags.iD2Tag,System.Int32,System.String)"/>
            <seealso cref="P:System.Text.Encoding.ASCII"/>
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="address">The memory address on the tag.</param>				
            <returns>A TagReadStringResult object containing the string.</returns>
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            </exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <remarks><I>tag</I> must already have formatted string data at the given <I>address</I>.</remarks>			
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderID2.SessionSetupTag(IDENTEC.Tags.iD2Tag,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets the tag into a combination of sleep and/or quiet modes. i-D2 tags have more options for sleeping than i-Q tags.			
            </summary>
            <param name="tag">The i-D2 tag to contact.</param>
            <param name="seconds"></param>
            <param name="sleep">Enables/Disables the sleep mode option.</param>
            <param name="quiet">Enables/Disables the quiet mode option.</param>
            <returns>True if successful, false if it fails.</returns>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderID2.PingTag(IDENTEC.Tags.iD2Tag)">
            <summary>
            Simple contact with a tag. If the tag is equipped with an LED, it will blink as a side effect.			
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.ITagReaderID2.BlinkTag(IDENTEC.Tags.iD2Tag,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            Invokes the i-D2 tag to blink autonomously by specifying how many blinks and customizing the flashing behavior.
            </summary>            
            <exception cref="T:System.ArgumentOutOfRangeException">The LED off time exceeds 2.55 seconds.</exception>	
            <exception cref="T:System.ArgumentOutOfRangeException">The blink count exceeds 255 seconds.</exception>	
            <param name="tag">The tag to blink.</param>
            <param name="LEDOn">The amount of time the tag LED is to stay on (in 10ms steps), maximum of 2.55 seconds.</param>
            <param name="LEDOff">The amount of time the tag LED is to stay off (in 10ms steps), maximum of 2.55 seconds. <B>0 for continuous on.</B></param>
            <param name="blinkCount">The number of blinks to perform. O to turn off (if already blinking) and 255 maximum.</param>
            <returns>True if successful, false if it fails</returns>
            <remarks>With continuous on set, the LED on time is repeated for the blink count. For example 2.55 seconds on time x 255 blinks = 650.25 seconds (nearly 11 minutes).</remarks>			
        </member>
        <member name="M:IDENTEC.Readers.iCard3.EchoLastScan">
            <summary>
            Query the card to repeat the tags that were detected during the last scan
            </summary>
            <returns></returns>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.m_comm">
            <summary>
            This helper class does all the real communications with the card.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.m_bRAM">
            <summary>
            helper for switching betwen EEPROM and RAM read/write
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.m_LastScanType">
            <summary>
            Store the last tag type used in the scan for the repeat last response call
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.#ctor">
            <summary>
            Default iCard3 constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ToString">
            <summary>
            Overrides the string function to print a user friendly string of the card
            </summary>
            <returns>"i-CARD 3" (without the quotation marks)</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.Connect">
            <summary>
            Connect to the i-CARD 3 via the PC Type II PCMCIA slot. Only useful if one i-CARD is installed.
            </summary>
            <remarks>The default port number is 1.</remarks>
            <returns>True if successful, false if it fails.</returns>		
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            </exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.Connect(System.Int32)">
            <summary>
            The PCMCIA port number to connect to.			
            <seealso cref="P:IDENTEC.Readers.iCard3.Connected"/>
            <seealso cref="M:IDENTEC.Readers.iCard3.Disconnect"/>
            </summary>
            <remarks>Throws an exception if the port number is invalid or an i-CARD is not available on the specified port.
            </remarks>
            <param name="port">The port number; the first i-CARD in the system is 1</param>
            <returns>True if succesful. False if it fails.</returns>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            </exception>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ConnectRS232(System.Int32)">
            <summary>
            Connect to the serial interface on the i-CARD.			
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>			
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>		
            <param name="port">The port number. For example 1 if Com1.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.TestCommunications">
            <summary>
            Tests communications with the card.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadVersion">
            <summary>
            Reads the version information from the iCard3
            </summary>
            <returns>A string with the version information.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ScanForIQTags(System.Int32)">
            <summary>
            Scan the area for i-Q type tags.
            <seealso cref="P:IDENTEC.Readers.iCard.Region"/>
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>			
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>	
            <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>
            <returns>true if successful, false if it fails.</returns>
            <remarks>If no tags are detected, the arraylist will contain 0 tags.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ScanForIQTags(System.Int32,System.Boolean)">
             <summary>
             Scan the area for i-Q type tags.
            <seealso cref="P:IDENTEC.Readers.iCard.Region"/>
             </summary>
             <example>
             This example shows how to connect to an i-CARD 3 and scan for tags at a high power. <B>[C#]:</B>
             <code>
            			using IDENTEC.Readers;
            			using IDENTEC.Tags;
            
            			class NewTest
            			{
            				public static void Main()
            				{
            					iCard3 myReader = new iCard3();
            					try
            					{
            						if (myReader.Connect())
            						{
            							// Set the transmission power to be high so that we detect tags at a fair distance
            							myReader.TxPowerIQ = 6;
            							// Scan for up to 64 tags; allow them to blink when they respond
            							TagCollection tags = myReader.ScanForIQTags(64, true);
            							// Sort the tags numerically
            							tags.Sort();
            							Console.WriteLine(tags.Count + " tags detected during scan:");
            							foreach (Tag t in tags)
            							{
            								Console.WriteLine(t.Number);
            							}
            						}
            					}
            					catch (Exception ex)
            					{
            						Console.WriteLine(ex);
            					}            
            				}
            			}			
             </code>
             <B>Output</B>			
             <code>
            			22 tags detected during scan:
            			208753
            			209648
            			330205
            			369021
            			369027
            			369938
            			380008
            			200055865
            			200066462
            			200071726
            			200072219
            			200074601
            			200074604
            			200074606
            			200074607
            			200074617
            			200074630
            			200081930
            			200081940
            			200081996
            			220000800
            			220000821
             </code>
             </example>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>			
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>		
             <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>
             <param name="blink">When set to true the tags detected in the scan will blink.</param>
             <returns>true if successful, false if it fails.</returns>
             <remarks>If no tags are detected, the arraylist will contain 0 tags.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ScanForID2Tags(System.Int32)">
            <summary>
            Scan the area for i-D2 tags.
            <seealso cref="P:IDENTEC.Readers.iCard.Region"/>
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>					
            <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>			
            <returns>true if successful, false if it fails.</returns>
            <remarks>If no tags are detected, the collection will contain 0 tags.</remarks>			
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ScanForID2Tags(System.Int32,System.Boolean)">
            <summary>
            Scan the area for i-D2 tags.			
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>					
            <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>
            <param name="blink">When set to true the tags detected in the scan will blink.</param>
            <returns>true if successful, false if it fails.</returns>
            <remarks>If no tags are detected, the collection will contain 0 tags.</remarks>			
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ScanForID2NATags(System.Int32)">
            <summary>
            Scan the area for i-D2 tags.
            <seealso cref="P:IDENTEC.Readers.iCard.Region"/>
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>					
            <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>			
            <remarks>If no tags are detected, the collection will contain 0 tags.</remarks>			
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ScanForID2NATags(System.Int32,System.Boolean)">
            <summary>
            Scan the area for i-D2 tags.			
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>					
            <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>
            <param name="blink">When set to true the tags detected in the scan will blink.</param>
            <returns>true if successful, false if it fails.</returns>
            <remarks>If no tags are detected, the collection will contain 0 tags.</remarks>			
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadConfig(System.UInt16,System.Byte[],System.UInt16)">
            <summary>
            Reads the EEPROM data from the i-CARD3. This is a low level call; use extreme caution.
            </summary>
            <param name="wStartAddress"></param>
            <param name="byBuffer"></param>
            <param name="wLength"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.WriteTagDataPrivate(IDENTEC.Tags.ResponseTag,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the tag's EEPROM memory.
            </summary>
            <param name="tag">The tag to write data to.</param>
            <param name="address">The start address to begin writing data at.</param>
            <param name="byData">The data to write.</param>
            <param name="bytesToWrite">The number of bytes to write.</param>	
            <param name="Retries">The number of retries</param>	
            <remarks>For i-Q tags, the start address should be 160 or greater. If communications with the tag fails, you can check the number of bytes actually written.</remarks>
            <returns>true if successful, false if it fails</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagDataPrivate(IDENTEC.Tags.ResponseTag,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads unformatted data from the tag.
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <param name="tag">The tag to read data from.</param>
            <param name="address">The start address of the requested data.</param>		
            <param name="bytesToRead">The number of bytes to read.</param>	
            <param name="Retries">The number of retries</param>	
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagDataHelper(IDENTEC.Tags.ResponseTag,System.Int32,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="tag"></param>
            <param name="address"></param>
            <param name="byData"></param>
            <param name="bytesToRead"></param>
            <param name="nBytesRead"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ToggleTagModes(IDENTEC.Tags.iQTag,System.Byte)">
            <summary>
            Procedure to toggle the logging and sens modes
            </summary>
            <param name="tag"></param>
            <param name="byModeFlag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.PingTagPrivate(IDENTEC.Tags.ResponseTag)">
             <summary>
             Contact a tag. If the tag is equipped with an LED, it will blink as a side effect.			
             <seealso cref="M:IDENTEC.Readers.iCard3.BlinkTag(IDENTEC.Tags.iQTag,System.Int32)"/>            
             </summary>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <example> This example shows how to connect to an i-CARD and contact an IQ tag without scanning first and then displays the tag's state information. <B>[C#]</B>
             <code>
            using System;
            using IDENTEC.Readers;
            using IDENTEC.Tags;
            
            
            namespace iCardConnectAndPingTag
            {
            	class NewTest
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			if (args.Length == 0)
            			{
            				Console.WriteLine("You must specify a tag number to ping");
            			}
            			else
            			{				
            				try
            				{
            					uint id = uint.Parse(args[0]);
            					iCard3 myReader = new iCard3();
            					if (myReader.Connect())
            					{
            						iQTag tag = new iQTag(id);
            						if (myReader.PingTag(tag))
            						{
            							Console.WriteLine("Tag info: ");
            							Console.WriteLine("ID: " + tag.Number.ToString());
            							Console.WriteLine("Model: " +  tag.ModelType.ToString());
            							if (iQTag.LoggerInstalledState.Available == tag.LoggerInstalled)
            							{
            								Console.WriteLine("Logging State: " + tag.Logging.ToString());
            							}
            							Console.WriteLine("Range State: " + tag.Range);
            							if (tag.BatteryPercent)
            							{
            								Console.WriteLine(tag.BatteryPercentUsed.ToString() + "% of battery consumed"); 
            							}
            						}
            					}
            					else
            					{
            						Console.WriteLine("Error reading card: " + myReader.DeviceStatus);
            					}
            				}
            				catch (Exception ex)
            				{
            					Console.WriteLine("An exception was thrown : " + ex);
            				}
            			}
            			Console.WriteLine("Press Enter to continue...");
            			Console.ReadLine();                
            		}
            	}
            }
            
            </code>
            <B>Output:</B>
            <code>
            Tag info:
            ID: 200074790
            Model: IQ8N
            Range State: NormalRange
            11% of battery consumed
            Press Enter to continue...
            </code>
             </example>
             <param name="tag"></param>
             <returns>true if successful, false if communication cannot be established.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.PingTag(IDENTEC.Tags.ResponseTag,System.Byte)">
            <summary>
            Helps us sleep/quiet ID tags as it is just a ping with a special "mode" bit masked byte.
            </summary>
            <param name="tag"></param>
            <param name="byMode"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.Disconnect">
            <summary>
            Disconnects host from the reader. If a PCMCIA connection, then the card will be powered off.
            <seealso cref="M:IDENTEC.Readers.iCard3.Connect"/>
            <seealso cref="P:IDENTEC.Readers.iCard3.Connected"/>
            </summary>
            <returns>True if successful, false if it fails.</returns>
            <remarks>When using a host that runs on batteries, try to disconnect when possible as it will extend the batter life.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadiQTagVersion(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the version information from the i-Q tag.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.WriteTagData(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write data to the tag's EEPROM memory.
            </summary>
            <param name="tag">The tag to write data to.</param>
            <param name="address">The start address to begin writing data at.</param>
            <param name="byData">The data to write.</param>
            <param name="bytesToWrite">The number of bytes to write.</param>		
            <remarks>For i-Q tags, the start address should be 160 or greater. If communications with the tag fails, you can check the number of bytes actually written.</remarks>
            <returns>true if successful, false if it fails</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagData(IDENTEC.Tags.iQTag,System.Int32,System.Int32)">
            <summary>
            Reads unformatted data from the tag.
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <param name="tag">The tag to read data from.</param>
            <param name="address">The start address of the requested data.</param>		
            <param name="bytesToRead">The number of bytes to read.</param>		
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)">
             <summary>
             Writes a string to the tag.
             <seealso cref="M:IDENTEC.Readers.iCard3.ReadTagDataString(IDENTEC.Tags.iQTag,System.Int32)"/>
             <seealso cref="M:IDENTEC.Readers.iCard3.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)"/>	
             <seealso cref="P:System.Text.Encoding.ASCII"/>				 				
             </summary>
             <example>This example shows how to write and read text data with tags <B>[C#]:</B>
             <code>
            	using System;
            	using System.Diagnostics;
            	using System.Collections;
            	using IDENTEC.Readers;
            	using IDENTEC.Tags;
            
            	namespace Read_and_Write_Tag_Data
            			  {
            	class ExampleReadWriteTags
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			iCard3 myReader = new iCard3();
            			// Since we are doing a lot of communications, set the card retries high
            			myReader.Retries = 4;			
            			try
            			{
            				if (myReader.Connect())
            				{
            					// Set the transmission power to be high
            					myReader.TxPowerIQ = 6;
            					// Scan for up to 32 tags; no blink during scan
            					TagCollection tags = myReader.ScanForIQTags(32, false);
            					// Sort the tags numerically
            					tags.Sort();					
            			
            					ArrayList phrases = new ArrayList();
            					phrases.Add("You say yes");
            					phrases.Add("I say no");
            					phrases.Add("You say stop");
            					phrases.Add("And I say go go go");
            					phrases.Add("You say goodbye");
            					phrases.Add("And I say hello");
            					phrases.Add("Hello hello");
            					Random rand = new Random();
            					TagCollection successfulTags = new TagCollection();
            
            					foreach (iQTag t in tags)
            					{
            						if (phrases.Count == 0)
            							break;
            						try
            						{
            							int i = rand.Next(0, phrases.Count -1);
            							TagWriteDataResult writeResult =
            								myReader.WriteTagDataString(t, 200, phrases[i] as string);
            							if (writeResult.Success)
            							{
            								//remove the phrase so that each tag has something unique to say
            								phrases.RemoveAt(i);
            								successfulTags.Add(t);
            							}
            						}
            						catch (iCardCommunicationsException ex)
            						{
            							Console.WriteLine("An error occured communicating with the i-CARD: " + ex.Message);
            						}
            						catch (Exception ex)
            						{
            							Console.WriteLine("An error occured: " + ex.Message);
            						}						
            					}					
            
            					foreach (iQTag t in successfulTags)
            					{
            						TagReadStringResult readResult = myReader.ReadTagDataString(t, 200);
            						if (readResult.Success)
            							Console.WriteLine(t.ToString() + ": " + readResult.Text);
            					}
            				}
            			}
            			catch (Exception ex)
            			{
            				Console.WriteLine(ex);
            			} 
            			Console.WriteLine("Press ENTER to continue...");
            			Console.ReadLine();
            		}
            	}
            }
            </code>
            <B>Output:</B>
            <code>
            208753: You say goodbye
            209648: You say stop
            369021: I say no
            369027: And I say hello
            383261: And I say go go go
            200066114: You say yes
            230001047: Hello hello
            Press ENTER to continue...
            </code>
             </example>			
             <param name="tag">The tag to write the string to.</param>
             <param name="address">The start address.</param>
             <param name="text">The text to write to the tag.</param>		
             <returns>true if successful, false if it fails.</returns>
             <remarks>Only standard ASCII text is valid. Extended characters are not compatible. Uses WriteTagDataWithCRCAndLength</remarks>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <exception cref="T:System.ArgumentNullException"> <I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes data to a tag with a crc and a known length.
            <seealso cref="M:IDENTEC.Readers.iCard3.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            </summary>
            <param name="tag">the tag to write formatted data to.</param>
            <param name="address">The memory address to store the data.</param>
            <param name="byData">The byte array of data.</param>
            <param name="bytesToWrite">The number of bytes to write from <I>byData</I> on to the tag.</param>		
            <returns>A reference to a TagWriteDataResult object.</returns>
            <remarks>A 5 byte header is actually written to the tag at the address specified. If you try to read the data raw at this address, you will read the header. <B>Therefore the actual amount of data you write on the tag is <I>bytesToWrite</I> + 5.</B></remarks>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <exception cref="T:System.ArgumentNullException"> <I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Reads formatted data off of the tag that was written using WriteTagDataWithCRCAndLength
            </summary>
            <param name="tag"></param>
            <param name="address"></param>					
            <returns></returns>			
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            </exception>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagDataString(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Reads a formatted data off of the tag as a string.
            <seealso cref="M:IDENTEC.Readers.iCard3.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            <seealso cref="P:System.Text.Encoding.ASCII"/>
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="address">The memory address on the tag.</param>				
            <returns>A TagReadStringResult object containing the string.</returns>
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            </exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <remarks><I>tag</I> must already have formatted string data at the given <I>address</I>.</remarks>			
        </member>
        <member name="M:IDENTEC.Readers.iCard3.PingTag(IDENTEC.Tags.iQTag)">
             <summary>
             Contact a tag. If the tag is equipped with an LED, it will blink as a side effect.			
             <seealso cref="M:IDENTEC.Readers.iCard3.BlinkTag(IDENTEC.Tags.iQTag,System.Int32)"/>
             </summary>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <example> This example shows how to connect to an i-CARD and contact an IQ tag without scanning first and then displays the tag's state information. <B>[C#]</B>
             <code>
            using System;
            using IDENTEC.Readers;
            using IDENTEC.Tags;
            
            
            namespace iCardConnectAndPingTag
            {
            	class NewTest
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			if (args.Length == 0)
            			{
            				Console.WriteLine("You must specify a tag number to ping");
            			}
            			else
            			{				
            				try
            				{
            					uint id = uint.Parse(args[0]);
            					iCard3 myReader = new iCard3();
            					if (myReader.Connect())
            					{
            						iQTag tag = new iQTag(id);
            						if (myReader.PingTag(tag))
            						{
            							Console.WriteLine("Tag info: ");
            							Console.WriteLine("ID: " + tag.Label);
            							Console.WriteLine("Model: " +  tag.ModelType.ToString());
            							if (iQTag.LoggerInstalledState.Available == tag.LoggerInstalled)
            							{
            								Console.WriteLine("Logging State: " + tag.Logging.ToString());
            							}
            							Console.WriteLine("Range State: " + tag.Range);
            							if (tag.BatteryPercent)
            							{
            								Console.WriteLine(tag.BatteryPercentUsed.ToString() + "% of battery consumed"); 
            							}
            						}
            					}
            					else
            					{
            						Console.WriteLine("Error reading card: " + myReader.DeviceStatus);
            					}
            				}
            				catch (Exception ex)
            				{
            					Console.WriteLine("An exception was thrown : " + ex);
            				}
            			}
            			Console.WriteLine("Press Enter to continue...");
            			Console.ReadLine();                
            		}
            	}
            }
            
            </code>
            <B>Output:</B>
            <code>
            Tag info:
            ID: 200.074.790
            Model: IQ8N
            Range State: NormalRange
            11% of battery consumed
            Press Enter to continue...
            </code>
             </example>
             <param name="tag"></param>
             <returns>true if successful, false if communication cannot be established.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.BlinkTag(IDENTEC.Tags.iQTag,System.Int32)">
             <summary>
             Some versions of iQ based tags support a periodic blink command.	
            <seealso cref="M:IDENTEC.Readers.iCard3.PingTag(IDENTEC.Tags.ResponseTag,System.Byte)"/>
             </summary>
             <remarks>The tag will blink every 500ms for the specified count.</remarks>
             <param name="tag">The tag to blink.</param>
             <param name="blinkCount">The nunber of blinks. 255 maximum.</param>
             <returns>True if successful, false if it fails.</returns>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
             </exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><I>blinkCount</I> exceeds the maximum 255 blinks allowed.</exception>			
        </member>
        <member name="M:IDENTEC.Readers.iCard3.SleepTag(IDENTEC.Tags.iQTag,System.Int32)">
             <summary>
             Sets the tag into a state where it does not respond to any RF for the specified time.
             </summary>
             <example>
             <B>[C#]</B>
             <code>
            	using System;
            	using IDENTEC.Readers;
            	using IDENTEC.Tags;
            		
            	namespace ScanAndSleep
            	{
            	class NewTest
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			iCard3 myReader = new iCard3();
            			try
            			{
            				if (myReader.Connect())
            				{
            					/// Set the transmission power to be high so that we detect tags at a medium distance
            					myReader.TxPowerIQ = 0;
            					/// Scan for up to 32 tags; no blink during scan
            					TagCollection tags = myReader.ScanForIQTags(32, false);
            					/// Sort the tags numerically
            					tags.Sort();
            					Console.WriteLine(tags.Count + " tags detected during scan:");
            							/// Bump up the transmission power a bit in case the tag is moving away from the reader
            					myReader.TxPowerIQ = 3;
            					foreach (iQTag t in tags)
            					{
            						try
            						{
            							if (myReader.SleepTag(t, 30))
            							{
            								Console.WriteLine("Tag " + t.Number + " now sleeping for 30 seconds");
            							}
            							else
            							{
            								Console.WriteLine("Could not sleep tag " + t.Number + ". Reason: " 
            									+ myReader.DeviceStatus);
            							}
            						}
            						catch (iCardCommunicationsException ex)
            						{
            							Console.WriteLine("An error occured communicating with the i-CARD: " + ex.Message);
            						}
            						catch (Exception ex)
            						{
            							Console.WriteLine("An error occured: " + ex.Message);
            						}						
            					}
            				}
            			}
            			catch (Exception ex)
            			{
            				Console.WriteLine(ex);
            			} 
            		}
            	}
            }
            </code>
            <B>Output</B>
            	<code>
            	4 tags detected during scan:
            	Tag 369021 now sleeping for 30 seconds
            	Tag 369027 now sleeping for 30 seconds
            	Tag 380008 now sleeping for 30 seconds
            	Tag 200074689 now sleeping for 30 seconds			
            </code>
             </example>
             <param name="tag"></param>
             <param name="seconds">The number of seconds to sleep. Maximum of 255.</param>
             <returns>True if successful, false if it fails.</returns>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.SetTagRangeState(IDENTEC.Tags.iQTag,System.Boolean)">
            <summary>
            Sets the i-Qx tag into extended or normal range mode.
            <seealso cref="P:IDENTEC.Tags.iQTag.Range"/>
            <seealso cref="P:IDENTEC.Tags.iQTag.ReportsBatteryVoltage"/>
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <param name="tag">The i-Qx tag to communicate with.</param>
            <param name="enableExtendedRange">Set to true for extended range, false for normal range.</param>
            <remarks>The extended range state may not be as reliable as normal range for data transfer. <B>If the tag supports reporting battery voltage then a Scan must be performed before the tag will change state.</B></remarks>									
            <returns>true if successful, false if it fails</returns>						
        </member>
        <member name="M:IDENTEC.Readers.iCard3.StartTagLogging(IDENTEC.Tags.iQTag,System.TimeSpan)">
             <summary>Sets <I>tag</I> into the logging mode. If it is already logging the log will clear and restart.
             <seealso cref="M:IDENTEC.Readers.iCard3.StopTagLogging(IDENTEC.Tags.iQTag)"/>
             <seealso cref="M:IDENTEC.Readers.iCard3.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="M:IDENTEC.Readers.iCard3.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>	
             <remarks>The maximum sampling interval of the tag is 65 535 seconds (approx 18 hours).</remarks>
             <param name="tag">The tag to commence logging.</param>
             <param name="samplingRate">The rate at which samples are recorded in the log.</param>			
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:System.ArgumentOutOfRangeException"><I>samplingRate</I> exceeds 65535 seconds.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>						
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.StopTagLogging(IDENTEC.Tags.iQTag)">
             <summary>Stops <I>tag</I> from logging.
             <seealso cref="M:IDENTEC.Readers.iCard3.StartTagLogging(IDENTEC.Tags.iQTag,System.TimeSpan)"/>
             <seealso cref="M:IDENTEC.Readers.iCard3.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="M:IDENTEC.Readers.iCard3.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>	
             <remarks>A log does not need to be stopped in order to be read.</remarks>
             <param name="tag">The tag to stop logging.</param>			
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>				
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the log off of the tag and converts it to a temperature log.
             <seealso cref="M:IDENTEC.Readers.iCard3.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>			
             <remarks>This method actually calls ReadTagRawLog and does a conversion.</remarks>
             <param name="tag">The tag to read.</param>
             <returns>A TemperatureLogData object containing the sampled data.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagRawLog(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the log samples as stored on the tag.
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>
             <param name="tag">The tag to read.</param>
             <returns>The RawLogData object containing the raw samples.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagLogSamplingInterval(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the log sampling interval off of the tag.
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>
             <param name="tag">The tag to read.</param>
             <returns>The Timespan representing the logging interval.</returns>	
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagTemperatureExtremes(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the highest recorded temperature and lowest recorded temperature as recorded in the temperature log.		
             <seealso cref="T:IDENTEC.Tags.Logging.TemperatureExtremes"/>
             </summary>						
             <remarks>This capability is only available on i-Q temperature tags that support reporting battery percent used.
             </remarks>
             <param name="tag">The tag to contact.</param>			
             <returns>A TemperatureExtremes object.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadLastSampledTemperature(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the last temperature sample logged.
             </summary>
             <param name="tag">The tag to query.</param>
             <returns>The most recently logged TemperatureLogSample.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagLastRecordedTemperatureLogSample(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the last temperature sample logged.
             </summary>
             <remarks>The tag must be in a logging state to make this call.</remarks>			
             <param name="tag">The tag to query.</param>
             <returns>The most recently logged TemperatureLogSample.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagLastRecordedRawLogSample(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the last recorded sample in the log.
             </summary>
             <remarks>The tag must be in a logging state to make this call.</remarks>			
             <param name="tag">The tag to query.</param>
             <returns>The most recently recorded RawLogSample.</returns>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagCurrentTemperature(IDENTEC.Tags.iQTag)">
            <summary>
            Forces the temperature tag to report the current temperature even if the tag is not in a logging state.
            </summary>
            <param name="tag">The tag to read the current temperature from.</param>
            <returns>A TemperatureLogSample object containing the temperature and time of the reading.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.StartTagDigitalInputEventLog(IDENTEC.Tags.iQTag)">
             <summary>Sets <I>tag</I> into the logging mode at digital input. If it is already logging the log will clear and restart.
             <seealso cref="M:IDENTEC.Readers.iCard3.StopTagLogging(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>	
             <remarks>TagInternal quartz is accurate for approx 1 year.</remarks>
             <param name="tag">The tag to commence logging.</param>            
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>						
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.StartTagDigitalInputEventLog(IDENTEC.Tags.iQTag,System.Boolean)">
            <summary>
            Starts the tag digital input event log.
            </summary>
            <param name="tag">The tag.</param>
            <param name="synchronize">if set to <c>true</c> [synchronize].</param>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagDigitalInputEventLog(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the InputEvent log off of the tag.
             <seealso cref="M:IDENTEC.Readers.iCard3.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>			
             <remarks>This method actually calls ReadTagRawInp and does a conversion.</remarks>
             <param name="tag">The tag to read.</param>
             <returns>A InputLogData object containing the sampled data.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> none or wrong logging capabilities.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of reading a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadiQLTagMarkerInfo(IDENTEC.Tags.iQTag)">
            <summary>
            Reads Marker info off of i-Q tags with the "L" indicator on the label.
            </summary>
            <param name="tag"></param>
            <returns>A Tags.LoopData object.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadIQTagAbsoluteEngineHourCounter(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the total hours logged by the tag (6 minute resolution). <B>For i-Q8C tags only.</B>
            </summary>
            <remarks>The IQ8C has a combined PNP/NPN input to recognise pulses or a high/low status. This input is polled every 2 seconds and when active increments the hour counter in RAM. If the RAM hour counter reaches the value for 6 minutes (1/10 hour), the hour counter in EEPROM is incremented. Also a absolute hour counter(not user writeable) is updated.</remarks>
            <param name="tag">The tag to read from.</param>
            <returns>The total amount of time the engine has been running for.</returns>
            <seealso cref="M:IDENTEC.Readers.iCard3.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)"/>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the user engine counter value from the tag (6 minute resolution). <B>For i-Q8C tags only.</B>
            </summary>
            <param name="tag">The tag to read from.</param>
            <returns>The amount of time the engine has been running for as specified by the user counter.</returns>
            <seealso cref="M:IDENTEC.Readers.iCard3.ReadIQTagAbsoluteEngineHourCounter(IDENTEC.Tags.iQTag)"/>
            <seealso cref="M:IDENTEC.Readers.iCard3.WriteIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag,System.TimeSpan)"/>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.WriteIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag,System.TimeSpan)">
            <summary>
            Writes the specified amount of time to the user/trip hour meter. Typically used to set the time back to zero. <B>For i-Q8C tags only.</B>
            </summary>
            <param name="tag">The tag.</param>
            <param name="ts">The amount of time to reset the user counter to. In a resolution of 6 minutes.</param>
            <remarks>The counter is reported in 6 minute increments (10x per hour). Any value lesser or greater will be rounded.</remarks>
            <seealso cref="M:IDENTEC.Readers.iCard3.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)"/>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.WriteTagData(IDENTEC.Tags.iD2Tag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write data to the tag's EEPROM memory.
            </summary>
            <param name="tag">The tag to write data to.</param>
            <param name="address">The start address to begin writing data at.</param>
            <param name="byData">The data to write.</param>
            <param name="bytesToWrite">The number of bytes to write.</param>		
            <remarks>For i-Q tags, the start address should be 160 or greater. If communications with the tag fails, you can check the number of bytes actually written.</remarks>
            <returns>true if successful, false if it fails</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagData(IDENTEC.Tags.iD2Tag,System.Int32,System.Int32)">
            <summary>
            Reads unformatted data from the tag.
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <param name="tag">The tag to read data from.</param>
            <param name="address">The start address of the requested data.</param>		
            <param name="bytesToRead">The number of bytes to read.</param>		
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.WriteTagDataString(IDENTEC.Tags.iD2Tag,System.Int32,System.String)">
             <summary>
             Writes a string to the tag.
             <seealso cref="M:IDENTEC.Readers.iCard3.ReadTagDataString(IDENTEC.Tags.iQTag,System.Int32)"/>
             <seealso cref="M:IDENTEC.Readers.iCard3.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)"/>	
             <seealso cref="P:System.Text.Encoding.ASCII"/>				 				
             </summary>
             <example>This example shows how to write and read text data with tags <B>[C#]:</B>
             <code>
            	using System;
            	using System.Diagnostics;
            	using System.Collections;
            	using IDENTEC.Readers;
            	using IDENTEC.Tags;
            
            	namespace Read_and_Write_Tag_Data
            			  {
            	class ExampleReadWriteTags
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			iCard3 myReader = new iCard3();
            			// Since we are doing a lot of communications, set the card retries high
            			myReader.Retries = 4;			
            			try
            			{
            				if (myReader.Connect())
            				{
            					// Set the transmission power to be high
            					myReader.TxPowerIQ = 6;
            					// Scan for up to 32 tags; no blink during scan
            					TagCollection tags = myReader.ScanForIQTags(32, false);
            					// Sort the tags numerically
            					tags.Sort();					
            			
            					ArrayList phrases = new ArrayList();
            					phrases.Add("You say yes");
            					phrases.Add("I say no");
            					phrases.Add("You say stop");
            					phrases.Add("And I say go go go");
            					phrases.Add("You say goodbye");
            					phrases.Add("And I say hello");
            					phrases.Add("Hello hello");
            					Random rand = new Random();
            					TagCollection successfulTags = new TagCollection();
            
            					foreach (iQTag t in tags)
            					{
            						if (phrases.Count == 0)
            							break;
            						try
            						{
            							int i = rand.Next(0, phrases.Count -1);
            							TagWriteDataResult writeResult =
            								myReader.WriteTagDataString(t, 200, phrases[i] as string);
            							if (writeResult.Success)
            							{
            								//remove the phrase so that each tag has something unique to say
            								phrases.RemoveAt(i);
            								successfulTags.Add(t);
            							}
            						}
            						catch (iCardCommunicationsException ex)
            						{
            							Console.WriteLine("An error occured communicating with the i-CARD: " + ex.Message);
            						}
            						catch (Exception ex)
            						{
            							Console.WriteLine("An error occured: " + ex.Message);
            						}						
            					}					
            
            					foreach (iQTag t in successfulTags)
            					{
            						TagReadStringResult readResult = myReader.ReadTagDataString(t, 200);
            						if (readResult.Success)
            							Console.WriteLine(t.ToString() + ": " + readResult.Text);
            					}
            				}
            			}
            			catch (Exception ex)
            			{
            				Console.WriteLine(ex);
            			} 
            			Console.WriteLine("Press ENTER to continue...");
            			Console.ReadLine();
            		}
            	}
            }
            </code>
            <B>Output:</B>
            <code>
            208753: You say goodbye
            209648: You say stop
            369021: I say no
            369027: And I say hello
            383261: And I say go go go
            200066114: You say yes
            230001047: Hello hello
            Press ENTER to continue...
            </code>
             </example>			
             <param name="tag">The tag to write the string to.</param>
             <param name="address">The start address.</param>
             <param name="text">The text to write to the tag.</param>		
             <returns>true if successful, false if it fails.</returns>
             <remarks>Only standard ASCII text is valid. Extended characters are not compatible. Uses WriteTagDataWithCRCAndLength</remarks>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <exception cref="T:System.ArgumentNullException"> <I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iD2Tag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes data to a tag with a crc and a known length.
            <seealso cref="M:IDENTEC.Readers.iCard3.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            </summary>
            <param name="tag">the tag to write formatted data to.</param>
            <param name="address">The memory address to store the data.</param>
            <param name="byData">The byte array of data.</param>
            <param name="bytesToWrite">The number of bytes to write from <I>byData</I> on to the tag.</param>		
            <returns>A reference to a TagWriteDataResult object.</returns>
            <remarks>A 5 byte header is actually written to the tag at the address specified. If you try to read the data raw at this address, you will read the header. <B>Therefore the actual amount of data you write on the tag is <I>bytesToWrite</I> + 5.</B></remarks>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <exception cref="T:System.ArgumentNullException"> <I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagDataWithCRCAndLength(IDENTEC.Tags.iD2Tag,System.Int32)">
            <summary>
            Reads formatted data off of the tag that was written using WriteTagDataWithCRCAndLength
            </summary>
            <param name="tag"></param>
            <param name="address"></param>					
            <returns></returns>			
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            </exception>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.ReadTagDataString(IDENTEC.Tags.iD2Tag,System.Int32)">
            <summary>
            Reads a formatted data off of the tag as a string.
            <seealso cref="M:IDENTEC.Readers.iCard3.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            <seealso cref="P:System.Text.Encoding.ASCII"/>
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="address">The memory address on the tag.</param>				
            <returns>A TagReadStringResult object containing the string.</returns>
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            </exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <remarks><I>tag</I> must already have formatted string data at the given <I>address</I>.</remarks>			
        </member>
        <member name="M:IDENTEC.Readers.iCard3.PingTag(IDENTEC.Tags.iD2Tag)">
            <summary>
            Simple one on one communications with the tag.
            </summary>
            <param name="tag">The tag to contact.</param>
            <returns>True if successful, false if it fails.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.SessionSetupTag(IDENTEC.Tags.iD2Tag,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets the tag into a combination of sleep and/or quiet modes. i-D2 tags have more options for sleeping than i-Q tags.
            <seealso cref="M:IDENTEC.Readers.iCard3.SleepTag(IDENTEC.Tags.iQTag,System.Int32)"/>
            </summary>
            <param name="tag">The i-D2 tag to contact.</param>
            <param name="seconds"></param>
            <param name="sleep">Enables/Disables the sleep mode option.</param>
            <param name="quiet">Enables/Disables the quiet mode option.</param>
            <returns>True if successful, false if it fails.</returns>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
        </member>
        <member name="M:IDENTEC.Readers.iCard3.BlinkTag(IDENTEC.Tags.iD2Tag,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            Invokes the i-D2 tag to blink autonomously by specifying how many blinks and customizing the flashing behavior.
            </summary>			
            <exception cref="T:System.ArgumentOutOfRangeException">The LED off time exceeds 2.55 seconds.</exception>	
            <exception cref="T:System.ArgumentOutOfRangeException">The blink count exceeds 255 seconds.</exception>	
            <param name="tag">The tag to blink.</param>
            <param name="LEDOn">The amount of time the tag LED is to stay on (in 10ms steps), maximum of 2.55 seconds.</param>
            <param name="LEDOff">The amount of time the tag LED is to stay off (in 10ms steps), maximum of 2.55 seconds. <B>0 for continuous on.</B></param>
            <param name="blinkCount">The number of blinks to perform. O to turn off (if already blinking) and 255 maximum.</param>
            <returns>True if successful, false if it fails</returns>
            <remarks>With continuous on set, the LED on time is repeated for the blink count. For example 2.55 seconds on time x 255 blinks = 650.25 seconds (nearly 11 minutes).</remarks>			
        </member>
        <member name="P:IDENTEC.Readers.iCard3.Information">
             <summary>
             The card information.
             </summary>
             <example>
             This example shows how to connect to an i-CARD 3 and display the Information <B>[C#]:</B>
             <code>
            			using IDENTEC.Readers;
            			using IDENTEC.Tags;
            			public static void Main()
            			{
            				iCard3 myReader = new iCard3();
            				try
            				{
            					if (myReader.Connect())
            					{
            						Console.WriteLine("i-CARD Information: " + myReader.Information);
            						Console.WriteLine("Serial Number: " + myReader.SerialNumber);
            						Console.WriteLine(@"Production Info (Year/Week/Batch): " + myReader.ProductionInformation.Year + "//" 
            							+ myReader.ProductionInformation.Week + "//" + myReader.ProductionInformation.ProductionNumber);
            						Console.WriteLine("Region: " + myReader.Region.ToString());
            						Console.WriteLine("Current Transmission Power for i-Q tag communications: " + myReader.TxPowerIQ + "dBm");
            						Console.WriteLine("Current Transmission Power for i-D2 tag communications: " + myReader.TxPowerID + "dBm");
            					}
            					else
            					{
            						Console.WriteLine("Error reading card: " + myReader.DeviceStatus);
            					}
            				}
            				catch (Exception ex)
            				{
            					Console.WriteLine("An exception was thrown : " + ex);
            				}
            				Console.WriteLine("Press Enter to continue...");
            				Console.ReadLine();				
            			}			
             </code>
             <B>Output</B>			
             <code>
            i-CARD Information: 2.9 Nov 09 2004iC3 HW5.0
            Serial Number: 04123I0887
            Production Info (Year/Week/Batch): 2004//12//887
            Region: NorthAmerican
            Current Transmission Power for i-Q tag communications: 6dBm
            Current Transmission Power for i-D2 tag communications: 30dBm
            Press Enter to continue...
             </code>
             </example>
             <remarks>This value is retrieved when connecting to the i-CARD.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iCard3.Retries">
            <summary>
            The number of retries the i-CARD 3 attempts when RF communications with a tag fails.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When the value is set to less than 1 or more than 255.
            </exception>		
        </member>
        <member name="P:IDENTEC.Readers.iCard3.MaxOutputdBmID2">
            <summary>
            The maximum transmission power an i-CARD is allowed for communications with nDaisyChainAddress-D tags.						
            <seealso cref="P:IDENTEC.Readers.iCard3.MinOutputdBm"/>			
            </summary>
            <remarks>This value is read from the card during the connection routine.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iCard3.MaxOutputdBmIQ">
            <summary>
            The maximum dBm allowable to transmit as dictated by the card's firmware.
            </summary>
            <remarks>This value is read from the card during the connection routine.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iCard3.MinOutputdBm">
            <summary>
            The minimum transmission level the card can output.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCard3.Connected">
            <summary>
            Check to see if the iCard3 object is connected to the device
            <seealso cref="M:IDENTEC.Readers.iCard3.Connect"/>
            <seealso cref="M:IDENTEC.Readers.iCard3.Disconnect"/>
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCard3.TxPowerID">
            <summary> 
            The RF transmission level for communications with i-Q tags 
            <seealso cref="P:IDENTEC.Readers.iCard3.MaxOutputdBmID2"/>
            <seealso cref="P:IDENTEC.Readers.iCard3.MinOutputdBm"/>
            </summary> 			
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when attempting to set the power beyond the allowed range.</exception>						
        </member>
        <member name="P:IDENTEC.Readers.iCard3.TxPowerIQ">
            <summary>
            The RF transmission level for communications with i-Q tags			
            <seealso cref="P:IDENTEC.Readers.iCard3.MinOutputdBm"/>
            <seealso cref="P:IDENTEC.Readers.iCard3.MaxOutputdBmIQ"/>			
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when attempting to set the power beyond the allowed range.</exception>						
        </member>
        <member name="P:IDENTEC.Readers.iCard3.Format">
            <summary>
            The form factor of the card.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCard3.EnableiD2TagBlink">
            <summary>
            Enables/disables blinking tags during single tag communications.			
            </summary>
            <remarks>This setting does not enable/disable blinking of i-D2 tags during scanning.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iCard3.EnableTagLogDataProtection">
            <summary>
            Enables/Disables the protection of log data from accidental overwrites
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCard3.Antenna">
            <summary>
            The active antenna. If iCard3 is connected to a multiplexer the card can control up to 4 antennas.
            </summary>			
            <remarks>This property was originally designed for use with a hardware multiplexer that never came to production. The device's protocol supports multiple antennas. </remarks>			
        </member>
        <member name="P:IDENTEC.Readers.iCard3.EnableWakeupTagsDuringScan">
            <summary>
            When enabled the tags are sent a wakeup call during scan. The default value is true.
            </summary>
            <remarks>This is an advanced property. Disabling this property is not recommended and requires intimate knowledge of the solution and timing.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iCard3.EnableReceiveBoost">
            <summary>
            The RF receive boost. Enabling makes the card more sensitive to RF signals from tags. The default value is true.
            </summary>
            <remarks>It is only necessary to disable this property when close communications with tags is necessary.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iCard3.EnableChangeICSessionAddressDuringScan">
            <summary>
            When enabled the session address is changed by the card for each scan. The default value is true.
            </summary>
            <remarks>This is an advanced property. Disabling this property is not recommended and requires intimate knowledge of the solution.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iCard3.bWakeupIQTag">
            <summary>
            [Feierle Karl Heinz]  If  this bit is set, always a wakeup is sended, 
            otherwise the i-CARD 3 "decides" by itself if a wakeup is necessary. 
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCard3.MinReceivedBm">
            <summary>
            The minimum signal strength the card will report after communications with a tag
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.iCard3.ResponseCode">
            <summary>
            The possible response codes that the i-CARD 3 responds with after a request from the host.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.ResponseCode.Scan">
            <summary>
            Scan response.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.ResponseCode.ReadData">
            <summary>
            Read Tag Data response.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.ResponseCode.WriteData">
            <summary>
            Write Tag Data response.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.ResponseCode.GetVersion">
            <summary>
            The i-CARD firmware version response.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.ResponseCode.ReadConfig">
            <summary>
            The Read Config response.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.ResponseCode.WriteConfig">
            <summary>
            The write config response.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.ResponseCode.UpdateFlash">
            <summary>
            Update Flash response.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.ResponseCode.Test">
            <summary>
            The Test command response.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.ResponseCode.CommunicationEncryption">
            <summary>
            The Communication Encryption response
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.ResponseCode.AddRemoveCardKey">
            <summary>
            The Add/Delete Card Key response.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.ResponseCode.SwitchTagSecureMode">
            <summary>
            The Switch Tag Secure Mode response.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.iCard3.CommandCode">
            <summary>
            Command codes that can be sent to the i-CARD.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.iCard3.FormFactor">
            <summary>
            The physical form factor of the card.
            </summary>
            <remarks>Because the i-CARD 3's protocol is reused in many of our readers, internally some of the reader classes contain an iCard3 member variable to maximize code reuse.</remarks>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.FormFactor.Indeterminate">
            <summary>
            The form factor cannot be determined.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.FormFactor.PCMCIA">
            <summary>
            Standard PCMCIA (PC Card) format
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.FormFactor.CompactFlash">
            <summary>
            Compact Flash (CF) format				
            </summary>
            <remarks>The CF version of the i-CARD 3 does not implement i-D2 tag functionality.</remarks>
        </member>
        <member name="F:IDENTEC.Readers.iCard3.FormFactor.T2">
            <summary>
            The reader is a T2 modular reader and does not have i-D2 tag functionality.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.iCardCF">
            <summary>
            Represents the functionality of an i-CARD CF for use with IDENTEC SOLUTIONS Inc. i-Q tags.
            </summary>
            <remarks>This reader is compatible with i-Q series tags only.</remarks>
        </member>
        <member name="F:IDENTEC.Readers.iCardCF.m_iCard3">
            <summary>
            The real work is done by the i-CARD 3 class !
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.#ctor">
            <summary>
            Initializes a new iCardCF object.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ToString">
            <summary>
            Overrides the string function to print a user friendly string of the card
            </summary>
            <returns>"i-CARD 3" (without the quotation marks)</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.Connect">
            <summary>
            Connects to the first card in the host.
            <seealso cref="T:IDENTEC.Readers.CFReaderSearch"/>
            </summary>				
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.Connect(System.Int32)">
            <summary>
            The virtual Com port to connect the CF card to.
            <seealso cref="P:IDENTEC.Readers.iCardCF.Connected"/>
            <seealso cref="M:IDENTEC.Readers.iCardCF.Disconnect"/>
            </summary>
            <remarks>Throws an exception if the port number is invalid or an i-CARD is not available on the specified port.
            </remarks>
            <param name="port">The port number; check the system registry to see which COM port the CF card is registered to.</param>
            <returns>True if succesful. False if it fails.</returns>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            </exception>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.TestCommunications">
            <summary>
            Tests communications with the reader.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ScanForIQTags(System.Int32)">
            <summary>
            Scan the area for i-Q type tags.
            <seealso cref="P:IDENTEC.Readers.iCard.Region"/>
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>			
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>	
            <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>
            <returns>true if successful, false if it fails.</returns>
            <remarks>If no tags are detected, the arraylist will contain 0 tags.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ScanForIQTags(System.Int32,System.Boolean)">
             <summary>
             Scan the area for i-Q type tags.
            <seealso cref="P:IDENTEC.Readers.iCard.Region"/>
             </summary>
             <example>
             This example shows how to connect to an i-CARD 3 and scan for tags at a high power. <B>[C#]:</B>
             <code>
            			using IDENTEC.Readers;
            			using IDENTEC.Tags;
            
            			class NewTest
            			{
            				public static void Main()
            				{
            					iCard3 myReader = new iCard3();
            					try
            					{
            						if (myReader.Connect())
            						{
            							// Set the transmission power to be high so that we detect tags at a fair distance
            							myReader.TxPowerIQ = 6;
            							// Scan for up to 64 tags; allow them to blink when they respond
            							TagCollection tags = myReader.ScanForIQTags(64, true);
            							// Sort the tags numerically
            							tags.Sort();
            							Console.WriteLine(tags.Count + " tags detected during scan:");
            							foreach (Tag t in tags)
            							{
            								Console.WriteLine(t.Number);
            							}
            						}
            					}
            					catch (Exception ex)
            					{
            						Console.WriteLine(ex);
            					}            
            				}
            			}			
             </code>
             <B>Output</B>			
             <code>
            			22 tags detected during scan:
            			208753
            			209648
            			330205
            			369021
            			369027
            			369938
            			380008
            			200055865
            			200066462
            			200071726
            			200072219
            			200074601
            			200074604
            			200074606
            			200074607
            			200074617
            			200074630
            			200081930
            			200081940
            			200081996
            			220000800
            			220000821
             </code>
             </example>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>			
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>		
             <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>
             <param name="blink">When set to true the tags detected in the scan will blink.</param>
             <returns>true if successful, false if it fails.</returns>
             <remarks>If no tags are detected, the arraylist will contain 0 tags.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.WriteTagData(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write data to the tag's EEPROM memory.
            </summary>
            <param name="tag">The tag to write data to.</param>
            <param name="address">The start address to begin writing data at.</param>
            <param name="byData">The data to write.</param>
            <param name="bytesToWrite">The number of bytes to write.</param>		
            <remarks>For i-Q tags, the start address should be 160 or greater. If communications with the tag fails, you can check the number of bytes actually written.</remarks>
            <returns>true if successful, false if it fails</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadTagData(IDENTEC.Tags.iQTag,System.Int32,System.Int32)">
            <summary>
            Reads unformatted data from the tag.
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <param name="tag">The tag to read data from.</param>
            <param name="address">The start address of the requested data.</param>		
            <param name="bytesToRead">The number of bytes to read.</param>		
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)">
             <summary>
             Writes a string to the tag.
             <seealso cref="M:IDENTEC.Readers.iCardCF.ReadTagDataString(IDENTEC.Tags.iQTag,System.Int32)"/>
             <seealso cref="M:IDENTEC.Readers.iCardCF.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)"/>	
             <seealso cref="P:System.Text.Encoding.ASCII"/>				 				
             </summary>
             <example>This example shows how to write and read text data with tags <B>[C#]:</B>
             <code>
            	using System;
            	using System.Diagnostics;
            	using System.Collections;
            	using IDENTEC.Readers;
            	using IDENTEC.Tags;
            
            	namespace Read_and_Write_Tag_Data
            			  {
            	class ExampleReadWriteTags
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			iCard3 myReader = new iCard3();
            			// Since we are doing a lot of communications, set the card retries high
            			myReader.Retries = 4;			
            			try
            			{
            				if (myReader.Connect())
            				{
            					// Set the transmission power to be high
            					myReader.TxPowerIQ = 6;
            					// Scan for up to 32 tags; no blink during scan
            					TagCollection tags = myReader.ScanForIQTags(32, false);
            					// Sort the tags numerically
            					tags.Sort();					
            			
            					ArrayList phrases = new ArrayList();
            					phrases.Add("You say yes");
            					phrases.Add("I say no");
            					phrases.Add("You say stop");
            					phrases.Add("And I say go go go");
            					phrases.Add("You say goodbye");
            					phrases.Add("And I say hello");
            					phrases.Add("Hello hello");
            					Random rand = new Random();
            					TagCollection successfulTags = new TagCollection();
            
            					foreach (iQTag t in tags)
            					{
            						if (phrases.Count == 0)
            							break;
            						try
            						{
            							int i = rand.Next(0, phrases.Count -1);
            							TagWriteDataResult writeResult =
            								myReader.WriteTagDataString(t, 200, phrases[i] as string);
            							if (writeResult.Success)
            							{
            								//remove the phrase so that each tag has something unique to say
            								phrases.RemoveAt(i);
            								successfulTags.Add(t);
            							}
            						}
            						catch (iCardCommunicationsException ex)
            						{
            							Console.WriteLine("An error occured communicating with the i-CARD: " + ex.Message);
            						}
            						catch (Exception ex)
            						{
            							Console.WriteLine("An error occured: " + ex.Message);
            						}						
            					}					
            
            					foreach (iQTag t in successfulTags)
            					{
            						TagReadStringResult readResult = myReader.ReadTagDataString(t, 200);
            						if (readResult.Success)
            							Console.WriteLine(t.ToString() + ": " + readResult.Text);
            					}
            				}
            			}
            			catch (Exception ex)
            			{
            				Console.WriteLine(ex);
            			} 
            			Console.WriteLine("Press ENTER to continue...");
            			Console.ReadLine();
            		}
            	}
            }
            </code>
            <B>Output:</B>
            <code>
            208753: You say goodbye
            209648: You say stop
            369021: I say no
            369027: And I say hello
            383261: And I say go go go
            200066114: You say yes
            230001047: Hello hello
            Press ENTER to continue...
            </code>
             </example>			
             <param name="tag">The tag to write the string to.</param>
             <param name="address">The start address.</param>
             <param name="text">The text to write to the tag.</param>		
             <returns>true if successful, false if it fails.</returns>
             <remarks>Only standard ASCII text is valid. Extended characters are not compatible. Uses WriteTagDataWithCRCAndLength</remarks>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <exception cref="T:System.ArgumentNullException"> <I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes data to a tag with a crc and a known length.
            <seealso cref="M:IDENTEC.Readers.iCardCF.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            </summary>
            <param name="tag">the tag to write formatted data to.</param>
            <param name="address">The memory address to store the data.</param>
            <param name="byData">The byte array of data.</param>
            <param name="bytesToWrite">The number of bytes to write from <I>byData</I> on to the tag.</param>		
            <returns>A reference to a TagWriteDataResult object.</returns>
            <remarks>A 5 byte header is actually written to the tag at the address specified. If you try to read the data raw at this address, you will read the header. <B>Therefore the actual amount of data you write on the tag is <I>bytesToWrite</I> + 5.</B></remarks>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <exception cref="T:System.ArgumentNullException"> <I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Reads formatted data off of the tag that was written using WriteTagDataWithCRCAndLength
            </summary>
            <param name="tag"></param>
            <param name="address"></param>					
            <returns></returns>			
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            </exception>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadTagDataString(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Reads a formatted data off of the tag as a string.
            <seealso cref="M:IDENTEC.Readers.iCardCF.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            <seealso cref="P:System.Text.Encoding.ASCII"/>
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="address">The memory address on the tag.</param>				
            <returns>A TagReadStringResult object containing the string.</returns>
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            </exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <remarks><I>tag</I> must already have formatted string data at the given <I>address</I>.</remarks>			
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.BlinkTag(IDENTEC.Tags.iQTag,System.Int32)">
             <summary>
             Some versions of iQ based tags support a periodic blink command.	
            <seealso cref="M:IDENTEC.Readers.iCardCF.PingTag(IDENTEC.Tags.iQTag)"/>
             </summary>
             <remarks>The tag will blink every 500ms for the specified count.</remarks>
             <param name="tag">The tag to blink.</param>
             <param name="blinkCount">The nunber of blinks. 255 maximum.</param>
             <returns>True if successful, false if it fails.</returns>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
             </exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><I>blinkCount</I> exceeds the maximum 255 blinks allowed.</exception>			
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.SleepTag(IDENTEC.Tags.iQTag,System.Int32)">
             <summary>
             Sets the tag into a state where it does not respond to any RF for the specified time.
             </summary>
             <example>
             <B>[C#]</B>
             <code>
            	using System;
            	using IDENTEC.Readers;
            	using IDENTEC.Tags;
            		
            	namespace ScanAndSleep
            	{
            	class NewTest
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			iCard3 myReader = new iCard3();
            			try
            			{
            				if (myReader.Connect())
            				{
            					/// Set the transmission power to be high so that we detect tags at a medium distance
            					myReader.TxPowerIQ = 0;
            					/// Scan for up to 32 tags; no blink during scan
            					TagCollection tags = myReader.ScanForIQTags(32, false);
            					/// Sort the tags numerically
            					tags.Sort();
            					Console.WriteLine(tags.Count + " tags detected during scan:");
            							/// Bump up the transmission power a bit in case the tag is moving away from the reader
            					myReader.TxPowerIQ = 3;
            					foreach (iQTag t in tags)
            					{
            						try
            						{
            							if (myReader.SleepTag(t, 30))
            							{
            								Console.WriteLine("Tag " + t.Number + " now sleeping for 30 seconds");
            							}
            							else
            							{
            								Console.WriteLine("Could not sleep tag " + t.Number + ". Reason: " 
            									+ myReader.DeviceStatus);
            							}
            						}
            						catch (iCardCommunicationsException ex)
            						{
            							Console.WriteLine("An error occured communicating with the i-CARD: " + ex.Message);
            						}
            						catch (Exception ex)
            						{
            							Console.WriteLine("An error occured: " + ex.Message);
            						}						
            					}
            				}
            			}
            			catch (Exception ex)
            			{
            				Console.WriteLine(ex);
            			} 
            		}
            	}
            }
            </code>
            <B>Output</B>
            	<code>
            	4 tags detected during scan:
            	Tag 369021 now sleeping for 30 seconds
            	Tag 369027 now sleeping for 30 seconds
            	Tag 380008 now sleeping for 30 seconds
            	Tag 200074689 now sleeping for 30 seconds			
            </code>
             </example>
             <param name="tag"></param>
             <param name="seconds">The number of seconds to sleep. Maximum of 255.</param>
             <returns>True if successful, false if it fails.</returns>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.PingTag(IDENTEC.Tags.iQTag)">
             <summary>
             Contact a tag. If the tag is equipped with an LED, it will blink as a side effect.			
             <seealso cref="M:IDENTEC.Readers.iCardCF.BlinkTag(IDENTEC.Tags.iQTag,System.Int32)"/>
             </summary>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <example> This example shows how to connect to an i-CARD and contact an IQ tag without scanning first and then displays the tag's state information. <B>[C#]</B>
             <code>
            using System;
            using IDENTEC.Readers;
            using IDENTEC.Tags;
            
            
            namespace iCardConnectAndPingTag
            {
            	class NewTest
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			if (args.Length == 0)
            			{
            				Console.WriteLine("You must specify a tag number to ping");
            			}
            			else
            			{				
            				try
            				{
            					uint id = uint.Parse(args[0]);
            					iCard3 myReader = new iCard3();
            					if (myReader.Connect())
            					{
            						iQTag tag = new iQTag(id);
            						if (myReader.PingTag(tag))
            						{
            							Console.WriteLine("Tag info: ");
            							Console.WriteLine("ID: " + tag.Number.ToString());
            							Console.WriteLine("Model: " +  tag.ModelType.ToString());
            							if (iQTag.LoggerInstalledState.Available == tag.LoggerInstalled)
            							{
            								Console.WriteLine("Logging State: " + tag.Logging.ToString());
            							}
            							Console.WriteLine("Range State: " + tag.Range);
            							if (tag.BatteryPercent)
            							{
            								Console.WriteLine(tag.BatteryPercentUsed.ToString() + "% of battery consumed"); 
            							}
            						}
            					}
            					else
            					{
            						Console.WriteLine("Error reading card: " + myReader.DeviceStatus);
            					}
            				}
            				catch (Exception ex)
            				{
            					Console.WriteLine("An exception was thrown : " + ex);
            				}
            			}
            			Console.WriteLine("Press Enter to continue...");
            			Console.ReadLine();                
            		}
            	}
            }
            
            </code>
            <B>Output:</B>
            <code>
            Tag info:
            ID: 200074790
            Model: IQ8N
            Range State: NormalRange
            11% of battery consumed
            Press Enter to continue...
            </code>
             </example>
             <param name="tag"></param>
             <returns>true if successful, false if communication cannot be established.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.SetTagRangeState(IDENTEC.Tags.iQTag,System.Boolean)">
            <summary>
            Sets the i-Qx tag into extended or normal range mode.
            <seealso cref="P:IDENTEC.Tags.iQTag.Range"/>
            <seealso cref="P:IDENTEC.Tags.iQTag.ReportsBatteryVoltage"/>
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <param name="tag">The i-Qx tag to communicate with.</param>
            <param name="enableExtendedRange">Set to true for extended range, false for normal range.</param>
            <remarks>The extended range state may not be as reliable as normal range for data transfer. <B>If the tag supports reporting battery voltage then a Scan must be performed before the tag will change state.</B></remarks>									
            <returns>true if successful, false if it fails</returns>						
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadiQTagVersion(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the version information from the i-Q tag.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadTagCurrentTemperature(IDENTEC.Tags.iQTag)">
            <summary>
            Forces the temperature tag to report the current temperature even if the tag is not in a logging state.
            </summary>
            <param name="tag">The tag to read the current temperature from.</param>
            <returns>A TemperatureLogSample object containing the temperature and time of the reading.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.StartTagLogging(IDENTEC.Tags.iQTag,System.TimeSpan)">
             <summary>Sets <I>tag</I> into the logging mode. If it is already logging the log will clear and restart.
             <seealso cref="M:IDENTEC.Readers.iCardCF.StopTagLogging(IDENTEC.Tags.iQTag)"/>
             <seealso cref="M:IDENTEC.Readers.iCardCF.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="M:IDENTEC.Readers.iCardCF.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>	
             <remarks>The maximum sampling interval of the tag is 65 535 seconds (approx 18 hours).</remarks>
             <param name="tag">The tag to commence logging.</param>
             <param name="samplingRate">The rate at which samples are recorded in the log.</param>			
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:System.ArgumentOutOfRangeException"><I>samplingRate</I> exceeds 65535 seconds.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>						
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.StopTagLogging(IDENTEC.Tags.iQTag)">
             <summary>Stops <I>tag</I> from logging.
             <seealso cref="M:IDENTEC.Readers.iCardCF.StartTagLogging(IDENTEC.Tags.iQTag,System.TimeSpan)"/>
             <seealso cref="M:IDENTEC.Readers.iCardCF.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="M:IDENTEC.Readers.iCardCF.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>	
             <remarks>A log does not need to be stopped in order to be read.</remarks>
             <param name="tag">The tag to stop logging.</param>			
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>				
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the log off of the tag and converts it to a temperature log.
             <seealso cref="M:IDENTEC.Readers.iCardCF.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>			
             <remarks>This method actually calls ReadTagRawLog and does a conversion.</remarks>
             <param name="tag">The tag to read.</param>
             <returns>A TemperatureLogData object containing the sampled data.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadTagRawLog(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the log samples as stored on the tag.
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>
             <param name="tag">The tag to read.</param>
             <returns>The RawLogData object containing the raw samples.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadTagLogSamplingInterval(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the log sampling interval off of the tag.
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>
             <param name="tag">The tag to read.</param>
             <returns>The Timespan representing the logging interval.</returns>	
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadTagTemperatureExtremes(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the highest recorded temperature and lowest recorded temperature as recorded in the temperature log.		
             <seealso cref="T:IDENTEC.Tags.Logging.TemperatureExtremes"/>
             </summary>						
             <remarks>This capability is only available on i-Q temperature tags that support reporting battery percent used.
             </remarks>
             <param name="tag">The tag to contact.</param>			
             <returns>A TemperatureExtremes object.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadLastSampledTemperature(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the last temperature sample logged.
             </summary>
             <param name="tag">The tag to query.</param>
             <returns>The most recently logged TemperatureLogSample.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.StartTagDigitalInputEventLog(IDENTEC.Tags.iQTag)">
            <summary>
            Starts the tag digital input event log.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.StartTagDigitalInputEventLog(IDENTEC.Tags.iQTag,System.Boolean)">
            <summary>
            Starts the tag digital input event log.
            </summary>
            <param name="tag">The tag.</param>
            <param name="synchronize">if set to <c>true</c> [synchronize].</param>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadTagDigitalInputEventLog(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the InputEvent log off of the tag.
             <seealso cref="M:IDENTEC.Readers.iCardCF.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>			
             <remarks>This method actually calls ReadTagRawInp and does a conversion.</remarks>
             <param name="tag">The tag to read.</param>
             <returns>A InputLogData object containing the sampled data.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> none or wrong logging capabilities.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of reading a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadiQLTagMarkerInfo(IDENTEC.Tags.iQTag)">
            <summary>
            Reads Marker info off of i-Q tags with the "L" indicator on the label.
            </summary>
            <param name="tag"></param>
            <returns>A Tags.LoopData object.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadIQTagAbsoluteEngineHourCounter(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the total hours logged by the tag (6 minute resolution). <B>For i-Q8C tags only.</B>
            </summary>
            <remarks>The IQ8C has a combined PNP/NPN input to recognise pulses or a high/low status. This input is polled every 2 seconds and when active increments the hour counter in RAM. If the RAM hour counter reaches the value for 6 minutes (1/10 hour), the hour counter in EEPROM is incremented. Also a absolute hour counter(not user writeable) is updated.</remarks>
            <param name="tag">The tag to read from.</param>
            <returns>The total amount of time the engine has been running for.</returns>
            <seealso cref="M:IDENTEC.Readers.iCardCF.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)"/>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the user engine counter value from the tag (6 minute resolution). <B>For i-Q8C tags only.</B>
            </summary>
            <param name="tag">The tag to read from.</param>
            <returns>The amount of time the engine has been running for as specified by the user counter.</returns>
            <seealso cref="M:IDENTEC.Readers.iCardCF.ReadIQTagAbsoluteEngineHourCounter(IDENTEC.Tags.iQTag)"/>
            <seealso cref="M:IDENTEC.Readers.iCardCF.WriteIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag,System.TimeSpan)"/>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.WriteIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag,System.TimeSpan)">
            <summary>
            Writes the specified amount of time to the user/trip hour meter. Typically used to set the time back to zero. <B>For i-Q8C tags only.</B>
            </summary>
            <param name="tag">The tag.</param>
            <param name="ts">The amount of time to reset the user counter to. In a resolution of 6 minutes.</param>
            <remarks>The counter is reported in 6 minute increments (10x per hour). Any value lesser or greater will be rounded.</remarks>
            <seealso cref="M:IDENTEC.Readers.iCardCF.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)"/>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.Disconnect">
            <summary>
            Disconnects host from the reader. If a PCMCIA connection, then the card will be powered off.            
            <seealso cref="P:IDENTEC.Readers.iCardCF.Connected"/>
            </summary>
            <returns>True if successful, false if it fails.</returns>
            <remarks>When using a host that runs on batteries, try to disconnect when possible as it will extend the batter life.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iCardCF.Dispose">
            <summary>
            Cleans up resources and closes the handle to the communications port.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.SerialNumber">
            <summary>
            The i-CARD  unique identifier.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.Retries">
            <summary>
            The number of retries the i-CARD 3 attempts when RF communications with a tag fails.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When the value is set to less than 1 or more than 255.
            </exception>		
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.MaxOutputdBm">
            <summary>
            The maximum dBm allowable to transmit as dictated by the card's firmware.
            </summary>
            <remarks>This value is read from the card during the connection routine.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.MinOutputdBm">
            <summary>
            The minimum transmission level the card can output.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.Connected">
            <summary>
            Check to see if the iCard3 object is connected to the device
            <seealso cref="M:IDENTEC.Readers.iCardCF.Connect"/>
            <seealso cref="M:IDENTEC.Readers.iCardCF.Disconnect"/>
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.EnableTagLogDataProtection">
            <summary>
            Enables/Disables the protection of log data from accidental overwrites
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.DeviceStatus">
            <summary>
            The error code as returned by the hardware. It is reset with each call to the card and may provide additional 
            </summary>
            <remarks>This is the <B><I>device error code</I></B> message as returned directly from the card's low level communications with the tag(s). If there are no problems then OK is returned.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.EnableWakeupTagsDuringScan">
            <summary>
            When enabled the tags are sent a wakeup call during scan. The default value is true.
            </summary>
            <remarks>This is an advanced property. Disabling this property is not recommended and requires intimate knowledge of the solution and timing.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.EnableChangeICSessionAddressDuringScan">
            <summary>
            When enabled the session address is changed by the card for each scan. The default value is true.
            </summary>
            <remarks>This is an advanced property. Disabling this property is not recommended and requires intimate knowledge of the solution.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.TxPowerIQ">
            <summary>
            The RF transmission level for communications with i-Q tags			
            <seealso cref="P:IDENTEC.Readers.iCardCF.MinOutputdBm"/>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when attempting to set the power beyond the allowed range.</exception>						
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.EnableReceiveBoost">
            <summary>
            The RF receive boost. Enabling makes the card more sensitive to RF signals from tags. The default value is true.
            </summary>
            <remarks>It is only necessary to disable this property when close communications with tags is necessary.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.Information">
             <summary>
             The card information.
             </summary>
             <example>
             This example shows how to connect to an i-CARD 3 and display the Information <B>[C#]:</B>
             <code>
            			using IDENTEC.Readers;
            			using IDENTEC.Tags;
            			public static void Main()
            			{
            				iCard3 myReader = new iCard3();
            				try
            				{
            					if (myReader.Connect())
            					{
            						Console.WriteLine("i-CARD Information: " + myReader.Information);
            						Console.WriteLine("Serial Number: " + myReader.SerialNumber);
            						Console.WriteLine(@"Production Info (Year/Week/Batch): " + myReader.ProductionInformation.Year + "//" 
            							+ myReader.ProductionInformation.Week + "//" + myReader.ProductionInformation.ProductionNumber);
            						Console.WriteLine("Region: " + myReader.Region.ToString());
            						Console.WriteLine("Current Transmission Power for i-Q tag communications: " + myReader.TxPowerIQ + "dBm");
            						Console.WriteLine("Current Transmission Power for i-D2 tag communications: " + myReader.TxPowerID + "dBm");
            					}
            					else
            					{
            						Console.WriteLine("Error reading card: " + myReader.DeviceStatus);
            					}
            				}
            				catch (Exception ex)
            				{
            					Console.WriteLine("An exception was thrown : " + ex);
            				}
            				Console.WriteLine("Press Enter to continue...");
            				Console.ReadLine();				
            			}			
             </code>
             <B>Output</B>			
             <code>
            i-CARD Information: 2.9 Nov 09 2004iC3 HW5.0
            Serial Number: 04123I0887
            Production Info (Year/Week/Batch): 2004//12//887
            Region: NorthAmerican
            Current Transmission Power for i-Q tag communications: 6dBm
            Current Transmission Power for i-D2 tag communications: 30dBm
            Press Enter to continue...
             </code>
             </example>
             <remarks>This value is retrieved when connecting to the i-CARD.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.Region">
            <summary>
            The RF frequency. Set this to NA (916.5MHz) or European (868MHz). 
            <seealso cref="P:IDENTEC.Tags.Tag.Region"/>
            </summary>		
            <exception cref="T:IDENTEC.Readers.RegionException">Thrown when the region specified is incompatible.</exception>				
        </member>
        <member name="P:IDENTEC.Readers.iCardCF.MinReceivedBm">
            <summary>
            The minimum signal strength the card will report after communications with a tag
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.ICompatibleIOStream">
            <summary>
            Provides common method definitions for use with custom streams (serial port, file, etc).
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.ICompatibleIOStream.WriteData(System.Byte[],System.Int32)">
            <summary>
            Writes data to the stream
            </summary>
            <param name="buffer"></param>
            <param name="nBytesToWrite"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.ICompatibleIOStream.ReadData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream. Preferrably a blocking call.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="nBytesToRead"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.ICompatibleIOStream.IsOpen">
            <summary>
            Determines whether this instance is open.
            </summary>
            <returns>
            	<c>true</c> if this instance is open; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:IDENTEC.Readers.CFReaderSearch">
            <summary>
            A class to enable searching the registry for the COM port mapped to the reader.
            <seealso cref="T:IDENTEC.Readers.BeaconReaders.iCardCFB"/>
            <seealso cref="T:IDENTEC.Readers.iCardCF"/>
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.CFReaderSearch.FindReaderComPort">
            <summary>
            Searches the registry for the COM port that the i-CARD CF is configured for.
            <seealso cref="T:IDENTEC.Readers.BeaconReaders.iCardCFB"/>
            <seealso cref="T:IDENTEC.Readers.iCardCF"/>
            </summary>
            <returns>The COM port that the card is configured to use in the registry. <B>-1</B> if it is not available.</returns>
            <exception cref="T:System.NotSupportedException">The driver for the CF card is not installed in the registry (Windows 2000 or later). Does not apply to Windows CE devices.</exception>	
        </member>
        <member name="T:IDENTEC.Readers.BeaconReaders.iCardCFB">
            <summary>
            Represents the functionality of an i-CARD CF for use with IDENTEC SOLUTIONS Inc. i-B2 (beacon) tags.
            <seealso cref="T:IDENTEC.Readers.BeaconReaders.iPortR2"/>
            </summary>
            <remarks>Although the i-CARD CF uses a com port, it requires a driver for Windows. For Windows Mobile devices, a driver is not required.
            The i-PORT R2's firmware is identical to an i-CARD CF "B". </remarks>
            <example>
            This example shows how to connect to an i-CARD CF 'B' and queries the reader for its list of tags. <B>[C#]:</B>
            	<code>
            using System;
            using System.Diagnostics;
            //IDENTEC SOLUTIONS specific:
            using IDENTEC;
            using IDENTEC.Readers;
            using IDENTEC.Tags;
            //IDENTEC SOLUTIONS Beacon technology specific:
            using IDENTEC.Readers.BeaconReaders;
            using IDENTEC.Tags.BeaconTags;
            namespace i_CARD_CF_B
            {
            class iCARDCF_B_Example
            {
            /// <summary>
            /// The main entry point for the application.
            /// </summary>
            [STAThread]
            static void Main(string[] args)
            {
            /*
            Notes:
            You will need to obtain the i-CARD CF .inf file to enable the i-CARD CF com port connection on your PC.
            */
            try
            {
            Console.WriteLine("----- IDENTEC SOLUTIONS Inc. i-CARD CF 'B' Sample -----\n\n");
            Console.WriteLine("Please input the COM port number for your i-CARD:");
            string strPort = Console.ReadLine();
            Console.Write("Connecting to Com{0}: ...", strPort);
            iCardCFB reader = new iCardCFB();
            reader.Connect(int.Parse(strPort));
            Console.WriteLine("Connected!");
            //Tell the reader to clear the tags out of its internal list when we ask for the list of tags:
            reader.SetTagListBehavior(TagListBehavior.RemoveTagsWhenReported);
            //Turn on the receive amplifier to increase read range,
            //with it on we can "hear" tags at down to -90 dBm, with it off only at -60
            reader.EnableHighRfSensitivity(true);
            int nmV = reader.GetPowerSupplyVoltage();
            Console.WriteLine("\n{0, -10}\t{1,-10}\t{2, -20}","Serial #", "Input Power", "Powered On");
            Console.WriteLine("{0, -10}\t{1,-10}mV\t{2, -20}",
            reader.SerialNumber, nmV, reader.BootDateTime.ToString());
            while (true)
            {
            //Get the tag extended info (first time and last time seen)
            Console.WriteLine("\nQuerying reader for its list of tags...");
            TagCollection tags = reader.GetTags(true);
            if (tags.Count == 0)
            {
            Console.WriteLine("\nNo tags to report");
            }
            else
            {
            tags.Sort();
            Console.WriteLine("\n{0} tags to report:\n", tags.Count);
            Console.WriteLine("\n{0,-15} {1,-20} {2,-20} {3,-10} {4,-10}",
            "Tag", "First Detected", "Last Detected", "Max RSSI", "Last RSSI");
            Console.WriteLine("----------------------------------------------------------------------------");
            foreach (iB2Tag t in tags)
            {
            Console.WriteLine("{0,-15} {1,-20:g} {2,-20:g} {3,-10} {4,-10}",
            t.Label, t.FirstSeen, t.ContactTime, t.MaxSignal, t.Signal);
            }
            }
            Console.WriteLine("\r\n");
            Console.Write("View tags seen on each reader again (Y/N)? Y: ");
            string strReponse = Console.ReadLine();
            if (strReponse.ToLower() == "n")
            break;
            }
            }
            catch (Exception ex)
            {
            Console.WriteLine(ex.Message);
            }
            Console.WriteLine("Press ENTER to end the program");
            Console.ReadLine();
            }
            }
            }
            </code>
            	<B>Output</B>
            	<code>
            ----- IDENTEC SOLUTIONS Inc. i-CARD CF 'B' Sample -----
            Please input the COM port number for your i-CARD:
            5
            Connecting to Com5: ...Connected!
            Serial #        Input Power     Powered On
            62810104        5033      mV    10/18/2006 4:21:41 PM
            Querying reader for its list of tags...
            1 tags to report:
            Tag             First Detected       Last Detected        Max RSSI   Last RSSI
            ----------------------------------------------------------------------------
            0.380.000.115   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -70        -70
            View tags seen on each reader again (Y/N)? Y:
            Querying reader for its list of tags...
            14 tags to report:
            Tag             First Detected       Last Detected        Max RSSI   Last RSSI
            ----------------------------------------------------------------------------
            0.300.002.008   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -65        -65
            0.360.100.432   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -71        -71
            0.380.000.108   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -66        -71
            0.380.000.115   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -68        -68
            0.380.000.118   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -67        -67
            0.380.000.120   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -71        -71
            0.380.000.121   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -65        -65
            0.390.101.926   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -79        -79
            0.390.102.348   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -65        -68
            0.390.102.823   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -74        -74
            0.390.102.994   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -72        -79
            0.390.104.174   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -68        -68
            0.390.104.481   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -79        -79
            0.390.104.972   10/18/2006 4:21 PM   10/18/2006 4:21 PM   -77        -77
            View tags seen on each reader again (Y/N)? Y: n
            Press ENTER to end the program
            </code>
            </example>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.ConnectSlavePort(System.Boolean)">
            <summary>
            Connects the slave port.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.GetBusAddress">
            <summary>
            Gets the bus address.
            </summary>
            <returns>The bus address.</returns>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.SetBusAddress(System.Int32)">
            <summary>
            Set the bus address
            </summary>
            <param name="address">The bus address</param>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.#ctor">
            <summary>
            Initializes a new i-CARD CF 'B'
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.#ctor(IDENTEC.iBusAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Readers.BeaconReaders.iPortR2"/> class.
            </summary>
            <param name="iBus">The i bus.</param>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.Connect">
            <summary>
            Connects to the first card in the host.
            <seealso cref="T:IDENTEC.Readers.CFReaderSearch"/>
            </summary>				
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.Connect(System.Int32)">
            <summary>
            Connects to the CF card via a com port (RS-232).
            <seealso cref="P:IDENTEC.Readers.BeaconReaders.iCardCFB.BootDateTime"/>
            </summary>
            <param name="commPort"></param>
            <remarks>Windows Mobile devices do not require a driver, whereas Windows 2000, XP, 2003 and later require a driver. If the reader is powered by the host, this will power on the reader. Once the reader is powered on, it continuously listens for beaconing tags.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.SetDataLen(System.Int32)">
            <summary>
            Sets the reader's internal taglist's data length.
            <seealso cref="T:IDENTEC.Readers.BeaconReaders.TagListBehavior"/>				
            <seealso cref="M:IDENTEC.Readers.BeaconReaders.iCardCFB.GetTagListBehavior"/>
            </summary>
            <remarks>You should clear the list after changing the data length!!</remarks>
            <param name="len">The maximum number of bytes to save. Maximum is 64</param>			
            <returns></returns>							
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.ResetParams">
            <summary>
            Sets the reader's parameters to default.
            <seealso cref="T:IDENTEC.Readers.BeaconReaders.TagListBehavior"/>				
            <seealso cref="M:IDENTEC.Readers.BeaconReaders.iCardCFB.GetTagListBehavior"/>
            </summary>
            <remarks>Should be done after every connect!!</remarks>
            <returns></returns>							
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.ResetToFactoryDefault">
            <summary>
            This command reset all parameters to default configuration.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.Disconnect">
            <summary>
            Closes the connection to the reader.
            </summary>
            <remarks>If the reader is powered by the host, this call will power off the reader.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.SetTagListBehavior(IDENTEC.Readers.BeaconReaders.TagListBehavior)">
            <summary>
            Sets the reader's list behavior.
            <seealso cref="T:IDENTEC.Readers.BeaconReaders.TagListBehavior"/>				
            <seealso cref="M:IDENTEC.Readers.BeaconReaders.iCardCFB.GetTagListBehavior"/>
            </summary>
            <remarks>You should clear the list after changing the list behavior!!</remarks>
            <param name="mode">The TagListBehavior enumerated setting.</param>			
            <returns></returns>							
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.GetTagListBehavior">
            <summary>
            Queries the reader for its list behavior.
            </summary>
            <seealso cref="M:IDENTEC.Readers.BeaconReaders.iCardCFB.SetTagListBehavior(IDENTEC.Readers.BeaconReaders.TagListBehavior)"/>
            <returns></returns>				
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.GetTags(System.Boolean)">
            <summary>
            Gets the tag list from the reader. 				
            </summary>
            <param name="enableExtendedInfo">True to include the tag's detected count since the last call to GetTags or ClearTags.</param>			
            <returns>The collection of tags that have been detected.</returns>
            <exception cref="T:System.InvalidOperationException">The reader returned the wrong command code.</exception>	
            <remarks>The DateTime property of the iB2Tag is actually the last time the tag was seen and may not be the current time.</remarks>				
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.GetTagsVariableDataLen">
            <summary>
            Gets the tag list from the reader. 
            </summary>
            <returns>The collection of tags that have been detected.</returns>
            <exception cref="T:System.InvalidOperationException">The reader returned the wrong command code.</exception>	
            <remarks>The <see cref="P:IDENTEC.Tags.Tag.ContactTime"/> property of the iB2Tag is actually the last time the tag was seen when <I>enableExtendedInfo</I> is enabled and may not be the current time. When <I>enableExtendedInfo</I> is disabled the <see cref="P:IDENTEC.Tags.Tag.ContactTime"/> may not reflect the actual time the tag was detected.</remarks>				
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.EnableHighRfSensitivity(System.Boolean)">
            <summary>
            Enables/disables high sensitivty receive.
            <seealso cref="P:IDENTEC.Readers.BeaconReaders.iCardCFB.RxBoostEnabled"/>
            </summary>
            <param name="enable">True for -85 receive, false for -55 receive</param>
            <returns></returns>
            <remarks>Using this command is recommended over SetRxLevelForTagEntry and SetRxLevelForTagExit as it does not rely on device calibration.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.SetTagSignalFilterLevel(System.Int32)">
            <summary>
            Sets the tag signal filter level.
            </summary>
            <param name="minsignal">The minsignal.</param>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.SetTagListInhibitTime(System.TimeSpan)">
            <summary>
            Tags that have not been detected in longer than the inhibit time and have been reported are removed from the reader's internal list.
            </summary>
            <param name="lifetimeInList">The length of time that the tag remains in the list if it is not detected again. Set to 0 to keep the tag in the list. </param>
            <returns></returns>
            <remarks>The default is 60 seconds when the unit powers up.</remarks>
            <remarks>The resolution of the reader's timer is in seconds.</remarks>			
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.SetTagReReportingInterval(System.TimeSpan)">
            <summary>
            The time in seconds after which a tag is re-reported if it is still detected.
            </summary>
            <param name="interval">The amount of time after which a tag is re-reported if it is still detected. To disable re-reporting set to 0 (default on power up). </param>
            <returns></returns>
            <remarks>The resolution of the reader's timer is in seconds.</remarks>				
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.ClearTagList">
            <summary>
            Removes all tags from the reader's list.
            </summary>
            <returns></returns>
            <remarks>The list is empty on device power-up.</remarks>				
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.SetAllTagsInListAsNotYetReported">
            <summary>
            This command causes a resend of all tags in reader memory  (schedule for retransmission).
            </summary>
            <returns>True if successful, false if it fails.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.GetPowerSupplyVoltage">
            <summary>
            Returns the input voltage supplied to the reader in milliVolts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:IDENTEC.Readers.BeaconReaders.iCardCFB"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:IDENTEC.Readers.BeaconReaders.iCardCFB"/>.
            </returns>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardCFB.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iCardCFB.Address">
            <summary>
            Gets the bus address assigned on the bus.
            </summary>
            <value>The bus address message.</value>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iCardCFB.R2">
            <summary>
            The CF 'B' card and the i-PORT R2 share the same firmware; therefore the same underlying class is used in this assembly.
            </summary>
            <remarks>For expert use only.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iCardCFB.DataStream">
            <summary>
            Associate a user defined transport data stream for communications
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iCardCFB.Connected">
            <summary>
            Returns true if connected, false if not.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iCardCFB.RxBoostEnabled">
            <summary>
            Reports the status of the receive boost enabled.
            <seealso cref="M:IDENTEC.Readers.BeaconReaders.iCardCFB.EnableHighRfSensitivity(System.Boolean)"/>
            </summary>
            <remarks>This property is only valid after a connection to the device has been made.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iCardCFB.SerialNumber">
            <summary>
            The unique serial number of the unit
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iCardCFB.Information">
            <summary>
            Information string as returned by the reader.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iCardCFB.FirmwareVersion">
            <summary>
            Firmware version string as returned by the reader.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iCardCFB.BootDateTime">
            <summary>
            The time when the device was powered on.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iCardCFB.MajorVersion">
            <summary>
            Gets the major version.
            </summary>
            <value>The major version.</value>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iCardCFB.MinorVersion">
            <summary>
            Gets the minor version.
            </summary>
            <value>The minor version.</value>
        </member>
        <member name="T:IDENTEC.Readers.BeaconReaders.TagBeaconEventArgs">
            <summary>
            The event argument class for the iCardR2.TagBeacon event.
            <seealso cref="E:IDENTEC.Readers.BeaconReaders.iCardR2.TagBeacon"/>		
            </summary>	
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.TagBeaconEventArgs.#ctor">
            <summary>
            
            </summary>			
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.TagBeaconEventArgs.tag">
            <summary>
            The tag detected.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.BeaconReaders.iCardR2ErrorEventArgs">
            <summary>
            Event argument class for the iCardR2.ErrorOccurred
            <seealso cref="E:IDENTEC.Readers.BeaconReaders.iCardR2.ErrorOccurred"/>
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardR2ErrorEventArgs.#ctor">
            <summary>
            Initializes a new iCardR2ErrorEventArgs object
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.BeaconReaders.iCardR2ErrorEventArgs.ex">
            <summary>
            The exception error that occured in the 
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.BeaconReaders.iCardR2">
            <summary>
            Encapsulates the iCardR2 functionality.
            </summary>
            <example>
            This example shows how to connect to an i-CARD R2 and display the tags that are detected <B>[C#]:</B>
            <code>
            	class R2Example
            	{
            		public R2Example()
            		{
            			m_R2 = new iCardR2();
            			m_R2.TagBeacon +=new IDENTEC.Readers.BeaconReaders.iCardR2.TagBeaconEventHandler(m_R2_TagBeacon);
            			m_R2.ErrorOccurred +=new IDENTEC.Readers.BeaconReaders.iCardR2.iCardR2ErrorEventHandler(m_R2_ErrorOccurred);
            		}
            		private iCardR2 m_R2;
            		[STAThread]
            		static void Main(string[] args)
            		{
            			R2Example r2Example = new R2Example();
            			try
            			{
            			
            				r2Example.SetupCard();
            			}
            			catch (Exception ex)
            			{
            				Console.WriteLine(ex.Message);
            			}
            			Console.WriteLine("To end program at any time, press Enter...\r\n\r\n\r\n");
            			Console.ReadLine();   
            			r2Example.m_R2.Disconnect();
            		}
            
            		///Gets the reader up and running
            		private void SetupCard()
            		{
            			m_R2.Connect();
            			m_R2.StartListening(true);
            		}
            
            		///Responds to the iCardR2.TagBeaconEventHandler event to print out the serial number and the  date/time of contact
            		private void m_R2_TagBeacon(object sender, TagBeaconEventArgs e)
            		{
            			Console.WriteLine("Tag " + e.tag.Label + " seen at " + e.tag.ContactTime);
            		}
            
            		///Responds to the iCardR2.iCardR2ErrorEventHandler and prints the error message to the screen
            		private void m_R2_ErrorOccurred(object sender, iCardR2ErrorEventArgs e)
            		{
            			Console.WriteLine(e.ex.Message);
            		}
            	}
            </code>
            </example>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardR2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardR2.Connect">
            <summary>
            Connects to the default PCMCIA slot. 
            </summary>
            <remarks>Use this method if only one card is inserted in the host.</remarks>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardR2.Connect(System.Int32)">
            <summary>
            
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardR2.ConnectRS232(System.Int32)">
            <summary>
            Connects the reader via RS232
            </summary>
            <param name="port">The COM: port to connect to.</param>
            <returns>True if successful, false if it fails.</returns>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            </exception>	
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardR2.Disconnect">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardR2.StartListening(System.Boolean)">
            <summary>
            Starts the Card listening for beacon tags.
            </summary>
            <param name="LongRangeEnabled">Set to true for long range detection, false for normal range.</param>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardR2.StopListening">
            <summary>
            Stops the card from listening
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.BeaconReaders.iCardR2.PumpTagsThread">
            <summary>
            This thread pushes tags out to the user subscribed event. It doesn't matter if the user's code
            is slow because this is a dedicated thread using a message queue.
            </summary>
        </member>
        <member name="E:IDENTEC.Readers.BeaconReaders.iCardR2.TagBeacon">
            <summary>
            The event that is fired each time a tag is detected.
            <seealso cref="T:IDENTEC.Readers.BeaconReaders.TagBeaconEventArgs"/>
            </summary>
        </member>
        <member name="E:IDENTEC.Readers.BeaconReaders.iCardR2.ErrorOccurred">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.BeaconReaders.iCardR2.Connected">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.BeaconReaders.iCardR2.TagBeaconEventHandler">
            <summary>
            The tag beacon event delegate.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.BeaconReaders.iCardR2.iCardR2ErrorEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreLogLevel">
            <summary>
            Specifies the debug level that will be reported on TCP port 7090 (typically viewed via a telnet connection).
            </summary>
            <remarks>The debug port comes up with a TCP server on port 7090. After connecting to the debug port all the messages printed to the debug port are shown immediately. </remarks>        
        </member>
        <member name="F:IDENTEC.iCore.iCoreLogLevel.Fatal">
             <summary>
            Fatal situation where the application is unable to continue. e.g. Out of memory.
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreLogLevel.Alert">
             <summary>
            Same as fatal for compatibility purpose to the original syslog.
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreLogLevel.Critical">
             <summary>
            Critical situation where the application continues to run but the results are more or less senseless. e.g. No interface available.
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreLogLevel.Error">
            <summary>
            Normal error situation, e.g. a reader is not responding or not accessible.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreLogLevel.Warning">
             <summary>
            An action is completed successfully but can not further be processed. E.g. internal lists full. 
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreLogLevel.Notice">
             <summary>
            Notification of some system events. E.g. connection or disconnections from clients. 
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreLogLevel.Info">
             <summary>
            Informational messages e.g. startup or shutdown messages. 
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreLogLevel.Debug">
             <summary>
            All messages for debugging the installation.Not recommended for normal usage. 
             </summary>
        </member>
        <member name="T:IDENTEC.iCore.ConfigurationKey">
            <summary>
            Specifies all the known configuration keys that are compatible with the i-CORE. 
            </summary>
            <remarks>These keys are not compatible with i-PORT 3, which runs an earlier version of the i-CORE.</remarks>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.LogLevel">
            <summary>
            The logging level for the main and devices module [0-8]. (Integer). Also see <see cref="T:IDENTEC.iCore.iCoreLogLevel"/>
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.Project">
            <summary>
            (String)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.Location">
            <summary>
            (String)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.MainID">
            <summary>
            Main identification number which is used in an event message. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.SubID">
            <summary>
            Sub identification number which is used in an event message. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.Country">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.IBusInterfaceY">
            <summary>
            Identec Bus interface Y where Y is from 0 to 8 (RS422) [0-8 for key value]. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.PBusInterface1">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.DcehLogLevel">
            <summary>
            The logging level for the default command event handler [0-8]. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.DcehEnableSerial">
             <summary>
            Serial host communication(COM)true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.DcehBaudrate">
             <summary>
            Default command handler serial  port baudrate. (Integer)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.DcehServerPort">
            <summary>
            TCP server port, waiting for incoming client connections. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.DcehAckTimeout">
            <summary>
            Event message acknowledge  time out, an event must be acknowledge within this time. (Timespan)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.DcehHBCycle">
            <summary>
            Heartbeat event message cycle; 0 to disable. (Timespan)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.DcehDiagEvent">
             <summary>
            Module up/down events. true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.DcehCntTimeStamp">
             <summary>
            Event message contains DateTime information. true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.DcehCntMainSubID">
             <summary>
            Event message contains main and sub ID information. true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.DcehCntFStrength">
             <summary>
            Tag Event message contains field strength (RSSI) information. true..enabled false..disabled. (Boolean)
             </summary>                                
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.DcehCntTagData">
             <summary>
            Tag Event message contains selected tag's EEPROM data. true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.DcehCntTagStat">
             <summary>
            Tag Event message contains selected tag's status information. true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.DcehCntRespAnt">
             <summary>
            Tag Event message contains the information about the last antenna which woke up The specified tag. true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYEnable">
             <summary>
            true..enable additional event handler, false..disable additional event handler. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYLogLevel">
             <summary>
            Additional event handler logging level. (Integer)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYName">
            <summary>
            For informational purposes. (String)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYTyp">
            <summary>
            Defines type of events. (Iteger)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYServerPort">
            <summary>
            TCP server port, waiting for incoming client connections. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYClientIP">
            <summary>
            TCP Client IP address. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYClientPort">
            <summary>
            TCP client port. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYAckTimeout">
            <summary>
            Heartbeat event message cycle; 0 to disable. (Timespan)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYHBCycle">
            <summary>
            Heartbeat event message cycle; 0 to disable. (Timespan)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYDiagEvent">
             <summary>
            Module up/down events. true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYCntTimeStamp">
             <summary>
            Event message contains DateTime information. true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYCntMainSubID">
             <summary>
            Event message contains main and sub ID information. true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYCntFStrength">
             <summary>
            Tag Event message contains field strength (RSSI) information. true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYCntTagData">
             <summary>
            Tag Event message contains selected tag's EEPROM data. true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYCntTagStat">
             <summary>
            Tag Event message contains selected tag's status information. true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.EvhYCntRespAnt">
             <summary>
            Tag Event message contains the information about the last antenna which woke up The specified tag. true..enabled false..disabled. (Boolean)
             </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.TrgmLogLevel">
            <summary>
            Logging level for the trigger module [0-8]. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.TrgmEvHandlerID">
            <summary>
            0..defhandler, > 0 additional event handler 1-8 (report input events to specific event handler) [0-8]. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.TrgmEvRnInput1">
            <summary>
            0 .. none, 1.. rising, 2 .. falling, 3.. any. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.TrgmEvRnInput2">
            <summary>
            0 .. none, 1.. rising, 2 .. falling, 3.. any. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.TrgYEnable">
            <summary>
            0..disable, 1..enable internal trigger. (Boolean)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.TrgYName">
            <summary>
            Trigger name, for informational purposes. (String)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.TrgYID">
            <summary>
            Global ID which is set active or inactive inside of the triggermodule. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.TrgYSlope">
            <summary>
            0..low, 1..high, 2..rising, 3..falling, 4..any. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.TrgYInputs">
            <summary>
            i.e "1,2". (String)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.TrgYTime">
            <summary>
            Specifies the time how long the  Trigger is active. (TimeSpan)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.TrgYRetrigger">
            <summary>
            false.. do not retrigger, true retrigger on. (Boolean)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.ModYEnable">
            <summary>
            0..disable, 1..enable Module. (Boolean)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.ModYName">
            <summary>
            Module name, for informational purposes. (String)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.ModYType">
            <summary>
            Module type. (Integer - enum)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.ModYSerial">
            <summary>
            Serial number of the reader (UInt32)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.ModYNrAntenna">
            <summary>
            The number of antennas the reader has
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYEnable">
            <summary>
            0..disable, 1..enable Area. (Boolean)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYName">
            <summary>
            Area name, for informational purposes. (String)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYId">
            <summary>
            ID of the area. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYLogLevel">
            <summary>
            Loggging level for specific process (0-8). (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYEvRnTag">
            <summary>
            0 .. none, 1 .. enter, 2 .. leave ,  4 .. rereport,  7 .. any. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYDetMode">
            <summary>
            0..normal, 1..maxlevel, 2..in/out. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYScanPause">
            <summary>
            Delay between every scan sequence. (TimeSpan)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYDetInhibit">
            <summary>
            How long a tag has to be out of field to be reinterpreted as new. (TimeSpan)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYDetDuration">
            <summary>
            Special duration for in/out and maxlevel calculations. (TimeSpan)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYReReport">
            <summary>
            Rereport time. 0 = no rereport. (TimeSpan)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYReadRetries">
            <summary>
            Number of data communication retries. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYBlinkEnable">
            <summary>
            true..enabled, false..disabled. (Boolean)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYReadEnable">
            <summary>
            true..enabled, false..disabled. (Boolean)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYReadAddr">
            <summary>
            Memory address of i-Q family. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYReadAddrD">
            <summary>
            Memory address of i-D family. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYReadAddrB">
            <summary>
            Memory address of i-B family. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYReadNum">
            <summary>
            Number of bytes to read on i-Q tags. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYReadNumD">
            <summary>
            Number of bytes to read on i-D tags. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYReadNumB">
            <summary>
            Number of bytes to read on i-B tags. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYPSaveEnable">
            <summary>
            true..enabled, false..disabled. (Boolean)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYPSaveTime">
            <summary>
            Specifies the time the tag is in sleep mode. (TimeSpan)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AreaYPSMode">
            <summary>
            1..sleep, 2..mute, 3..both. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYEnable">
            <summary>
            Enables or disables the specified antenna. true..enabled, false..disabled. (Boolean)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYName">
            <summary>
            Antenna name, for informational purposes. (String)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYSlotSelect">
            <summary>
            2^x slots used for scan. (Integer)
            </summary>
            <remarks>For example, 64 tags = 2^6 so specify 6.</remarks>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYTxPowerQ">
            <summary>
            Transmit power setting for i-Q family (-40 to +6). (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYTxPowerD">
            <summary>
            Transmit power setting for i-D family (-40 to +23). (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYTxPowerP">
            <summary>
            Transmit power setting for passive family (-40 to +50). (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYPowerBoost">
            <summary>
            Additional power for any rf interactions excepted scan. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYRxThreshold">
            <summary>
            All tags detected with an RSSI below this specified value will be ignored. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYHighSens">
            <summary>
            For i-Q Family of Tags. true..enabled, false..disabled. (Boolean)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYHighSensD">
            <summary>
            For i-D Family of Tags. true..enabled, false..disabled. (Boolean)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYHighSensB">
            <summary>
            For i-B Family of Tags. true..enabled, false..disabled. (Boolean)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYCableLoss">
            <summary>
            Offset for different cable length nullification. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYSide">
            <summary>
            0..in, 1 ..out , used for in/out calculations. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYTriggerID">
            <summary>
            0..not triggered , > 0 TriggerID (TriggerModule). (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYAreaID">
            <summary>
            0..not linked, > 0 linked with Process 1-8. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYTagType">
            <summary>
            Bit0. i-Q, Bit1. i-D, Bit2. i-D_NA,Bit3. i-B,Bit4..i-P. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYModID">
            <summary>
            Module which handles this antenna. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYModAntID">
            <summary>
            Physical Antenna of the module. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.AntYRetries">
            <summary>
            Number of RF operation retries. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.MarkerYLoopID">
            <summary>
            Loop ID of the marker. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.MarkerYCurrent">
            <summary>
            Maximal current of the loop in mA. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.MarkerYSyncSlots">
            <summary>
            Bit 0 to 11 defines the 12 slots. If the bit is set then the marker must transmit a telegram during this slot. (Integer)
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.MarkerYThreshold">
            <summary>
            Define the loop % limit to trigger the relay.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ConfigurationKey.MarkerYRelay">
            <summary>
            0 = open the relay
            1 = close the relay
            2 = Relay is closed only when the vehicle detection level above the threshold
            3 = Relay is open only when the vehicle detection level is above the threshold
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreDiscoveryInformation">
            <summary>
            Represents the i-CORE discovery information .
            </summary>
            <seealso cref="T:IDENTEC.iCore.iCoreNetworkInterfaceInformation"/>
        </member>
        <member name="M:IDENTEC.iCore.iCoreDiscoveryInformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.iCoreDiscoveryInformation"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreDiscoveryInformation.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.iCoreDiscoveryInformation"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.iCoreDiscoveryInformation"></see>.
            </returns>
        </member>
        <member name="P:IDENTEC.iCore.iCoreDiscoveryInformation.SerialNumber">
            <summary>
            Gets the serial number of the host.
            </summary>
            <value>The serial number.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreDiscoveryInformation.MachineName">
            <summary>
            Gets the name of the machine.
            </summary>
            <value>The name of the machine.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreDiscoveryInformation.SoftwareVersion">
            <summary>
            Gets the software version.
            </summary>
            <value>The software version.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreDiscoveryInformation.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreDiscoveryInformation.ProtocolVersion">
            <summary>
            Gets the protocol version.
            </summary>
            <value>The protocol version.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreDiscoveryInformation.DefaultCommandHandlerServerPort">
            <summary>
            Gets the default command handler server port.
            </summary>
            <value>The default command handler server port.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreDiscoveryInformation.NetworkInfo">
            <summary>
            Gets the network info.
            </summary>
            <value>The network info.</value>
        </member>
        <member name="T:IDENTEC.iCore.iCoreNetworkInterfaceInformation">
            <summary>
            Represents the i-CORE network discovery information 
            </summary>
            <seealso cref="T:IDENTEC.iCore.iCoreDiscoveryInformation"/>        
        </member>
        <member name="M:IDENTEC.iCore.iCoreNetworkInterfaceInformation.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.iCoreNetworkInterfaceInformation"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.iCoreNetworkInterfaceInformation"></see>.
            </returns>
        </member>
        <member name="P:IDENTEC.iCore.iCoreNetworkInterfaceInformation.IPEndPoint">
            <summary>
            Represents the IPEndPoint of the network interface 
            </summary>
        </member>
        <member name="P:IDENTEC.iCore.iCoreNetworkInterfaceInformation.NetworkInterfaceName">
            <summary>
            Gets the name of the network interface.
            </summary>
            <value>The name of the network interface.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreNetworkInterfaceInformation.IPAddress">
            <summary>
            Gets the IP address.
            </summary>
            <value>The IP address.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreNetworkInterfaceInformation.NetMask">
            <summary>
            Gets the network mask.
            </summary>
            <value>The net mask.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreNetworkInterfaceInformation.Gateway">
            <summary>
            Gets the gateway.
            </summary>
            <value>The gateway.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreNetworkInterfaceInformation.DHCP">
            <summary>
            Gets the DHCP.
            </summary>
            <value>The DHCP.</value>
        </member>
        <member name="T:IDENTEC.iCore.iCoreDiscoveryEventArgs">
            <summary>
            Contains event data pertaining to the disovery of an i-CORE.
            </summary>
            <seealso cref="E:IDENTEC.iCore.iCoreDiscoverer.iCoreDiscovered"/>
        </member>
        <member name="P:IDENTEC.iCore.iCoreDiscoveryEventArgs.Info">
            <summary>
            Gets or sets the info.
            </summary>
            <value>The info.</value>
        </member>
        <member name="T:IDENTEC.iCore.iCoreDiscoverer">
            <summary>
            Exposes functionality for discovering i-CORE application instances running on the network.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreDiscoverer.DiscoverMessage">
            <summary>
            The string sent out on the UDP broadcast port.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreDiscoverer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreDiscoverer.DiscoveriCores">
            <summary>
            Discovers the cores using the default broadcast UDP port 7090.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.iCore.iCoreDiscoverer.DiscoveriCores(System.Int32)">
            <summary>
            Discoveris the i-CORE instances running on the network.
            </summary>
            <param name="port">The UDP port for the broadcast message. The default is typically port 7090.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.iCore.iCoreDiscoverer.DiscoveriCores(System.Int32,System.TimeSpan)">
            <summary>
            Discoveris the cores.
            </summary>
            <param name="port">The UDP broadcast port.</param>
            <param name="waitTimeout">The maximum timeout to wait for icore responses</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.iCore.iCoreDiscoverer.StartDiscovery">
            <summary>
            Starts the discovery. Used in conjunction with the <see cref="E:IDENTEC.iCore.iCoreDiscoverer.iCoreDiscovered"/> event.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreDiscoverer.StartDiscovery(System.Int32)">
            <summary>
            Starts the discovery. Used in conjunction with the <see cref="E:IDENTEC.iCore.iCoreDiscoverer.iCoreDiscovered"/> event.
            </summary>
            <param name="port">The UDP port to use.</param>
        </member>
        <member name="E:IDENTEC.iCore.iCoreDiscoverer.iCoreDiscovered">
            <summary>
            Raised when an i-CORE is discovered when the <see cref="M:IDENTEC.iCore.iCoreDiscoverer.StartDiscovery"/> method is used.
            </summary>
        </member>
        <member name="E:IDENTEC.iCore.iCoreDiscoverer.iCoreDiscoveredEnd">
            <summary>
            Raised when the discovery process of i-CORE is finished after <see cref="M:IDENTEC.iCore.iCoreDiscoverer.StartDiscovery"/> method is called.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreDiscoverer.iCoreDiscoveredHandler">
            <summary>
            Declares a delegate for a method that takes in a sender and a <see cref="T:IDENTEC.iCore.iCoreDiscoveryEventArgs"/>. For use with handling i-CORE discovery events that are raised.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreDiscoverer.iCoreDiscoveredDone">
            <summary>
            Declares a delegate for a method that takes in a sender. For use with handling i-CORE discovery done event raised.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.SocketStateBuffer">
            <summary>
            Helper class to work for state information with async socket calls
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreInformation">
            <summary>
            Represents version information about the i-CORE
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreInformation.ToString">
            <summary>
            Class info to string
            </summary>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.iCore.iCoreInformation.Info">
            <summary>
            Gets or sets the info.
            </summary>
            <value>The info.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreInformation.MajorVersion">
            <summary>
            Gets or sets the major version.
            </summary>
            <value>The major version.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreInformation.MinorVersion">
            <summary>
            Gets or sets the minor version.
            </summary>
            <value>The minor version.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreInformation.IsiCore">
            <summary>
            Gets a value indicating whether the connection is with an i-CORE or with an i-PORT 3.
            </summary>
            <value><c>true</c> if [isi core]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:IDENTEC.iCore.SocketErrorEventArgs">
            <summary>
            Represents the information provided when the <see cref="E:IDENTEC.iCore.iCoreEventChannel.Disconnected"/> event is raised.
            </summary>
            <remarks>This class encapsulates <seealso cref="T:System.Net.Sockets.SocketException"/> exceptions that are thrown in asynchronous socket calls.</remarks>
        </member>
        <member name="M:IDENTEC.iCore.SocketErrorEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.SocketErrorEventArgs"/> class.
            </summary>
        </member>
        <member name="P:IDENTEC.iCore.SocketErrorEventArgs.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:IDENTEC.iCore.SocketErrorEventArgs.SocketException">
            <summary>
            Gets the socket exception that was thrown in an internal asynchronous socket callback.
            </summary>
            <value>The socket exception.</value>
        </member>
        <member name="T:IDENTEC.iCore.iCoreEventArgs">
            <summary>
            <B>iCoreEventArgs</B> is the base class for containing i-CORE event data.
            </summary>
        </member>
        <member name="P:IDENTEC.iCore.iCoreEventArgs.DateTime">
            <summary>
            Gets the date time.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreEventArgs.iHubSubID">
            <summary>
            Gets the i-Hub sub ID.
            </summary>
            <value>The i hub sub ID.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreEventArgs.iHubMainID">
            <summary>
            Gets the i-Hub main ID.
            </summary>
            <value>The i hub main ID.</value>
        </member>
        <member name="T:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs">
            <summary>
            Represents the information provided when the <see cref="E:IDENTEC.iCore.iCoreEventChannel.ModularDeviceStatusChanged"/> event is raised.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs"/> class.
            </summary>
        </member>
        <member name="P:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs.ModuleID">
            <summary>
            Gets the module ID on the i-BUS, 0 for the entire i-HUB.
            </summary>
            <value>The module ID.</value>
        </member>
        <member name="P:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs.Status">
            <summary>
            Gets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs.InfoMessage">
            <summary>
            Gets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs.DeviceStatus">
            <summary>
            Enumerates the status of the device
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs.DeviceStatus.Indeterminate">
            <summary>
            The status of the device could is uknown.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs.DeviceStatus.ModuleDown">
            <summary>
            The device is now offline.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs.DeviceStatus.ModuleUp">
            <summary>
            The device is now online.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.HeartbeatEventArgs">
            <summary>
            Represents the information provided when the diagnostic <see cref="E:IDENTEC.iCore.iCoreEventChannel.HeartBeat"/> event is raised by the i-CORE.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.HeartbeatEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.HeartbeatEventArgs"/> class.
            </summary>
        </member>
        <member name="P:IDENTEC.iCore.HeartbeatEventArgs.InfoMessage">
            <summary>
            Gets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:IDENTEC.iCore.TagEventArgs">
            <summary>
            Represents the information reported by an i-CORE when a tag event occurs.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.TagEventArgs.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.TagEventArgs"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.TagEventArgs"></see>.
            </returns>
        </member>
        <member name="P:IDENTEC.iCore.TagEventArgs.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:IDENTEC.iCore.TagEventArgs.AreaID">
            <summary>
            Gets or sets the area ID.
            </summary>
            <value>The area ID.</value>
        </member>
        <member name="P:IDENTEC.iCore.TagEventArgs.DateTime">
            <summary>
            Gets or sets the date time.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="P:IDENTEC.iCore.TagEventArgs.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:IDENTEC.iCore.TagEventArgs.Tag">
            <summary>
            Gets or sets The specified tag.
            </summary>
            <value>The specified tag.</value>
        </member>
        <member name="P:IDENTEC.iCore.TagEventArgs.DataMemoryAddress">
            <summary>
            Gets or sets the data memory address.
            </summary>
            <value>The data memory address.</value>
        </member>
        <member name="T:IDENTEC.iCore.TagEventArgs.Detection">
            <summary>
            Enumerates the tag detection type.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.TagEventArgs.Detection.Indeterminate">
            <summary>
            The type could not be determined.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.TagEventArgs.Detection.Enter">
            <summary>
            The tag is reported to have entered.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.TagEventArgs.Detection.Leave">
            <summary>
             The tag is reported to have left.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.TagEventArgs.Detection.In">
            <summary>
             The tag is reported to be in.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.TagEventArgs.Detection.Out">
            <summary>
             The tag is reported to be out.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.TagEventArgs.Detection.ReReported">
            <summary>
             The tag is being re-reported.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.InputTriggerEventArgs">
            <summary>
            Represents input trigger event data from an i-PORT 3 or an i-HUB.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.InputTriggerEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.InputTriggerEventArgs"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.InputTriggerEventArgs.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.InputTriggerEventArgs"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.InputTriggerEventArgs"></see>.
            </returns>
        </member>
        <member name="P:IDENTEC.iCore.InputTriggerEventArgs.PreviousStatusInputs">
            <summary>
            Gets the previous status of the inputs.
            </summary>
            <value>The previous status inputs.</value>
            <remarks>These values are not reported by i-PORT 3 and will always be false.</remarks>
        </member>
        <member name="P:IDENTEC.iCore.InputTriggerEventArgs.CurrentStatusInputs">
            <summary>
            Gets the current status of the inputs.
            </summary>
            <value>The current status inputs.</value>
        </member>
        <member name="P:IDENTEC.iCore.InputTriggerEventArgs.InputActivated">
            <summary>
            Gets the input that activated this event.
            </summary>
            <value>The input activated.</value>
        </member>
        <member name="P:IDENTEC.iCore.InputTriggerEventArgs.EdgeDetection">
            <summary>
            Gets the edge detection.
            </summary>
            <value>The edge detection.</value>
        </member>
        <member name="P:IDENTEC.iCore.InputTriggerEventArgs.Count">
            <summary>
            Gets the input count. Typically 4 for the i-PORT 3 and 2 for the i-HUB.
            </summary>
            <value>The input count.</value>
        </member>
        <member name="T:IDENTEC.iCore.InputTriggerEventArgs.Detection">
            <summary>
            The detection type.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.InputTriggerEventArgs.Detection.Indeterminate">
            <summary>
            The detection type could not be determined.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.InputTriggerEventArgs.Detection.RisingEdge">
            <summary>
            The detection is on a rising edge
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.InputTriggerEventArgs.Detection.FallingEdge">
            <summary>
            The detection is on a falling edge
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.InputTriggerEventArgs.Detection.NotSpecified">
            <summary>
            The detection type was not specified. For the i-CORE see the appropriate configuration keys such as <see cref="F:IDENTEC.iCore.ConfigurationKey.TrgYSlope"/>
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.StatusInputs">
            <summary>
            Represents true/false status of a each of input.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.StatusInputs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.StatusInputs"/> class.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:IDENTEC.iCore.StatusInputs.ToString">
            <summary>
            StatusInputs            
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.StatusInputs"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.StatusInputs"></see>.
            </returns>
        </member>
        <member name="P:IDENTEC.iCore.StatusInputs.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> input status with the specified input number (1 based).
            </summary>
            <value></value>
        </member>
        <member name="P:IDENTEC.iCore.StatusInputs.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:IDENTEC.iCore.iCoreHostInformation">
            <summary>
            Represents detailed host information about the device hosting the i-CORE.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreHostInformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.iCoreHostInformation"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreHostInformation.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.iCoreHostInformation"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.iCoreHostInformation"></see>.
            </returns>
        </member>
        <member name="P:IDENTEC.iCore.iCoreHostInformation.MainSoftwareVersion">
            <summary>
            Gets the main software version.
            </summary>
            <value>The main software version.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreHostInformation.SubSoftwareVersion">
            <summary>
            Gets the sub software version.
            </summary>
            <value>The sub software version.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreHostInformation.RFSystemSoftwareVersion">
            <summary>
            Gets the RF system software version.
            </summary>
            <value>The RF system software version.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreHostInformation.RfSystemHardwareVersion">
            <summary>
            Gets the RF system hardware version.
            </summary>
            <value>The rf system hardware version.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreHostInformation.SerialNumber">
            <summary>
            Gets the serial number.
            </summary>
            <value>The serial number.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreHostInformation.ProtocolVersion">
            <summary>
            Gets the protocol version.
            </summary>
            <value>The protocol version.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreHostInformation.JTagVersion">
            <summary>
            Gets the JTag version.
            </summary>
            <value>The J tag version.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreHostInformation.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreSetDigitalOutputOption">
            <summary>
            Represents the digital output options for the i-HUB or i-PORT 3
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreSetDigitalOutputOption.#ctor(IDENTEC.iCore.iCoreSetDigitalOutputOption.OutputSetting)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.iCoreSetDigitalOutputOption"/> class.
            </summary>
            <param name="setting">The setting.</param>
        </member>
        <member name="M:IDENTEC.iCore.iCoreSetDigitalOutputOption.#ctor(IDENTEC.iCore.iCoreSetDigitalOutputOption.OutputSetting,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.iCoreSetDigitalOutputOption"/> class.
            </summary>
            <param name="setting">The setting.</param>
            <param name="elapsedOn">The elapsed on time for the output.</param>
        </member>
        <member name="F:IDENTEC.iCore.iCoreSetDigitalOutputOption._setting">
            <summary>
            The output setting.
            <seealso cref="T:IDENTEC.iCore.iCoreSetDigitalOutputOption.OutputSetting"/>
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreSetDigitalOutputOption.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.iCoreSetDigitalOutputOption"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.iCoreSetDigitalOutputOption"></see>.
            </returns>
        </member>
        <member name="P:IDENTEC.iCore.iCoreSetDigitalOutputOption.Setting">
            <summary>
            Gets or sets the setting.
            </summary>
            <value>The setting.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreSetDigitalOutputOption.ElapsedTime">
            <summary>
            Gets or sets the elapsed time (up to 25.0 seconds) in 0.1 second resolution (100ms).
            </summary>
            <value>The elapsed time.</value>
            <remarks>This property is ignored unless the <see cref="F:IDENTEC.iCore.iCoreSetDigitalOutputOption.OutputSetting.ElapsedTime"/> options is used.</remarks>
        </member>
        <member name="T:IDENTEC.iCore.iCoreSetDigitalOutputOption.OutputSetting">
            <summary>
            The output settings for toggling the digital outputs
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreSetDigitalOutputOption.OutputSetting.Off">
            <summary>
            Turns the output off.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreSetDigitalOutputOption.OutputSetting.On">
            <summary>
            Turns the output on.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreSetDigitalOutputOption.OutputSetting.NoChange">
            <summary>
            The output state is unchanged.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreSetDigitalOutputOption.OutputSetting.ElapsedTime">
            <summary>
            Uses the timed option where the output remains on for the specified amount of time. This option enables the <see cref="F:IDENTEC.iCore.iCoreSetDigitalOutputOption.OutputSetting.ElapsedTime"/> property.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.ModularDeviceInformation">
            <summary>
            Represents information about the modular device on the bus.
            </summary>
            <seealso cref="M:IDENTEC.iCore.iCoreCommandChannel.GetModularDevicesInformation(IDENTEC.iCore.iCoreCommandChannel.ModularDeviceDiscoverOption)"/>
        </member>
        <member name="M:IDENTEC.iCore.ModularDeviceInformation.DeviceTypeToString(IDENTEC.iCore.ModularDeviceInformation.DeviceType)">
            <summary>
            returns a string representation of the device type
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.ModularDeviceInformation.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.ModularDeviceInformation"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.ModularDeviceInformation"></see>.
            </returns>
        </member>
        <member name="P:IDENTEC.iCore.ModularDeviceInformation.MajorFirmwareVersion">
            <summary>
            Gets the major firmware version.
            </summary>
            <value>The major firmware version.</value>
        </member>
        <member name="P:IDENTEC.iCore.ModularDeviceInformation.MinorFirmwareVersion">
            <summary>
            Gets the minor firmware version.
            </summary>
            <value>The minor firmware version.</value>
        </member>
        <member name="P:IDENTEC.iCore.ModularDeviceInformation.DeviceStatus">
            <summary>
            Gets the device status.
            </summary>
            <value>The device status.</value>
        </member>
        <member name="P:IDENTEC.iCore.ModularDeviceInformation.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:IDENTEC.iCore.ModularDeviceInformation.SerialNumber">
            <summary>
            Gets the serial number.
            </summary>
            <value>The serial number.</value>
        </member>
        <member name="P:IDENTEC.iCore.ModularDeviceInformation.PhysicalAntennaCount">
            <summary>
            Gets the physical antenna count.
            </summary>
            <value>The physical antennas.</value>
        </member>
        <member name="P:IDENTEC.iCore.ModularDeviceInformation.RegionalFrequency">
            <summary>
            Gets the regional frequency.
            </summary>
            <value>The regional frequency.</value>
        </member>
        <member name="P:IDENTEC.iCore.ModularDeviceInformation.SupportedTags">
            <summary>
            Gets the supported tags.
            </summary>
            <value>The supported tags.</value>
        </member>
        <member name="P:IDENTEC.iCore.ModularDeviceInformation.ModuleID">
            <summary>
            Gets the module ID.
            </summary>
            <value>The module ID.</value>
        </member>
        <member name="T:IDENTEC.iCore.ModularDeviceInformation.DeviceType">
            <summary>
            Specifies the device type.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.Indetermintate">
            <summary>
            The device type could not be determined.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.Unknown">
            <summary>
            The device type is unknown by the host.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iCard2">
            <summary>
            The device is an i-CARD 2 ILR Reader
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iCard3">
            <summary>
            The device is an i-CARD 3 ILR Reader
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iPort3">
            <summary>
            The device is an i-PORT 3 ILR Reader
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iPort3_Internal">
            <summary>
            The i-CORE is running on the i-PORT 3 (internal).
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iPortR2">
            <summary>
            The device is an i-PORT R2 ILR Reader
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iPortT2">
            <summary>
            The device is an i-PORT T2 ILR Reader
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iPortMP">
            <summary>
            The device is an i-PORT MP (passive) Reader
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iPortR2H">
            <summary>
            The device is an i-PORT R2 ILR Reader
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iCardR2">
            <summary>
             The device is an i-CARD R2 ILR Reader
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iPortMQ2">
            <summary>
             The device is an i-PORT MQ2 ILR Reader
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iPortMQ1">
            <summary>
             The device is an i-PORT MQ ILR Reader
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iPortMB2">
            <summary>
             The device is an i-PORT MB2 ILR Reader
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iPortMB1">
            <summary>
             The device is an i-PORT MB ILR Reader
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iPortMCB1">
            <summary>
             The device is an i-PORT MCB ILR Reader
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.DeviceType.iMark">
            <summary>
             The device is an i-MARK position marker
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.ModularDeviceInformation.Frequency">
            <summary>
            The operating frequency of the device.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.Frequency.Indetermintate">
            <summary>
            The frequency could not be determined.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.Frequency.European">
            <summary>
            European
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.Frequency.NorthAmerican">
            <summary>
            North American
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.Frequency.All">
            <summary>
            North American and European
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.ModularDeviceInformation.SupportedTagType">
            <summary>
            The types of tags the reader supports.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.SupportedTagType.Indeterminate">
            <summary>
            The tag type could not be determined.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.SupportedTagType.IQ">
            <summary>
            The reader supports i-Q tags.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.SupportedTagType.ID">
            <summary>
            The reader supports i-D tags.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.SupportedTagType.IDNA">
            <summary>
            The reader supports i-D tags.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.SupportedTagType.IB">
            <summary>
            The reader supports i-B tags.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.SupportedTagType.PassiveUHF">
            <summary>
            The reader supports passive (UHF) tags.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.ModularDeviceInformation.Status">
            <summary>
            Specifies the status of the device.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.Status.Indeterminate">
            <summary>
            The status was indeterminate.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.Status.Up">
            <summary>
            The device is up.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.Status.Down">
            <summary>
            The device is down.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ModularDeviceInformation.Status.NotAvailable">
            <summary>
            The device is unavailable.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreCommandChannel">
            <summary>
             Represents the primary communication mechanism for sending commands to the i-CORE. The command channel is also the default handler for events from the i-CORE (when even channels are not configured).
             </summary>
             <seealso cref="T:IDENTEC.iCore.iCoreEventChannel"/>
             <seealso cref="T:IDENTEC.Tags.iQTag"/>
             <seealso cref="T:IDENTEC.Tags.BeaconTags.iB2Tag"/>
             <seealso cref="T:IDENTEC.Tags.iD2Tag"/>
             <seealso cref="T:IDENTEC.iCore.iCoreDiscoverer"/>
             <seealso cref="T:IDENTEC.iCore.TagEventArgs"/>
             <seealso cref="T:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs"/>
             <seealso cref="T:IDENTEC.iCore.iCoreEventArgs"/>
             <seealso cref="N:IDENTEC.Tags.Logging"/>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.SetKeepAlive(System.Net.Sockets.Socket,System.Boolean,System.TimeSpan,System.TimeSpan)">
            <summary>
            Sets the keep alive.
            </summary>
            <param name="s">The socket.</param>
            <param name="on">if set to <c>true</c> [on].</param>
            <param name="keepAliveTimeOut">The timeout, with no activity until the first keep-alive packet is sent.</param>
            <param name="keepAlivePacketInterval">The keep alive keepAlivePacketInterval member specifies the keepAlivePacketInterval, between when successive keep-alive packets are sent if no acknowledgement is received.</param>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.SetKeepAlive(System.Net.Sockets.Socket,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Sets the keep alive.
            </summary>
            <param name="s">The s.</param>
            <param name="on">if set to <c>true</c> [on].</param>
            <param name="keepAliveTimeOut">The timeout, in milliseconds, with no activity until the first keep-alive packet is sent.</param>
            <param name="keepAliveInterval">The keep alive keepAlivePacketInterval member specifies the keepAlivePacketInterval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.</param>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.iCoreCommandChannel"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.Connect(System.String)">
            <summary>
            Connects to the i-CORE on the default TCP port of 7070.
            </summary>
            <param name="host">The host IP address</param>
            <remarks>This member outputs trace information when you enable network tracing in your application. See MSDN for details.</remarks>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.Connect(System.String,System.Int32)">
             <summary>
             Connects the specified host.
             </summary>
             <param name="host">The host.</param>
             <param name="port">The port.</param>
             <example>
             This example shows how to connect to an ILR Device running the i-CORE and allows you to work with input events.
             <code>
            class iCoreTriggerSample
            {
                static void Main(string[] args)
                {
                    Console.WriteLine("+++++++++++++++++++++++++++++++++++++++++++++");
                    Console.WriteLine("===-- i-CORE Input Trigger Test Sample --===");
                    Console.WriteLine("+++++++++++++++++++++++++++++++++++++++++++++");
            
                    //Use the discovery mechanism to see if any i-CORE applications are on the network:
                    iCoreDiscoverer d = new iCoreDiscoverer();
                    iCoreDiscoveryInformation[] discoveredList = d.DiscoveriCores();
            
                    if (0 == discoveredList.Length)
                    {
                        Console.WriteLine("An i-CORE was not found; please ensure one or more devices are running and available on the network and then try again");
                    }
                    else
                    {
                        //Display the i-CORE's that were found:
                        Console.WriteLine("There were {0} i-Cores discovered. Please select one of the following:", discoveredList.Length);
                        int i = 0;
                        foreach (iCoreDiscoveryInformation info in discoveredList)
                        {
                            Console.WriteLine("[{0}] - {1} running release {2} at {3}", ++i, info.MachineName, info.SoftwareVersion, info.NetworkInfo[0].IPAddress);
                        }
                        Console.WriteLine("[{0}] - Manually enter an IP address (e.g. i-PORT 3) ", ++i);
            
                        string ipAddress = "";
                        int nPort = 7070; //default port as factory set
                        int nIndex;
                        while (true)
                        {
                            Console.Write("\nMake your selection and then press ENTER: ");
                            try
                            {
                                nIndex = int.Parse(Console.ReadLine()) - 1;
                            }
                            catch (FormatException)
                            {
                                break;
                            }
                            if ((nIndex >= discoveredList.Length) || (0 > nIndex))
                            {
                                if (nIndex == (i - 1))
                                {
                                    Console.Write("IP Address: ");
                                    ipAddress = Console.ReadLine();
                                    break;
                                }
                                else
                                    Console.WriteLine("Invalid selection");
                            }
                            else
                            {
                                ipAddress = discoveredList[nIndex].NetworkInfo[0].IPAddress;
                                nPort = discoveredList[nIndex].DefaultCommandHandlerServerPort;
                                break;
                            }
                        }
            
                        iCoreCommandChannel myChannel = new iCoreCommandChannel();
                        Console.WriteLine("If the i-CORE has been configured properly at {0} then you will see input trigger events when they occur",
                                        ipAddress);
                        Console.WriteLine("Press ENTER at any time to exit");
                        Console.Write("Connecting to {0}... ", ipAddress);
                        try
                        {
                            myChannel.Connect(ipAddress, nPort);
                            Console.WriteLine("Success!\r\n\n");
                            myChannel.ClearAlliCoreEvents(); //clear previous events, if any
                            //In case the clock is not set properly or the sync has not been setup, set the time on the device
                            myChannel.SetCurrentTime();
            
                            myChannel.InputTriggered += new iCoreCommandChannel.iPort3InputTriggerDelegate(OnInputTriggered);
                            myChannel.InputTriggered += new iCoreCommandChannel.iHubInputTriggerDelegate(OnInputTriggered);
            
            
                            //Ensure that the i-CORE/i-HUB is configured for sending trigger events:
                            if (myChannel.Information.IsiCore)
                            {
                                //Note that the i-HUB has 2 inputs
                                myChannel.WriteConfigurationKey("Trg1Enable", "1");
                                myChannel.WriteConfigurationKey("Trg2Enable", "1");
                                myChannel.WriteConfigurationKey("TrgmEvRnInput1", "3"); //set to any                
                                myChannel.WriteConfigurationKey("TrgmEvRnInput2", "3"); //set to any
                                myChannel.CommitConfiguration();
                            }
                            else //i-PORT 3 has different keys, and 4 inputs
                            {
                                myChannel.WriteConfigurationKey("EventRnInput1", "3");
                                myChannel.WriteConfigurationKey("EventRnInput2", "3");
                                myChannel.WriteConfigurationKey("EventRnInput3", "3");
                                myChannel.WriteConfigurationKey("EventRnInput4", "3");
                                myChannel.WriteConfigurationKey("EventCntDateTime", "1");
                                myChannel.WriteConfigurationKey("EventCntIPortID", "1");
                            }
                        }
                        catch (SocketException eSocket)
                        {
                            Console.WriteLine("A network problem occured: {0}", eSocket.Message);
                        }
                        catch (FormatException format)
                        {
                            Console.WriteLine("A format error occured: {0}", format.Message);
                        }
            
                        catch (Exception ex)
                        {
                            Console.WriteLine("An unexpected error occured: {0}\r\n{1}", ex.Message, ex.StackTrace);
                        }
            
                        Console.ReadLine();
                        myChannel.Disconnect();
                        Console.WriteLine("\r\n[Exit]");
                        Console.WriteLine("Thank you for choosing IDENTEC SOLUTIONS.");
                        Thread.Sleep(1000);
                    }
                }
            
                static void OnInputTriggered(object sender, iHUBInputTriggerEventArgs e)
                {
                    //leverage the iHUBInputTriggerEventArgs' ToString() override
                    Console.WriteLine("Trigger event: {0}", e);
                }
            
                static void OnInputTriggered(object sender, InputTriggerEventArgs e)
                {
                    //leverage the InputTriggerEventArgs' ToString() override
                    Console.WriteLine("Trigger event: {0}", e);
                }
            
            }
            </code>
            <B>Output:</B>   
             <code>
            +++++++++++++++++++++++++++++++++++++++++++++
            ===-- i-CORE Input Trigger Test Sample --===
            +++++++++++++++++++++++++++++++++++++++++++++
            There were 2 i-Cores discovered. Please select one of the following:
            [1] - i-Hub running release 2.1.1exp-834 at 192.168.168.246
            [2] - i-Hub running release 2.1.1exp-862 at 192.168.168.245
            [3] - Manually enter an IP address (e.g. i-PORT 3)
            
            Make your selection and then press ENTER: 2
            If the i-CORE has been configured properly at 192.168.168.245 then you will see
            input trigger events when they occur
            Press ENTER at any time to exit
            Connecting to 192.168.168.245... Success!
             
            Trigger event: |True|False|False|False| (30/10/2007 3:07:23 PM)
            Trigger event: |False|False|False|False| (30/10/2007 3:07:26 PM)            
             </code>
            </example>
             <remarks>This member outputs trace information when you enable network tracing in your application. See MSDN for details.</remarks>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.Connect(IDENTEC.iCore.iCoreDiscoveryInformation)">
            <summary>
            Connects using the specified discovery information.
            </summary>
            <param name="discoveryInformation">The discovery information.</param>
            <remarks>This member outputs trace information when you enable network tracing in your application. See MSDN for details.</remarks>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ConnectInternal(System.String,System.Int32,System.Boolean)">
            <summary>
            Internal helper; since the command channel and event channel are essentially the same thing... 
            we can't "query" the eventchannel socket so we only open the connection and 
            process messages when the "sendCommands" parameter is false
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <param name="sendCommands">if set to <c>true</c> [send commands].</param>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.DisableSocketKeepAlive">
            <summary>
            Disables the socket keep alive option. The default is enabled.
            </summary>
            <remarks>This call can only be made after a call to <see cref="M:IDENTEC.iCore.iCoreCommandChannel.Connect(System.String)"/></remarks>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>      
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.EnableSocketKeepAlive(System.TimeSpan,System.TimeSpan)">
            <summary>
            Enables the socket keep alive option.
            </summary>
            <param name="keepAliveTimeout">The socket keep alive timeout.</param>
            <param name="keepAlivePacketInterval">The socket keep alive packet interval.</param>
            <remarks>This call can only be made after a call to <see cref="M:IDENTEC.iCore.iCoreCommandChannel.Connect(System.String)"/></remarks>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>      
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.Disconnect">
            <summary>
            Closes the underyling connection
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.StartAsyncSocketReceive">
            <summary>
            Starts the waiting for data asynchronously
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.SendExtendedTelegramRequest(IDENTEC.iCore.ExtendedAsciiProtocol.RequestFunctionCode,IDENTEC.iCore.ProtocolRecord[],System.Boolean)">
            <summary>
            Built upon the standard protocol, the framing and CRC are the same :)
            </summary>
            <param name="bRequiresResponse">True if command needs a response</param>
            <param name="functionCode"></param>
            <param name="records"></param>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.SetEnableEventChannel(System.Int32,System.Boolean)">
             <summary>
             Enables or disables the specified i-CORE Event Channel
             </summary>
             <param name="handler">The handler.</param>
             <param name="enable">if set to <c>true</c> [enable].</param>
             <remarks>When you enable an event handler, you can connect to the i-CORE using an iCoreEventChannel to capture raised events.</remarks>            
            <seealso cref="T:IDENTEC.iCore.iCoreEventChannel"/>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.GetEnableEventChannel(System.Int32)">
             <summary>
             Checks to see if the specified i-CORE event channel is enabled or not.
             </summary>
             <param name="handler">The handler.</param>
             <returns>true if enabled, false if disabled</returns>
            <seealso cref="M:IDENTEC.iCore.iCoreCommandChannel.ReadConfigurationKey(IDENTEC.iCore.ConfigurationKey)"/>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.GetModularDevicesInformation(IDENTEC.iCore.iCoreCommandChannel.ModularDeviceDiscoverOption)">
             <summary>
             Gets the modular devices information by forcing a rediscover of the bus. 
             </summary>
             <param name="option">The discovery option.</param>
             <returns>An array of <see cref="T:IDENTEC.iCore.ModularDeviceInformation"/> objects representing the devices discovered on the iBus.</returns>
             <exception cref="T:System.InvalidOperationException">
             The operation is invalid if the connection is with an i-PORT 3.
             </exception>
             <exception cref="T:System.Net.Sockets.SocketException">
             An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
             The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             The <see cref="T:System.Net.Sockets.Socket"/> is null.
             </exception>            
             <exception cref="T:System.NullReferenceException">
             The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
             </exception>              
             <example>
            This example shows how to connect to an ILR device running the i-CORE and then queries the host to report all the devices on the iBus.   
             <code>
            static void Main(string[] args)
            {
                Console.WriteLine("+++++++++++++++++++++++++++++++++++++++++++++");
                Console.WriteLine("===-- i-CORE Inventory Sample --===");
                Console.WriteLine("+++++++++++++++++++++++++++++++++++++++++++++");
            
                //Use the discovery mechanism to see if any i-CORE applications are on the network:
                iCoreDiscoverer d = new iCoreDiscoverer();
                iCoreDiscoveryInformation[] discoveredList = d.DiscoveriCores();
            
                if (0 == discoveredList.Length)
                {
                    Console.WriteLine("An i-CORE was not found; please ensure one or more devices are running and available on the network and then try again");
                }
                else
                {
                    //Display the i-CORE's that were found:
                    Console.WriteLine("There were {0} i-Cores discovered. Please select one of the following:", discoveredList.Length);
            
            
                    string ipAddress = "";
                    int nPort = 7070; //default port as factory set
                    int nIndex;
                    while (true)
                    {
                        int i = 0;
                        foreach (iCoreDiscoveryInformation info in discoveredList)
                        {
                            Console.WriteLine("[{0}] - {1} running release {2} at {3}", ++i, info.MachineName, info.SoftwareVersion, info.NetworkInfo[0].IPAddress);
                        }
                        Console.Write("\nMake your selection and then press ENTER: ");
                        try
                        {
                            nIndex = int.Parse(Console.ReadLine()) - 1;
                        }
                        catch (FormatException)
                        {
                            break;
                        }
                        if ((nIndex &gt;= discoveredList.Length) || (0 &gt; nIndex))
                        {
                            Console.WriteLine("Invalid selection");
                        }
                        else
                        {
                            ipAddress = discoveredList[nIndex].NetworkInfo[0].IPAddress;
                            nPort = discoveredList[nIndex].DefaultCommandHandlerServerPort;
                            break;
                        }
                    }
            
                    iCoreCommandChannel myCommandChannel = new iCoreCommandChannel();
            
            
                    Console.Write("Connecting to {0}... ", ipAddress);
                    try
                    {
                        myCommandChannel.Connect(ipAddress, nPort);
                        Console.WriteLine("Success!\r\n\n");
                        //In case the clock is not set properly or the sync has not been setup, set the time on the device
                        myCommandChannel.SetCurrentTime();
            
                        Console.WriteLine("Querying readers on the bus...");
                        //Make sure the modules are up:
                        ModularDeviceInformation[] devs = myCommandChannel.GetModularDevicesInformation(iCoreCommandChannel.ModularDeviceDiscoverOption.Rediscover);
            
                        Console.WriteLine("{0} devices found on the bus", devs.Length);
                        int nAntenna = 0;
                        foreach (ModularDeviceInformation dev in devs)
                        {
                            Console.Write("{0}", dev);
                            if (dev.PhysicalAntennaCount &gt; 0)
                            {
                                StringBuilder sb = new StringBuilder();
                                for (int j = 0; dev.PhysicalAntennaCount &gt; j ; j++)
                                {
                                    sb.Append(string.Format("  Ant:  {0}", ++nAntenna));
                                }
                                Console.WriteLine(sb.ToString());
                            }
                        }
                        myCommandChannel.Disconnect();
            
                    }
                    catch (SocketException eSocket)
                    {
                        Console.WriteLine("A network problem occured: {0}", eSocket.Message);
                    }
                    catch (FormatException format)
                    {
                        Console.WriteLine("A format error occured: {0}", format.Message);
                    }
            
                    catch (Exception ex)
                    {
                        Console.WriteLine("An unexpected error occured: {0}\r\n{1}", ex.Message, ex.StackTrace);
                    }
            
                    Console.WriteLine("Press ENTER to end");
                    Console.ReadLine();
                    Console.WriteLine("Thank you for choosing IDENTEC SOLUTIONS.");
                    Thread.Sleep(1000);
                }
            }
             </code>
             <B>Output:</B>
             <code>
            +++++++++++++++++++++++++++++++++++++++++++++
            ===-- i-CORE Display Modular Devices Sample --===
            +++++++++++++++++++++++++++++++++++++++++++++
            There were 2 i-Cores discovered. Please select one of the following:
            [1] - i-Hub running release 2.1.1exp-870 at 192.168.168.245
            [2] - i-PORT4 running release 2.1.1exp-870 at 192.168.168.246
            [3] - Manually enter an IP address
            
            Make your selection and then press ENTER: 2
            If the i-CORE has been configured properly at 192.168.168.246 then you will see
            input trigger events when they occur
            Press ENTER at any time to exit
            Connecting to 192.168.168.246... Success!
            
            
             3 devices found on the bus
            Module 1: i-PORT MCB1 [Up] Firmware 0.9 Serial#: 0070420242  Ant:  1
            Module 2: i-PORT R2 [NotAvailable] Firmware 0.8 Serial#: 0706001284  Ant:  2
            Module 3: i-PORT MB2 [Up] Firmware 0.6 Serial#: 0071610370  Ant:  3  Ant:  4
            
            Press ENTER to exit the program
            Thank you for choosing IDENTEC SOLUTIONS.
            </code>
            </example>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ClearAlliCoreEvents">
            <summary>
            Clears the all the events in the i-CORE.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.SetDigitalOutputs(IDENTEC.iCore.iCoreSetDigitalOutputOption,IDENTEC.iCore.iCoreSetDigitalOutputOption)">
            <summary>
            Sets the digital outputs.
            </summary>
            <param name="relay1">The relay1.</param>
            <param name="relay2">The relay2.</param>
            <remarks>This command is compatible with both i-PORT 3 and the i-HUB, but it is geared towards the i-HUB with two outputs.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.SetDigitalOutputs(IDENTEC.iCore.iCoreSetDigitalOutputOption,IDENTEC.iCore.iCoreSetDigitalOutputOption,IDENTEC.iCore.iCoreSetDigitalOutputOption,IDENTEC.iCore.iCoreSetDigitalOutputOption)">
            <summary>
            Sets the outputs on the device.
            </summary>
            <param name="relay1">The options for output relay 1.</param>
            <param name="relay2">The options for output relay 2.</param>
            <param name="relay3">The options for output relay 3.</param>
            <param name="relay4">The options for output relay 4.</param>
            <remarks>This command is compatible with both the i-PORT 3 and the i-CORE.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.LockConfiguration(System.String)">
            <summary>
            Locks the configuration.
            </summary>
            <param name="password">The password, 255 characters maximum.</param>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The password is too long.
            </exception>            
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.UnLockConfiguration(System.String)">
            <summary>
            Unlocks the configuration.
            </summary>
            <param name="password">The password, 255 characters maximum.</param>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.GetXMLConfiguration(System.IO.FileStream)">
            <summary>
            Save in file the configuration file (icore.xml) that the i-CORE is using since boot or since the last call to <see cref="M:IDENTEC.iCore.iCoreCommandChannel.CommitConfiguration"/>
            </summary>
            <remarks>If you update the configuration of the i-CORE, you will not see those updates in the xml configuration untill a call to <see cref="M:IDENTEC.iCore.iCoreCommandChannel.CommitConfiguration"/> is made. </remarks>
            <seealso cref="M:IDENTEC.iCore.iCoreCommandChannel.PutXMLConfiguration(System.IO.FileStream)"/>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <seealso cref="M:IDENTEC.iCore.iCoreCommandChannel.CommitConfiguration"/>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.PutXMLConfiguration(System.IO.FileStream)">
            <summary>
            Pushes the xml configuration file to the i-CORE. You must call <see cref="M:IDENTEC.iCore.iCoreCommandChannel.LoadConfiguration"/> immediately following so that the i-CORE loads the xml configuration.            
            </summary>     
            <param name="file">Filstream object to send to icore</param>
            <seealso cref="M:IDENTEC.iCore.iCoreCommandChannel.LoadConfiguration"/>
            <seealso cref="M:IDENTEC.iCore.iCoreCommandChannel.CommitConfiguration"/>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ReadConfigurationKey(System.String)">
            <summary>
            Reads the configuration key.
            </summary>
            <param name="key">Name of the key.</param>
            <returns>The value of the key.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The key is too long (more than 16 characters in length).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified key does not exist.
            </exception>
            <remarks><I>This method is also compatible with i-PORT 3.</I></remarks>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.WriteConfigurationKey(System.String,System.String)">
            <summary>
            Writes the configuration key.
            </summary>
            <param name="key">Name of the key.</param>
            <param name="value">The key value.</param>
            <exception cref="T:System.InvalidOperationException">The key specified does not exist.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The key is too long (more than 16 characters in length).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified key does not exist.
            </exception>
            <remarks><I>This method is also compatible with i-PORT 3.</I></remarks>            
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.WriteConfigurationKey(IDENTEC.iCore.ConfigurationKey,System.Int32)">
            <summary>
            Writes the configuration key.
            </summary>
            <param name="key">Name of the key.</param>
            <param name="value">The key value.</param>
            <exception cref="T:System.InvalidOperationException">The key specified does not exist.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The key is too long (more than 16 characters in length).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified key does not exist.
            </exception>            
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.WriteConfigurationKey(IDENTEC.iCore.ConfigurationKey,System.TimeSpan)">
            <summary>
            Writes the configuration key.
            </summary>
            <param name="key">Name of the key.</param>
            <param name="value">The key value.</param>
            <exception cref="T:System.InvalidOperationException">The key specified does not exist.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The key is too long (more than 16 characters in length).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified key does not exist.
            </exception>
            <remarks><I>This method is also compatible with i-PORT 3.</I></remarks>    
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.WriteConfigurationKey(IDENTEC.iCore.ConfigurationKey,System.Boolean)">
            <summary>
            Writes the configuration key.
            </summary>
            <param name="key">Name of the key.</param>
            <param name="enable">Set to true to enable the parameter, false to disable.</param>
            <exception cref="T:System.InvalidOperationException">The key specified does not exist.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The key is too long (more than 16 characters in length).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified key does not exist.
            </exception>
            <remarks><I>Care must be taken not to call use a key that does not allow the boolean type.</I></remarks>    
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.WriteConfigurationKey(IDENTEC.iCore.ConfigurationKey,System.String)">
            <summary>
            Writes the configuration key.
            </summary>
            <param name="key">Name of the key.</param>
            <param name="value">The key value.</param>
            <exception cref="T:System.InvalidOperationException">The key specified does not exist.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The key is too long (more than 16 characters in length).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified key does not exist.
            </exception>            
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.WriteConfigurationKey(IDENTEC.iCore.ConfigurationKey,System.Int32,System.Boolean)">
            <summary>
            Writes the configuration key.
            </summary>
            <param name="key">Name of the key.</param>
            <param name="itemNumber">The item number.</param>
            <param name="enable">The key value.</param>
            <exception cref="T:System.InvalidOperationException">The key specified does not exist.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The key is too long (more than 16 characters in length).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified key does not exist.
            </exception>        
            <remarks>The 'Y' in the <see cref="T:IDENTEC.iCore.ConfigurationKey"/> is replaced with the specified item number. For example <see cref="F:IDENTEC.iCore.ConfigurationKey.AntYEnable"/> with item number 1 and <I>enable</I> set to true would enable antenna 1.</remarks>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.WriteConfigurationKey(IDENTEC.iCore.ConfigurationKey,System.Int32,System.Int32)">
            <summary>
            Writes the configuration key.
            </summary>
            <param name="key">Name of the key.</param>
            <param name="itemNumber">The item number.</param>
            <param name="value">The key value.</param>
            <exception cref="T:System.InvalidOperationException">The key specified does not exist.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The key is too long (more than 16 characters in length).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified key does not exist.
            </exception>        
            <remarks>The 'Y' in the <see cref="T:IDENTEC.iCore.ConfigurationKey"/> is replaced with the specified item number. For example <see cref="F:IDENTEC.iCore.ConfigurationKey.AreaYReadRetries"/> with item number 1 and <I>value</I> set to 2 would set area 1 to retry tag reads 2 times.</remarks>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.WriteConfigurationKey(IDENTEC.iCore.ConfigurationKey,System.Int32,System.TimeSpan)">
            <summary>
            Writes the configuration key.
            </summary>
            <param name="key">Name of the key.</param>
            <param name="itemNumber">The item number.</param>
            <param name="value">The key value.</param>
            <exception cref="T:System.InvalidOperationException">The key specified does not exist.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The key is too long (more than 16 characters in length).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified key does not exist.
            </exception>        
            <remarks>The 'Y' in the <see cref="T:IDENTEC.iCore.ConfigurationKey"/> is replaced with the specified item number. For example <see cref="F:IDENTEC.iCore.ConfigurationKey.AreaYScanPause"/> with item number 1 and <I>value</I> set to one minute would set area 1 to scan for tags once per minute.</remarks>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.WriteConfigurationKey(IDENTEC.iCore.ConfigurationKey,System.Int32,System.String)">
            <summary>
            Writes the configuration key.
            </summary>
            <param name="key">Name of the key.</param>
            <param name="itemNumber">The item number.</param>
            <param name="value">The key value.</param>
            <exception cref="T:System.InvalidOperationException">The key specified does not exist.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The key is too long (more than 16 characters in length).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified key does not exist.
            </exception>        
            <remarks>The 'Y' in the <see cref="T:IDENTEC.iCore.ConfigurationKey"/> is replaced with the specified item number. For example <see cref="F:IDENTEC.iCore.ConfigurationKey.AntYName"/> with item number 1 and <I>value</I> set to 'Test' would name antnena 1 as 'Test'.</remarks>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ReadConfigurationKey(IDENTEC.iCore.ConfigurationKey)">
            <summary>
            Reads the configuration key.
            </summary>
            <param name="key">Name of the key.</param>
            <returns>The value of the key.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The key is too long (more than 16 characters in length).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified key does not exist.
            </exception>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ReadConfigurationKey(IDENTEC.iCore.ConfigurationKey,System.Int32)">
            <summary>
            Reads the configuration key.
            </summary>
            <param name="key">Name of the key.</param>
            <param name="itemNumber">The item number.</param>
            <remarks>The 'Y' in the <see cref="T:IDENTEC.iCore.ConfigurationKey"/> is replaced with the specified item number. For example <see cref="F:IDENTEC.iCore.ConfigurationKey.AntYName"/> with item number 1 would return the name of antenna 1.</remarks>
            <returns>The value of the key.</returns>            
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The key is too long (more than 16 characters in length).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified key does not exist.
            </exception>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.CommitConfiguration">
            <summary>
            Commits the configuration.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
            <remarks><I>This method is also compatible with i-PORT 3.</I></remarks>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.LoadConfiguration">
            <summary>
            Loads the xml configuration; typically used immediately following the call to <seealso cref="M:IDENTEC.iCore.iCoreCommandChannel.PutXMLConfiguration(System.IO.FileStream)"/>
            </summary>
            <seealso cref="M:IDENTEC.iCore.iCoreCommandChannel.PutXMLConfiguration(System.IO.FileStream)"/>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.LoadDefaultConfiguration">
            <summary>
            Loads the default configuration.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.GetInformation">
            <summary>
            This is the first call we do upon connection
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.TestConnection">
            <summary>
            Tests the connection to see if it is valid. This is useful for long running applications that require a constant connection to the i-CORE and wish to periodically test the connection.
            </summary>
            <remarks>A quick call is made to the i-CORE for it's version information; if the underlying connection is broken an exception will be thrown.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>            
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.GetCurrentTime">
            <summary>
            Gets the current <see cref="T:System.DateTime"/> on the host running the i-CORE. 
            </summary>
            <remarks><I>This method is also compatible with i-PORT 3.</I></remarks>
            <returns>The local DateTime as reported by the host running the i-CORE.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>            
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.SetCurrentTime">
            <summary>
            Sets the current time on the host running the i-CORE (typically the i-HUB) according to the system clock on the host running your application.
            </summary>
            <remarks>The i-HUB stores it's time in UTC/GTM format. <I>This method is also compatible with i-PORT 3.</I></remarks>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>            
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.SetCurrentTime(System.DateTime)">
            <summary>
            Sets the current time on the host running the i-CORE (typically the i-HUB) according to the system clock on the host running your application.
            </summary>
            <param name="newtime">The new time to set.</param>
            <remarks>The i-HUB stores it's time in UTC/GTM format. <I>This method is also compatible with i-PORT 3.</I></remarks>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>            
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.Reset">
            <summary>
            Resets the i-CORE application; this does not perform a system reset on the device.
            </summary>
            <remarks>The connection will be broken and a call to <see cref="M:IDENTEC.iCore.iCoreCommandChannel.Disconnect"/> will be made internally. <I>This method is also compatible with i-PORT 3.</I></remarks>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.InventoryTags">
            <summary>
            Inventories the tags on the readers attached to the i-CORE using all the antennas with no repeats.
            </summary>
            <returns>A <see cref="T:IDENTEC.Tags.TagCollection"/> containing the tags reported</returns>
            <exception cref="T:System.InvalidOperationException">
            The operation is invalid if the connection is with an i-PORT 3.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.InventoryTags(System.Int32)">
            <summary>
            Inventories the tags on the readers attached to the i-CORE using the specified antenna with no repeats.
            </summary>
            <param name="antenna">The antenna.</param>            
            <returns>A <see cref="T:IDENTEC.Tags.TagCollection"/> containing the tags reported</returns>
            <exception cref="T:System.InvalidOperationException">
            The operation is invalid if the connection is with an i-PORT 3.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.InventoryTags(System.Int32,System.Int32)">
            <summary>
            Inventories the tags on the readers attached to the i-CORE.
            </summary>
            <param name="antenna">The antenna.</param>
            <param name="repeats">The repeats.</param>
            <returns>A <see cref="T:IDENTEC.Tags.TagCollection"/> containing the tags reported</returns>
            <exception cref="T:System.InvalidOperationException">
            The operation is invalid if the connection is with an i-PORT 3.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.WriteTagData(IDENTEC.Tags.ResponseTag,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the tag data.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="data">The data.</param>
            <param name="dataLength">Length of the data.</param>
            <param name="address">The address.</param>
            <remarks>The i-CORE will only allow writing to address 256 (0x100) and higher.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.WriteTagData(IDENTEC.Tags.ResponseTag,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the tag data.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="data">The data.</param>
            <param name="dataLength">Length of the data.</param>
            <param name="address">The address.</param>
            <param name="antenna">The antenna.</param>
            <remarks>The i-CORE will only allow writing to address 256 (0x100) and higher.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.WriteTagData(IDENTEC.Tags.ResponseTag,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the tag data.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="data">The data.</param>
            <param name="dataLength">Length of the data.</param>
            <param name="address">The address.</param>
            <param name="antenna">The antenna.</param>
            <param name="repeats">The repeats.</param>
            <remarks>The i-CORE will only allow writing to address 256 (0x100) and higher.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ReadTagData(IDENTEC.Tags.ResponseTag,System.Int32,System.Int32)">
            <summary>
            Reads the tag data.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="dataLength">Length of the data.</param>
            <param name="address">The address.</param>
            <returns>The data as read from the tag.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ReadTagData(IDENTEC.Tags.ResponseTag,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the tag data.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="dataLength">Length of the data.</param>
            <param name="address">The address.</param>
            <param name="antenna">The antenna.</param>
            <returns>The data as read from the tag.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ReadTagData(IDENTEC.Tags.ResponseTag,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the tag data.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="dataLength">Length of the data.</param>
            <param name="address">The address.</param>
            <param name="antenna">The antenna.</param>
            <param name="repeats">The repeats.</param>
            <returns>The data as read from the tag.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ScanForTags">
            <summary>
            Scans for tags on all enabled antennas with no repeats.
            </summary>
            <remarks>This command is best used with i-PORT 3. For the i-CORE, use <see cref="M:IDENTEC.iCore.iCoreCommandChannel.InventoryTags"/>.</remarks>
            <returns>A new <see cref="T:IDENTEC.Tags.TagCollection"/> object containing the tags.</returns>
            <seealso cref="M:IDENTEC.iCore.iCoreCommandChannel.InventoryTags"/>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ScanForTags(System.Int32)">
            <summary>
            Scans for tags on the specified antenna with no repeats.
            </summary>
            <remarks>This command is best used with i-PORT 3. For the i-CORE, use <see cref="M:IDENTEC.iCore.iCoreCommandChannel.InventoryTags"/>.</remarks>
            <param name="antenna">The specified antenna; 0 for all enabled antennas</param>            
            <returns>A new <see cref="T:IDENTEC.Tags.TagCollection"/> object containing the tags.</returns>
            <seealso cref="M:IDENTEC.iCore.iCoreCommandChannel.InventoryTags"/>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ScanForTags(System.Int32,System.Int32)">
            <summary>
            Scans for tags on the specified antenna with the specified number of repeats.
            </summary>
            <remarks>This command is best used with i-PORT 3. For the i-CORE, use <see cref="M:IDENTEC.iCore.iCoreCommandChannel.InventoryTags"/>.</remarks>
            <param name="antenna">The specified antenna; 0 for all enabled antennas</param>            
            <param name="repeats">The repeats.</param>
            <returns>A new <see cref="T:IDENTEC.Tags.TagCollection"/> object containing the tags.</returns>
            <seealso cref="M:IDENTEC.iCore.iCoreCommandChannel.InventoryTags"/>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
            <remarks>Depending on the configuration, you may have to set the timeout to be longer than the default for the operation to complete successfully.</remarks>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.SleepTag(IDENTEC.Tags.iQTag,System.TimeSpan)">
            <summary>
            Sleeps the specified tag.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="duration">The duration.</param>            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The duration is more than 255 seconds.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.SleepTag(IDENTEC.Tags.iQTag,System.TimeSpan,System.Int32)">
            <summary>
            Sleeps the specified tag.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="duration">The duration.</param>
            <param name="antenna">The antenna.</param>            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The duration is more than 255 seconds.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.SleepTag(IDENTEC.Tags.iQTag,System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Sleeps the specified tag.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="duration">The duration.</param>
            <param name="antenna">The antenna.</param>
            <param name="retries">The retries.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The duration is more than 255 seconds.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.PingTag(IDENTEC.Tags.iQTag)">
            <summary>
            Pings the specified tag to for validation of communications.
            </summary>
            <param name="tag">The specified tag.</param>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.PingTag(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Pings the specified tag to for validation of communications.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="antenna">The antenna.</param>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.PingTag(IDENTEC.Tags.iQTag,System.Int32,System.Int32)">
            <summary>
            Pings the specified tag to for validation of communications.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="antenna">The antenna.</param>
            <param name="retries">The retries.</param>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.MultiBlinkTag(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Instructs the tag to blink the specified number of times up to 255 maximum.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="blinks">The number of blinks to perform.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of blinks is greater than 255.           
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.MultiBlinkTag(IDENTEC.Tags.iQTag,System.Int32,System.Int32)">
            <summary>
            Instructs the tag to blink the specified number of times up to 255 maximum.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="blinks">The number of blinks to perform.</param>
            <param name="antenna">The antenna.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of blinks is greater than 255.           
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.MultiBlinkTag(IDENTEC.Tags.iQTag,System.Int32,System.Int32,System.Int32)">
            <summary>
            Instructs the tag to blink the specified number of times up to 255 maximum.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="blinks">The number of blinks to perform.</param>
            <param name="antenna">The antenna.</param>
            <param name="retries">The retries.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of blinks is greater than 255.           
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of blinks is greater than 255.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the tag temperature log.
             </summary>
             <param name="tag">The specified tag.</param>
             <returns>Returns a new <see cref="T:IDENTEC.Tags.Logging.TemperatureLogData"/> object containing the relevant information as read from the tag.</returns>
             <remarks>A temperature log can be read from a tag as long as the tag is capable and regardless of logging state (on or off).</remarks>
             <exception cref="T:System.Net.Sockets.SocketException">
             An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
             The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             The <see cref="T:System.Net.Sockets.Socket"/> is null.
             </exception>            
             <exception cref="T:System.NullReferenceException">
             The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
             </exception>  
             <example>
             This example shows how to connect to an ILR Device running the i-CORE controller and allows you to work with iQ tag temperature logging. You must have at least an i-HUB, an MQ reader and an iQ "T" tag.
             <code>
             class iCoreTemperatureLogSample
            {
                public enum MenuOption : int
                {
                    StartLogging = 1,
                    StopLogging,
                    ReadLog,
                    Exit
                }
                static void Main(string[] args)
                {
                    Console.WriteLine("+++++++++++++++++++++++++++++++++++++++++++++");
                    Console.WriteLine("===-- i-CORE Temperature Logging Sample --===");
                    Console.WriteLine("+++++++++++++++++++++++++++++++++++++++++++++");
            
                    //Use the discovery mechanism to see if any i-CORE applications are on the network:
                    iCoreDiscoverer d = new iCoreDiscoverer();
                    iCoreDiscoveryInformation[] discoveredList = d.DiscoveriCores();
            
                    Console.WriteLine("There were {0} i-CORE instances discovered on the network:", discoveredList.Length);
                    Console.WriteLine("");
            
                    if (0 == discoveredList.Length)
                    {
                        Console.WriteLine("An i-CORE was not found; please ensure one or more devices are running and available on the network and then try again");
                    }
                    else
                    {
                        //Display the i-CORE's that were found:
                        Console.WriteLine("There were {0} i-Cores discovered. Please select an i-CORE to connect to:", discoveredList.Length);
                        int i = 0;
                        foreach (iCoreDiscoveryInformation info in discoveredList)
                        {
                            Console.WriteLine("[{0}] - {1} running release {2} at {3}", ++i, info.MachineName, info.SoftwareVersion, info.NetworkInfo[0].IPAddress);
            
                        }
            
                        int nIndex;
                        while (true)
                        {
                            Console.Write("\nMake your selection and then press ENTER: ");
                            nIndex = int.Parse(Console.ReadLine()) - 1;
                            if ((nIndex &gt;= discoveredList.Length) || (0 &gt; nIndex))
                            {
                                Console.WriteLine("Invalid selection");
                            }
                            else
                            {
                                break;
                            }
                        }
            
                        iCoreCommandChannel myChannel = new iCoreCommandChannel();
                        Console.WriteLine("Connecting to {0}...", discoveredList[nIndex].NetworkInfo[0].IPAddress);
                        myChannel.Connect(discoveredList[nIndex].NetworkInfo[0].IPAddress, discoveredList[nIndex].DefaultCommandHandlerServerPort);
            
                        //In case the clock is not set properly or the sync has not been setup:
                        myChannel.SetCurrentTime();               
            
                        //Set the log level to max so we can log on via telnet on port 7090:
                        myChannel.WriteConfigurationKey(ConfigurationKey.LogLevel, 7);
            
                        //Enable Module 1 (be sure that it is an MQ)                
            
                        myChannel.WriteConfigurationKey(ConfigurationKey.ModYEnable, 1, true);
                        myChannel.WriteConfigurationKey(ConfigurationKey.ModYName, 1, "Test mod");
                        myChannel.WriteConfigurationKey(ConfigurationKey.AntYEnable, 1, true);
                        myChannel.WriteConfigurationKey(ConfigurationKey.AntYHighSens, 1, true);
                        myChannel.WriteConfigurationKey(ConfigurationKey.AntYModID, 1, true);
                        //set the power level of antenna 1 to be max:
                        myChannel.WriteConfigurationKey(ConfigurationKey.AntYTxPowerQ, 1, true);
                        myChannel.WriteConfigurationKey(ConfigurationKey.AntYSlotSelect, 1, 8);
                        myChannel.WriteConfigurationKey(ConfigurationKey.AntYHighSens, 1, true);
            
                        //We'll turn off the autoscan feature:
                        myChannel.WriteConfigurationKey(ConfigurationKey.AreaYEnable, 1, false);
                        myChannel.WriteConfigurationKey(ConfigurationKey.AntYAreaID, 1, false);
                        myChannel.WriteConfigurationKey(ConfigurationKey.AntYAreaID, 2, false);
            
                        ModularDeviceInformation [] devs = myChannel.GetModularDevicesInformation(iCoreCommandChannel.ModularDeviceDiscoverOption.Rediscover);
            
                        bool bExit = false;
                        Console.Write("Type in the serial number of your tag and then press ENTER: ");
                        //for example: 200117021 or 200.117.021 or 0.200.117.021
                        string s = "";
            
                        try
                        {
                            s = Console.ReadLine();
                        }
                        catch (FormatException)
                        {
            
                        }
            
                        if (!string.IsNullOrEmpty(s))
                        {
                            iQTag myTag = new iQTag();
                            myTag.Label = s;
            
                            MenuOption option = MenuOption.Exit;                    
                            while (true)
                            {
                                if (bExit)
                                    break;
            
                                DisplayTagLogMenu();
                                string sOption = Console.ReadLine();
                                if (string.IsNullOrEmpty(sOption))
                                {
                                    Console.WriteLine("Invalid option.");
                                    continue;
                                }
                                else
                                {
                                    try
                                    {
                                        option = (MenuOption) ((int.Parse(sOption)));
                                    }
                                    catch (FormatException)
                                    {
                                        Console.WriteLine("Invalid input.");
                                        continue;
                                    }
            
                                    try
                                    {
                                        switch (option)
                                        {
                                            case MenuOption.StartLogging:
                                                {
                                                    myChannel.StartTagTemperatureLog(myTag, new TimeSpan(0, 1, 0),1);
                                                    Console.WriteLine("\r\n\nSuccess!");
                                                }
                                                break;
            
                                            case MenuOption.StopLogging:
                                                {
                                                    myChannel.StopTagTemperatureLog(myTag, 1);
                                                    Console.WriteLine("\r\n\nSuccess!");
                                                }
                                                break;
            
                                            case MenuOption.ReadLog:
                                                {
                                                    Console.Write("Reading log. This may take a moment...");
                                                    IDENTEC.Tags.Logging.TemperatureLogData tLog =
                                                        myChannel.ReadTagTemperatureLog(myTag, 0, 1);
                                                    Console.WriteLine("done!");
                                                    //note: if the log is large it will take several screens:
                                                    Console.WriteLine("Log started at {0} and contains {1} samples:", tLog.Start, tLog.SampleCount);
                                                    foreach (IDENTEC.Tags.Logging.TemperatureLogSample sample in tLog.Samples)
                                                    {
                                                        Console.WriteLine(sample);
                                                    }
            
                                                }
                                                break;
            
                                            default:
                                            case MenuOption.Exit:
                                                bExit = true;
                                                break;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        Console.WriteLine("\r\n\nAn error occured: {0}", ex.Message);                                
                                    }
            
                                }
                            }
                        }
            
                        Console.WriteLine("Press ENTER to exit");
                        Console.ReadLine();
                        Console.WriteLine("Thank you for choosing IDENTEC SOLUTIONS");
                        Thread.Sleep(1000);
                    }
                }
            
                private static void DisplayTagLogMenu()
                {
                    Console.WriteLine("\r\nMake one of the following selections and then press ENTER:");
                    Console.WriteLine("[1] - Start/Restart Tag Logging");
                    Console.WriteLine("[2] - Stop Tag Logging");
                    Console.WriteLine("[3] - Read Log");
                    Console.WriteLine("[4] - Exit");
                    Console.Write("Your choice is: ");
                }
            }
             </code>
             </example>
             <B>Output</B>
             <code>             
            +++++++++++++++++++++++++++++++++++++++++++++
            ===-- i-CORE Temperature Logging Sample --===
            +++++++++++++++++++++++++++++++++++++++++++++
            There were 2 i-CORE instances discovered on the network:
            
            There were 2 i-Cores discovered. Please select an i-CORE to connect to:
            [1] - i-PORT4 running release 2.1.1exp-870 at 192.168.168.246
            [2] - i-Hub running release 2.1.1exp-870 at 192.168.168.40
            
            Make your selection and then press ENTER: 2
            Connecting to 192.168.168.40...
            Type in the serial number of your tag and then press ENTER: 200.117.021
            
            Make one of the following selections and then press ENTER:
            [1] - Start/Restart Tag Logging
            [2] - Stop Tag Logging
            [3] - Read Log
            [4] - Exit
            Your choice is: 3
            Reading log. This may take a moment...done!
            Log started at 07/11/2007 1:57:54 PM and contains 3 samples:
            23.5°C (07/11/2007 1:57:54 PM)
            23.2°C (07/11/2007 1:58:54 PM)
            23.2°C (07/11/2007 1:59:54 PM)
            
            Make one of the following selections and then press ENTER:
            [1] - Start/Restart Tag Logging
            [2] - Stop Tag Logging
            [3] - Read Log
            [4] - Exit
            Your choice is: 4
            Press ENTER to exit
            Thank you for choosing IDENTEC SOLUTIONS
            </code>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ReadTagTemperatureLog(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Reads the tag temperature log.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="lastNSamples">The last N samples of the log data.</param>
            <returns>Returns a new <see cref="T:IDENTEC.Tags.Logging.TemperatureLogData"/> object containing the relevant information as read from the tag.</returns>
            <remarks>A temperature log can be read from a tag as long as the tag is capable and regardless of logging state (on or off).</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ReadTagTemperatureLog(IDENTEC.Tags.iQTag,System.Int32,System.Int32)">
            <summary>
            Reads the tag temperature log.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="lastNSamples">The last N samples; 0 for all.</param>
            <param name="antenna">The antenna.</param>
            <returns>Returns a new <see cref="T:IDENTEC.Tags.Logging.TemperatureLogData"/> object containing the relevant information as read from the tag.</returns>
            <remarks>A temperature log can be read from a tag as long as the tag is capable and regardless of logging state (on or off).</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.ReadTagTemperatureLog(IDENTEC.Tags.iQTag,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the tag temperature log.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="lastNSamples">The last N samples; 0 for all.</param>
            <param name="antenna">The antenna; 0 for auto-select.</param>
            <param name="retries">The retries; 0 for none.</param>
            <returns>Returns a new <see cref="T:IDENTEC.Tags.Logging.TemperatureLogData"/> object containing the relevant information as read from the tag.</returns>
            <remarks>A temperature log can be read from a tag as long as the tag is capable and regardless of logging state (on or off).</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.StartTagTemperatureLog(IDENTEC.Tags.iQTag,System.TimeSpan)">
            <summary>
            Starts the tag temperature log.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="loggingInterval">The logging interval.</param>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.StartTagTemperatureLog(IDENTEC.Tags.iQTag,System.TimeSpan,System.Int32)">
            <summary>
            Starts the tag temperature log.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="loggingInterval">The logging interval.</param>
            <param name="antenna">The antenna.</param>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.StartTagTemperatureLog(IDENTEC.Tags.iQTag,System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Starts the tag temperature log.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="loggingInterval">The logging interval.</param>
            <param name="antenna">The antenna.</param>
            <param name="retries">The retries.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The logging interval is larger than 65535 seconds.           
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.StopTagTemperatureLog(IDENTEC.Tags.iQTag)">
            <summary>
            Stops the tag temperature log.
            </summary>
            <param name="tag">The specified tag.</param>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.StopTagTemperatureLog(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Stops the tag temperature log.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="antenna">The antenna.</param>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.StopTagTemperatureLog(IDENTEC.Tags.iQTag,System.Int32,System.Int32)">
            <summary>
            Stops the tag temperature log.
            </summary>
            <param name="tag">The specified tag.</param>
            <param name="antenna">The antenna.</param>
            <param name="retries">The retries.</param>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>  
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.SendCustomCommand(System.String)">
            <summary>
            Sends a custom command message to the i-CORE and waits for a response.
            </summary>
            <param name="command">The custom command message to send to the i-CORE.</param>
            <returns>The resulting message from the i-CORE as as string.</returns>
            <remarks>You do not have to add the start deliminter ('#'), CRC, or end delimiter ('\r') to your message.
            For example to send the "GetVersion" command simply pass the string "05" to this method. When the i-CORE responds,
            the message is parsed and the CRC is checked for validity.<B>This method is provided 'as is' for use with i-CORE capabilities that were not available at the time that this library was built.</B></remarks> 
            <exception cref="T:System.ArgumentNullException">
            <I>command</I> is null
            </exception>
            <exception cref="T:System.ArgumentException">
            <I>command</I> does not contain a command code number
            </exception>
            <exception cref="T:System.FormatException">
            <I>command</I> is not in a format compliant with style
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.Net.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null.
            </exception>            
            <exception cref="T:System.NullReferenceException">
            The <see cref="T:System.Net.Sockets.Socket"/> is null (a call to connect has not taken place).
            </exception>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.iCoreDiagnosticEventThreadProc(System.Object)">
            <summary>
            This thread runs in a thread pool and simply creates the appropriate diagnostic event and fires it off before exiting quickly
            </summary>
            <param name="stateInfo"></param>
        </member>
        <member name="M:IDENTEC.iCore.iCoreCommandChannel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:IDENTEC.iCore.iCoreCommandChannel.Disconnected">
            <summary>
            Raised when the TCP connection is disconnected unexpectantly
            </summary>
            <remarks>This event may be raised during normal calls to <see>Disconnect</see></remarks>
        </member>
        <member name="E:IDENTEC.iCore.iCoreCommandChannel.HeartBeat">
            <summary>
            Raised when the i-CORE sends a Heartbeat diagnostics message. 
            </summary>
            <remarks>The method the delegate executes runs in a ThreadPool's worker thread and therefore may not be thread safe.</remarks>
        </member>
        <member name="E:IDENTEC.iCore.iCoreCommandChannel.ModularDeviceStatusChanged">
            <summary>
            Raised when a module state changes
            </summary>
        </member>
        <member name="E:IDENTEC.iCore.iCoreCommandChannel.TagEvent">
            <summary>
            Raised when a tag event is reported by the i-CORE.
            </summary>
            <remarks>The i-CORE will queue up tag events automatically. These events are only acknowledged if your code subscribes to this event. If this event remains null then acknowledgements are not sent to the i-CORE.</remarks>
        </member>
        <member name="E:IDENTEC.iCore.iCoreCommandChannel.InputTriggered">
             <summary>
             Raised when the input is on the i-CORE's host is triggered. The i-HUB has 2 inputs and i-PORT 3 has 4 inputs.            
             </summary>
             <remarks>The i-CORE/i-HUB may also sends trigger events in this style when configured to do so.</remarks>
             <example>
             This example shows how to connect to an ILR Device running the i-CORE and allows you to work with input events.            
             <code>
            class iCoreTriggerSample
            {
                static void Main(string[] args)
                {
                    Console.WriteLine("+++++++++++++++++++++++++++++++++++++++++++++");
                    Console.WriteLine("===-- i-CORE Input Trigger Test Sample --===");
                    Console.WriteLine("+++++++++++++++++++++++++++++++++++++++++++++");
            
                    //Use the discovery mechanism to see if any i-CORE applications are on the network:
                    iCoreDiscoverer d = new iCoreDiscoverer();
                    iCoreDiscoveryInformation[] discoveredList = d.DiscoveriCores();
            
                    if (0 == discoveredList.Length)
                    {
                        Console.WriteLine("An i-CORE was not found; please ensure one or more devices are running and available on the network and then try again");
                    }
                    else
                    {
                        //Display the i-CORE's that were found:
                        Console.WriteLine("There were {0} i-Cores discovered. Please select one of the following:", discoveredList.Length);
                        int i = 0;
                        foreach (iCoreDiscoveryInformation info in discoveredList)
                        {
                            Console.WriteLine("[{0}] - {1} running release {2} at {3}", ++i, info.MachineName, info.SoftwareVersion, info.NetworkInfo[0].IPAddress);
                        }
                        Console.WriteLine("[{0}] - Manually enter an IP address (e.g. i-PORT 3) ", ++i);
            
                        string ipAddress = "";
                        int nPort = 7070; //default port as factory set
                        int nIndex;
                        while (true)
                        {
                            Console.Write("\nMake your selection and then press ENTER: ");
                            try
                            {
                                nIndex = int.Parse(Console.ReadLine()) - 1;
                            }
                            catch (FormatException)
                            {
                                break;
                            }
                            if ((nIndex >= discoveredList.Length) || (0 > nIndex))
                            {
                                if (nIndex == (i - 1))
                                {
                                    Console.Write("IP Address: ");
                                    ipAddress = Console.ReadLine();
                                    break;
                                }
                                else
                                    Console.WriteLine("Invalid selection");
                            }
                            else
                            {
                                ipAddress = discoveredList[nIndex].NetworkInfo[0].IPAddress;
                                nPort = discoveredList[nIndex].DefaultCommandHandlerServerPort;
                                break;
                            }
                        }
            
                        iCoreCommandChannel myChannel = new iCoreCommandChannel();
                        Console.WriteLine("If the i-CORE has been configured properly at {0} then you will see input trigger events when they occur",
                                        ipAddress);
                        Console.WriteLine("Press ENTER at any time to exit");
                        Console.Write("Connecting to {0}... ", ipAddress);
                        try
                        {
                            myChannel.Connect(ipAddress, nPort);
                            Console.WriteLine("Success!\r\n\n");
                            myChannel.ClearAlliCoreEvents(); //clear previous events, if any
                            //In case the clock is not set properly or the sync has not been setup, set the time on the device
                            myChannel.SetCurrentTime();
            
                            myChannel.InputTriggered += new iCoreCommandChannel.InputTriggerDelegate(OnInputTriggered);            
            
            
                            //Ensure that the i-CORE/i-HUB is configured for sending trigger events:
                            if (myChannel.Information.IsiCore)
                            {
                                //Note that the i-HUB has 2 inputs                        
                                myChannel.WriteConfigurationKey(ConfigurationKey.TrgYEnable, 1, true);
                                myChannel.WriteConfigurationKey(ConfigurationKey.TrgYEnable, 2, true);
                                myChannel.WriteConfigurationKey(ConfigurationKey.TrgmEvRnInput1, 3);//set to any                
                                myChannel.WriteConfigurationKey(ConfigurationKey.TrgmEvRnInput2, 3);//set to any                
                                myChannel.CommitConfiguration();
                            }
                            else //i-PORT 3 has different keys, and 4 inputs
                            {
                                myChannel.WriteConfigurationKey("EventRnInput1", "3");
                                myChannel.WriteConfigurationKey("EventRnInput2", "3");
                                myChannel.WriteConfigurationKey("EventRnInput3", "3");
                                myChannel.WriteConfigurationKey("EventRnInput4", "3");
                                myChannel.WriteConfigurationKey("EventCntDateTime", "1");
                                myChannel.WriteConfigurationKey("EventCntIPortID", "1");
                            }
                        }
                        catch (SocketException eSocket)
                        {
                            Console.WriteLine("A network problem occured: {0}", eSocket.Message);
                        }
                        catch (FormatException format)
                        {
                            Console.WriteLine("A format error occured: {0}", format.Message);
                        }
            
                        catch (Exception ex)
                        {
                            Console.WriteLine("An unexpected error occured: {0}\r\n{1}", ex.Message, ex.StackTrace);
                        }
            
                        Console.ReadLine();
                        myChannel.Disconnect();
                        Console.WriteLine("\r\n[Exit]");
                        Console.WriteLine("Thank you for choosing IDENTEC SOLUTIONS.");
                        Thread.Sleep(1000);
                    }
                }
            
                static void OnInputTriggered(object sender, InputTriggerEventArgs e)
                {
                    //leverage the InputTriggerEventArgs' ToString() override
                    Console.WriteLine("Trigger event: {0}", e);
                }
            
            }
             </code>
             <B>Output</B>
             <code>
            +++++++++++++++++++++++++++++++++++++++++++++
            ===-- i-CORE Input Trigger Test Sample --===
            +++++++++++++++++++++++++++++++++++++++++++++
            There were 2 i-Cores discovered. Please select one of the following:
            [1] - i-PORT4 running release 2.1.1exp-870 at 192.168.168.246
            [2] - i-Hub running release 2.1.1exp-870 at 192.168.168.40
            [3] - Manually enter an IP address (e.g. i-PORT 3)
            
            Make your selection and then press ENTER: 2
            If the i-CORE has been configured properly at 192.168.168.40 then you will see i
            nput trigger events when they occur
            Press ENTER at any time to exit
            Connecting to 192.168.168.40... Success!
            
            
            
            Trigger event: |High|Low| at 07/11/2007 4:08:48 PM
            Trigger event: |16|Low| at 07/11/2007 4:08:48 PM
            Trigger event: |High|Low| at 07/11/2007 4:08:51 PM            
            Trigger event: |16|Low| at 07/11/2007 4:08:55 PM
             </code>
             </example>
        </member>
        <member name="E:IDENTEC.iCore.iCoreCommandChannel.MessageReceived">
            <summary>
            Raised when a message is received from the i-CORE. Note that your code will be called in a worker thread.
            </summary>
        </member>
        <member name="E:IDENTEC.iCore.iCoreCommandChannel.MessageSent">
            <summary>
            Occurs when a message is sent to the i-CORE. Note that your code will be called in a worker thread.
            </summary>
        </member>
        <member name="P:IDENTEC.iCore.iCoreCommandChannel.LastConfigurationKeyAccessed">
            <summary>
            Gets the name of the last configuration key accessed.
            </summary>
            <value>The last configuration key accessed.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreCommandChannel.DetailedHostInformation">
            <summary>
            Gets the detailed host information.
            </summary>
            <value>The detailed host information.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreCommandChannel.iCoreResponseTimeout">
            <summary>
            Gets or sets the response timeout (the amount of time to wait for a response from the i-CORE after a command is issued).
            </summary>
            <value>The response timeout.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreCommandChannel.TCPBufferReceiveSize">
            <summary>            
            Gets or sets the size of the TCP buffer receive for tuning the receive size on your network.
            </summary>
            <value>The size of the TCP buffer receive.</value>
            <seealso cref="F:IDENTEC.iCore.SocketStateBuffer.DefaultTCPBufferSize"/>
        </member>
        <member name="P:IDENTEC.iCore.iCoreCommandChannel.Information">
            <summary>
            Gets the information.
            </summary>
            <value>The information.</value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreCommandChannel.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected to an i-CORE Command Channel.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDENTEC.iCore.iCoreCommandChannel.IPEndPoint">
            <summary>
            Gets the i-CORE IP end point.
            </summary>
            <value>The i core IP end point.</value>
        </member>
        <member name="T:IDENTEC.iCore.iCoreCommandChannel.ModularDeviceDiscoverOption">
            <summary>
            Enumeration of the options for use with the <see cref="M:IDENTEC.iCore.iCoreCommandChannel.GetModularDevicesInformation(IDENTEC.iCore.iCoreCommandChannel.ModularDeviceDiscoverOption)"/> method.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreCommandChannel.ModularDeviceDiscoverOption.Rediscover">
            <summary>
            Forces the i-CORE to rediscover the devices on the bus.
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.iCoreCommandChannel.ModularDeviceDiscoverOption.ReAssignLogicalAntenna">
            <summary>
            Re-assigns the logical antenna.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreCommandChannel.DisconnectedHandler">
            <summary>
            Declares a delegate for a method that takes in a sender and a <see cref="T:IDENTEC.iCore.SocketErrorEventArgs"/>. For use with handling the <see cref="E:IDENTEC.iCore.iCoreCommandChannel.Disconnected"/> event when raised.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreCommandChannel.HeartBeatEventHandler">
            <summary>
            Declares a delegate for a method that takes in a sender and a <see cref="T:IDENTEC.iCore.HeartbeatEventArgs"/>. For use with handling the <see cref="E:IDENTEC.iCore.iCoreCommandChannel.HeartBeat"/> event when raised.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreCommandChannel.ModuleStatusChangeEventHandler">
            <summary>
            Declares a delegate for a method that takes in a sender and a <see cref="T:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs"/>. For use with handling the <see cref="E:IDENTEC.iCore.iCoreCommandChannel.ModularDeviceStatusChanged"/> event when raised.
            </summary>
            <param name="sender">The instance of the <see cref="T:IDENTEC.iCore.iCoreCommandChannel"/> sending the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="T:IDENTEC.iCore.iCoreCommandChannel.TagEventHandler">
            <summary>
            Declares a delegate for a method that takes in a sender and a <see cref="T:IDENTEC.iCore.TagEventArgs"/>. For use with handling the <see cref="E:IDENTEC.iCore.iCoreCommandChannel.TagEvent"/> event when raised.
            </summary>
            <param name="sender">The instance of the <see cref="T:IDENTEC.iCore.iCoreCommandChannel"/> sending the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="T:IDENTEC.iCore.iCoreCommandChannel.InputTriggerDelegate">
            <summary>
            Declares a delegate for a method that takes in a sender and a <see cref="T:IDENTEC.iCore.InputTriggerEventArgs"/>. For use with handling the <see cref="E:IDENTEC.iCore.iCoreCommandChannel.InputTriggered"/> event when raised.
            </summary>
            <param name="sender">The instance of the <see cref="T:IDENTEC.iCore.iCoreCommandChannel"/> sending the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="T:IDENTEC.iCore.iCoreCommandChannel.MessageReceivedDelegate">
            <summary>
            Raised when a message is received from the i-CORE on the command channel.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreCommandChannel.MessageSentDelegate">
            <summary>
            Raised when a message is sent to the i-CORE on the command channel.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreEventChannel">
            <summary>
            Represents an i-CORE event channel whereby the i-CORE sends event messages when configured to do so.
            </summary>
            <seealso cref="M:IDENTEC.iCore.iCoreCommandChannel.SetEnableEventChannel(System.Int32,System.Boolean)"/>
            <seealso cref="T:IDENTEC.iCore.iCoreCommandChannel"/>
            <seealso cref="T:IDENTEC.Tags.iQTag"/>
            <seealso cref="T:IDENTEC.Tags.BeaconTags.iB2Tag"/>
            <seealso cref="T:IDENTEC.Tags.iD2Tag"/>        
            <seealso cref="T:IDENTEC.iCore.TagEventArgs"/>
            <seealso cref="T:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs"/>
            <seealso cref="T:IDENTEC.iCore.iCoreEventArgs"/>
        </member>
        <member name="M:IDENTEC.iCore.iCoreEventChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.iCoreEventChannel"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreEventChannel.Connect(System.String,System.Int32)">
            <summary>
            Connects the specified host.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:IDENTEC.iCore.iCoreEventChannel.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.iCoreEventChannel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:IDENTEC.iCore.iCoreEventChannel.Disconnected">
            <summary>
            Raised when the TCP connection is disconnected unexpectantly
            </summary>
            <remarks>This event may be raised during normal calls to <see>Disconnect</see></remarks>
        </member>
        <member name="E:IDENTEC.iCore.iCoreEventChannel.HeartBeat">
            <summary>
            Raised when the i-CORE sends a Heartbeat diagnostics message. 
            </summary>
            <remarks>The method the delegate executes runs in a ThreadPool's worker thread and therefore may not be thread safe.</remarks>
        </member>
        <member name="E:IDENTEC.iCore.iCoreEventChannel.ModularDeviceStatusChanged">
            <summary>
            Raised when a module state changes
            </summary>
        </member>
        <member name="E:IDENTEC.iCore.iCoreEventChannel.TagEvent">
            <summary>
            Raised when a tag event is reported by the i-CORE.
            </summary>
            <remarks>The i-CORE will queue up tag events automatically. These events are only acknowledged if your code subscribes to this event. If this event remains null then acknowledgements are not sent to the i-CORE.</remarks>
        </member>
        <member name="E:IDENTEC.iCore.iCoreEventChannel.InputTriggered">
            <summary>
            Raised when the input is on the i-CORE's host is triggered. The i-HUB has 2 inputs and i-PORT 3 has 4 inputs.            
            </summary>
            <remarks>The i-CORE/i-HUB may also sends trigger events in this style when configured to do so.</remarks>
        </member>
        <member name="E:IDENTEC.iCore.iCoreEventChannel.MessageReceived">
            <summary>
            Raised when a message is received from the i-CORE. Note that your code will be called in a worker thread.
            </summary>
        </member>
        <member name="E:IDENTEC.iCore.iCoreEventChannel.MessageSent">
            <summary>
            Occurs when a message is sent to the i-CORE. Note that your code will be called in a worker thread.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreEventChannel.DisconnectedHandler">
            <summary>
            Declares a delegate for a method that takes in a sender and a <see cref="T:IDENTEC.iCore.SocketErrorEventArgs"/>. For use with handling the <see cref="E:IDENTEC.iCore.iCoreCommandChannel.Disconnected"/> event when raised.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreEventChannel.HeartBeatEventHandler">
            <summary>
            Declares a delegate for a method that takes in a sender and a <see cref="T:IDENTEC.iCore.HeartbeatEventArgs"/>. For use with handling the <see cref="E:IDENTEC.iCore.iCoreCommandChannel.HeartBeat"/> event when raised.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreEventChannel.ModuleStatusChangeEventHandler">
            <summary>
            Declares a delegate for a method that takes in a sender and a <see cref="T:IDENTEC.iCore.ModularDeviceStatusChangeEventArgs"/>. For use with handling the <see cref="E:IDENTEC.iCore.iCoreCommandChannel.ModularDeviceStatusChanged"/> event when raised.
            </summary>
            <param name="sender">The instance of the <see cref="T:IDENTEC.iCore.iCoreCommandChannel"/> sending the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="T:IDENTEC.iCore.iCoreEventChannel.TagEventHandler">
            <summary>
            Declares a delegate for a method that takes in a sender and a <see cref="T:IDENTEC.iCore.TagEventArgs"/>. For use with handling the <see cref="E:IDENTEC.iCore.iCoreCommandChannel.TagEvent"/> event when raised.
            </summary>
            <param name="sender">The instance of the <see cref="T:IDENTEC.iCore.iCoreCommandChannel"/> sending the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="T:IDENTEC.iCore.iCoreEventChannel.InputTriggerDelegate">
            <summary>
            Declares a delegate for a method that takes in a sender and a <see cref="T:IDENTEC.iCore.InputTriggerEventArgs"/>. For use with handling the <see cref="E:IDENTEC.iCore.iCoreCommandChannel.InputTriggered"/> event when raised.
            </summary>
            <param name="sender">The instance of the <see cref="T:IDENTEC.iCore.iCoreCommandChannel"/> sending the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="T:IDENTEC.iCore.iCoreEventChannel.MessageReceivedDelegate">
            <summary>
            Raised when a message is received from the i-CORE on the event channel.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreEventChannel.MessageSentDelegate">
            <summary>
            Raised when a message is sent to the i-CORE on the event channel.
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreDiagnosticEventMessage">
            <summary>
            Internal helper class to encapsulate/parse the standard Diagnostic event "*83"
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.iCoreDiagnosticEventMessageEx">
            <summary>
            Helper class to encapsulate the Ex protocol's Diagnostic event (*92)
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.AsciiProtocolTagEventMessageEx">
            <summary>
            Parses out a PROT_ASCII_EXT_FC_TAGEVENT (0x90) event message from the i-CORE (on the event channel or command channel)
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.ProtocolRecord">
            <summary>
            Represents the basice protocol record (sent from i-CORE); with methods to extract the appropriate properties given the type of record.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.ProtocolRecord.GetTagIDStandard(System.UInt32@)">
            <summary>
            For IQ and ID tags
            </summary>
            <param name="dwTagID"></param>
        </member>
        <member name="M:IDENTEC.iCore.ProtocolRecord.GetEventData(System.Int32@,System.Int32@,System.DateTime@)">
            <summary>
            Gets the event data (id's and timestamp)
            </summary>
            <param name="mainID"></param>
            <param name="subID"></param>
            <param name="dt"></param>
        </member>
        <member name="M:IDENTEC.iCore.ProtocolRecord.GetTagEventProperty(IDENTEC.iCore.TagEventArgs.Detection@,System.Int32@)">
            <summary>
            Gets the tag event property data as long as the record is of type RecordType.TagEventProperty
            </summary>
            <param name="d">The d.</param>
            <param name="AreaID">The area ID.</param>
        </member>
        <member name="M:IDENTEC.iCore.ProtocolRecord.#ctor(IDENTEC.iCore.ExtASCIIMessage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.ProtocolRecord"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="index">The index where the record starts.</param>
        </member>
        <member name="M:IDENTEC.iCore.ProtocolRecord.#ctor(IDENTEC.iCore.ProtocolRecord.RecordType)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.ProtocolRecord"/> class.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="M:IDENTEC.iCore.ProtocolRecord.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.ProtocolRecord"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="index">The index where the record starts.</param>
        </member>
        <member name="M:IDENTEC.iCore.ProtocolRecord.ToString">
            <summary>
            Returns the type of record this is (makes debugging easier)
            </summary>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.iCore.ProtocolRecord.BodyLength">
            <summary>
            Excludes the Header length
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.ProtocolRecord.RecordType">
            <summary>
            See the i-CORE user's Guide version 2.1 or greater for the applicable record types
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.ProtocolRecord_0x100_TagStandard">
            <summary>
            Represents the base parameter record (for sending commands to the i-CORE)
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.ExtendedAsciiProtocol.ParseDateTime(System.String)">
            <summary>
            Parses the standard UTC date/time string that the ASCII protcol uses, given the correct substring.
            </summary>
            <param name="s">a substring that contains the time as formatted by the ASCII protocol</param>
            <returns>The time (local time!)</returns>
        </member>
        <member name="T:IDENTEC.iCore.ExtendedAsciiProtocol.iCoreEventType">
            <summary>
            i-Core event messages
            </summary>
        </member>
        <member name="T:IDENTEC.iCore.ExtASCIIMessage">
            <summary>
            Encapsulates an IDENTEC extended IDENTEC ASCII Message or a standard (i-PORT 3) IDENTEC ASCII protocol message.
            </summary>
            <remarks>Parses, splits and manages buffers for creating appropriate messages.</remarks>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.SOH">
            <summary>
            Defines the Start of Header (SOH) character used to parse the message from the i-CORE
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.ExtASCIIMessage.FromString(System.String)">
            <summary>
            Parses a single message from the given string.
            </summary>
            <param name="message">The message.</param>
            <returns>A new <see cref="T:IDENTEC.iCore.ExtASCIIMessage"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">The format of the string was incompatible.</exception>
        </member>
        <member name="M:IDENTEC.iCore.ExtASCIIMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.ExtASCIIMessage"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.ExtASCIIMessage.#ctor(IDENTEC.iCore.ExtASCIIMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iCore.ExtASCIIMessage"/> class.
            </summary>
            <param name="other">The <see cref="T:IDENTEC.iCore.ExtASCIIMessage"/> that is copied during the initialization.</param>
        </member>
        <member name="M:IDENTEC.iCore.ExtASCIIMessage.ParseMessage(System.Byte[],System.Int32)">
            <summary>
            Parses the message.
            </summary>
            <param name="byData">The by data.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.iCore.ExtASCIIMessage.ParseMessage">
            <summary>
            Parses a message from the existing buffer
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.ExtASCIIMessage.SplitBuffer">
            <summary>
            Splits the buffer into another <see cref="T:IDENTEC.iCore.ExtASCIIMessage"/> instance with the extra bytes in the buffer. Null if another <see cref="T:IDENTEC.iCore.ExtASCIIMessage"/> does not exist in the remainder of the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.iCore.ExtASCIIMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.ExtASCIIMessage"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iCore.ExtASCIIMessage"></see>.
            </returns>
        </member>
        <member name="M:IDENTEC.iCore.ExtASCIIMessage.CheckCRCOK">
            <summary>
            Checks the CRC of the message.
            </summary>
        </member>
        <member name="M:IDENTEC.iCore.ExtASCIIMessage.GetErrorCodeAsString(IDENTEC.iCore.ExtASCIIMessage.ErrorCode)">
            <summary>
            Gets the error code as a string.
            </summary>
            <param name="code">The error code.</param>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.iCore.ExtASCIIMessage.ReturnCode">
            <summary>
            Gets the return code.
            </summary>
            <value>The return code.</value>
            <remarks>Used internally for throwing exceptions when an error is returned from the i-CORE.</remarks>
        </member>
        <member name="P:IDENTEC.iCore.ExtASCIIMessage.Message">
            <summary>
            Gets the ASCII message as a string
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:IDENTEC.iCore.ExtASCIIMessage.Bytes">
            <summary>
            The dynamically allocated buffer
            </summary>
            <value>The bytes.</value>
        </member>
        <member name="P:IDENTEC.iCore.ExtASCIIMessage.Complete">
            <summary>
            Gets a value indicating whether this <see cref="T:IDENTEC.iCore.ExtASCIIMessage"/> is complete.
            </summary>
            <value><c>true</c> if complete; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iCore.ExtASCIIMessage.IsEmptyMessage">
            <summary>
            Gets a value indicating whether this instance is empty message.
            </summary>
            <value>
            	<c>true</c> if this instance is empty message; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDENTEC.iCore.ExtASCIIMessage.MessageBodyLength">
            <summary>
            The body length is everything between the '*' and the '\r' (not including these 2 chars)
            </summary>
        </member>
        <member name="P:IDENTEC.iCore.ExtASCIIMessage.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Byte"/> with the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:IDENTEC.iCore.ExtASCIIMessage.ErrorCode">
            <summary>
            The error code as returned from the i-CORE
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.Indeterminate">
            <summary>
            The error code has not been initialized
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.NoError">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.UnknownCommand">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.RangeOrFormatError">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.CommandNotAllowed">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.CommonError">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.CommandNotSupported">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.AntennaNotEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.SelectedTagNotInField">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.OperationPartiallySuccessful">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.NoAccessRightsToThisAddressRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.StartAddressOutOfRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.SelectedTagNotInList">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.OperationNotSupportedByTagType">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.LoggerOfSelectedTagNotActivated">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.TemperatureOutOfRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.TagCommunicationPermissionDenied">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.AntennaErrorOrAntennaUnavailable">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.NoConfigurationKeyWithNameSpecified">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.ConfigurationKeyOutOfRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.iCore.ExtASCIIMessage.ErrorCode.ConfigurationLocked">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.iD2Tag">
            <summary>
            Represents an i-D2 tag for i-D2 tag interactions.	
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.ResponseTag">
            <summary>
            Represents call-and-response (reply) tags. 
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.Tag">
            <summary>
            Represents an IDENTEC tag for common tag functionality.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.Tag.InvalidSignal">
            <summary>
            The invalid signal strength value. If tag communications fails, the tag signal strength will be this value.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Tag.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.Tags.Tag"></see>. The string is formatted like the printed label.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:IDENTEC.Tags.Tag.#ctor">
            <summary>
            Tag constructor.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Tag.#ctor(System.UInt32,System.DateTime,System.Int32)">
            <summary>
            Construct a tag with an ID, time and signal strength.
            </summary>
            <param name="id">The tag's serial number.</param>
            <param name="dt">The DateTime of contact.</param>
            <param name="signal">The signal strength.</param>
        </member>
        <member name="M:IDENTEC.Tags.Tag.#ctor(System.UInt32)">
            <summary>
            Initializes a new Tag object with a default tag ID.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:IDENTEC.Tags.Tag.#ctor(IDENTEC.Tags.Tag)">
            <summary>
            Copy constructor.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:IDENTEC.Tags.Tag.GetSignalStrength(System.Int32)">
            <summary>
            A method to get the signal strength from the specified antenna.
            </summary>
            <param name="antenna">The antenna number for the specified signal.</param>
            <returns>The relative signal strength as calculated by the reader.</returns>
            <remarks>This method is only valid for tags detected on readers with multiple antennas.</remarks>
        </member>
        <member name="M:IDENTEC.Tags.Tag.CreateLabel(System.UInt32)">
            <summary>
            Displays the tag serial number as printed on the tag's label.
            <seealso cref="M:IDENTEC.Tags.Tag.CreateSerialNumber(System.String)"/>
            </summary>
            <param name="serialNumber">The serial number to format.</param>
            <returns>A string representing the tag's serial number formatted in the dotted notatation similar to an IP Address.</returns>
        </member>
        <member name="M:IDENTEC.Tags.Tag.CreateLabel(System.UInt32,System.Boolean)">
            <summary>
            Creates the label as printed on the actual tag.
            </summary>
            <param name="serialNumber">The serial number.</param>
            <param name="leadingZero">if set to <c>true</c> to print the leading zero.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Tags.Tag.CreateLabel(System.String)">
            <summary>
            Creates the label from the given string which can be a formatted unsigned integer, or can be a dotted notation as printed in the label.
            </summary>
            <param name="serialNumber">The serial number.</param>
            <returns>A string that matches the printed label on the actual tag.</returns>
            <seealso cref="M:IDENTEC.Tags.Tag.CreateLabel(System.UInt32)"/>
            <exception cref="T:System.FormatException"> The serialNumber parameter is not of the correct format.
            </exception>
            <exception cref="T:System.ArgumentException"> The format is invalid.
            </exception>
        </member>
        <member name="M:IDENTEC.Tags.Tag.CreateSerialNumber(System.String)">
            <summary>
            Converts a string formatted in the dotted notation into an unsigned integer
            <seealso cref="M:IDENTEC.Tags.Tag.CreateLabel(System.UInt32)"/>
            </summary>			
            <param name="serialNumber">A tag serial number (with or without dotted notation).</param>
            <returns>A uint</returns>			
        </member>
        <member name="M:IDENTEC.Tags.Tag.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Tags.Tag.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Tags.Tag.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.Tags.Tag.ContactTime">
            <summary>
            The time of the last successful contact.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Tag.Region">
            <summary>
            The RF frequency. Set this to NA (916.5MHz) or European (868MHz). 
            </summary>					
        </member>
        <member name="P:IDENTEC.Tags.Tag.Number">
            <summary>
            The tag serial number. Each tag has a unique number.
            <seealso cref="P:IDENTEC.Tags.Tag.Label"/>			
            </summary>
            <remarks>This is sometimes referred to as the Tag's ID.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Tag.AntennaSignals">
            <summary>
            Gets or sets the antenna signals.
            </summary>
            <value>The antenna signals.</value>
        </member>
        <member name="P:IDENTEC.Tags.Tag.Signal">
            <summary>
            The receive signal strength the tag was last detected at.
            <seealso cref="F:IDENTEC.Tags.Tag.InvalidSignal"/>			
            <seealso cref="M:IDENTEC.Tags.Tag.GetSignalStrength(System.Int32)"/>
            </summary>			
            <remarks>The receive signal strength is only valid after successful tag communications. Use this property only if the tag was detected on a reader with only 1 antenna.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Tag.BestReceiveAntenna">
            <summary>
            Gets the antenna number with the best signal. Only applicable after communications using a reader that has more than one antenna.
            </summary>
            <remarks>If the tag has not been seen on an antenna then 0 will be returned. </remarks>
        </member>
        <member name="P:IDENTEC.Tags.Tag.Label">
            <summary>
            The tag serial number (ID) as it appears on the label. For example 0.200.074.790.
            <seealso cref="P:IDENTEC.Tags.Tag.Number"/>
            </summary>
            <remarks>You can set the label without having to format the string. For example, 200074790 is valid.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Tag.HexID">
            <summary>
            Formats the Tag ID as a Hex string
            </summary>
            <remarks>Currently only used by i-PORT 3</remarks>
        </member>
        <member name="M:IDENTEC.Tags.ResponseTag.#ctor(System.UInt32)">
            <summary>
            Initializes a new tag object with an ID.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:IDENTEC.Tags.ResponseTag.#ctor(IDENTEC.Tags.ResponseTag)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.ResponseTag"/> class.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:IDENTEC.Tags.ResponseTag.#ctor">
            <summary>
            Initializes a new Tag object.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.ResponseTag.Version">
            <summary>
            The version number.
            </summary>
            <remarks>The version number is only valid (non zero) after a ping/session setup.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.ResponseTag.DataCapacity">
            <summary>
            The maximum size of the on board data.
            </summary>
            <remarks>Tag communications should established before querying this property.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.ResponseTag.MinDataWriteAddress">
            <summary>
            The minimum address for which user data can be written on the tag. You cannot write data on the tag below the specificed address.
            </summary>
            <remarks>Data can be read from any address.</remarks>
        </member>
        <member name="T:IDENTEC.Tags.ResponseTag.TAG_TYPE">
            <summary>
            Specifies the actual tag type. Required for any tag communications including scanning.
            </summary>
            <remarks>We use this only at the protocol level.</remarks>
        </member>
        <member name="F:IDENTEC.Tags.ResponseTag.TAG_TYPE.IQ">
            <summary>
            The tag is an IQ type tag
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.ResponseTag.TAG_TYPE.ID_INTERNATIONAL">
            <summary>
            The tag is an i-D2 (international) type tag
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.ResponseTag.TAG_TYPE.ID_NORTH_AMERICA">
            <summary>
            The tag is an i-D2 (North American) type tag
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.iD2Tag.#ctor(System.UInt32,System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.iD2Tag"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="dt">The DateTime.</param>
            <param name="signal">The signal.</param>
        </member>
        <member name="M:IDENTEC.Tags.iD2Tag.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.iD2Tag.#ctor(System.UInt32)">
            <summary>
            Initializes a new iD2Tag object with a serial number.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:IDENTEC.Tags.iD2Tag.#ctor(IDENTEC.Tags.iD2Tag)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.iD2Tag"/> class.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="P:IDENTEC.Tags.iD2Tag.Battery">
            <summary>
            The battery status of the tag.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.iD2Tag.DataCapacity">
            <summary>
            The maximum capacity of the tag.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.iD2Tag.MinDataWriteAddress">
            <summary>
            The lowest address where the user can write data to the tag.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.iD2Tag.BatteryStatus">
            <summary>
            The battery status of the tag.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iD2Tag.BatteryStatus.Poor">
            <summary>
            The battery status is unacceptable; consider replacing the tag.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iD2Tag.BatteryStatus.Good">
            <summary>
            The battery is working properly.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iD2Tag.BatteryStatus.Indeterminate">
            <summary>
            The battery status could not be determined.
            </summary>
        </member>
        <member name="T:IDENTEC.InvalidDeviceResponseException">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDENTEC.InvalidDeviceResponseException.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:IDENTEC.InvalidDeviceResponseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.InvalidDeviceResponseException"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.InvalidDeviceResponseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.InvalidDeviceResponseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:IDENTEC.InvalidDeviceResponseException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.InvalidDeviceResponseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="actualCode">The actual code.</param>
        </member>
        <member name="M:IDENTEC.InvalidDeviceResponseException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.InvalidDeviceResponseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="actualCode">The actual code.</param>
            <param name="byteProcessed">The number of byte processed</param>
        </member>
        <member name="M:IDENTEC.InvalidDeviceResponseException.#ctor(System.String,System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.InvalidDeviceResponseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="actualCode">The actual returned code.</param>
            <param name="data">The data processed</param>
        </member>
        <member name="M:IDENTEC.InvalidDeviceResponseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.InvalidDeviceResponseException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:IDENTEC.InvalidDeviceResponseException.ResponseCode">
            <summary>
            Received response code
            </summary>
        </member>
        <member name="P:IDENTEC.InvalidDeviceResponseException.TotalByteProcessed">
            <summary>
            Number of byte processed 
            </summary>
        </member>
        <member name="P:IDENTEC.InvalidDeviceResponseException.ResponseData">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:IDENTEC.DataStream">
            <summary>
            Base class for DataStream functionality
            </summary>
        </member>
        <member name="F:IDENTEC.DataStream.log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="M:IDENTEC.DataStream.Open">
            <summary>
            Opens this instance.
            </summary>
        </member>
        <member name="M:IDENTEC.DataStream.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:IDENTEC.DataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified buffer.
            Not implemented
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="nBytesToRead">The n bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.DataStream.PollingRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="nBytesToRead"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.DataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="nBytesToWrite">The n bytes to write.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.DataStream.ReadMessage(System.Int32)">
            <summary>
            Gets the message from stream. Called by the reader or bus adapter to talk to the hardware.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.DataStream.SendMessage(System.Byte[],System.Int32)">
            <summary>
            Sends the message by decorating with the SOH, EOT, CRC and stuffing if necessary according to the original i-CARD 3 style protocol.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.DataStream.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value><c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.DataStream.ReadTimeout">
            <summary>
            Gets or sets the read timeout.
            </summary>
            <value>The read timeout.</value>
        </member>
        <member name="P:IDENTEC.DataStream.WriteTimeout">
            <summary>
            Gets or sets the write timeout.
            </summary>
            <value>The write timeout.</value>
        </member>
        <member name="T:IDENTEC.SerialPortStream">
            <summary>
            Represents a serial port data stream.
            </summary>
        </member>
        <member name="F:IDENTEC.SerialPortStream.log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="F:IDENTEC.SerialPortStream.DefaultWriteTimeout">
            <summary>
            Default Write timeout = 500 milliseconds
            </summary>
        </member>
        <member name="F:IDENTEC.SerialPortStream.DefaultReadTimeout">
            <summary>
            Default Read timeout = 500 milliseconds
            </summary>
        </member>
        <member name="M:IDENTEC.SerialPortStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.SerialPortStream"/> class.
            </summary>
            <param name="portName">Name of the port.</param>
        </member>
        <member name="M:IDENTEC.SerialPortStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.SerialPortStream"/> class.
            </summary>
            <param name="portName">Name of the port.</param>
            <param name="baudRate">The baud rate.</param>
        </member>
        <member name="M:IDENTEC.SerialPortStream.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.SerialPortStream"/> class.
            </summary>
            <param name="portName">Name of the port.</param>
            <param name="setDTR">boolean to indicate the required state of DTR</param>
        </member>
        <member name="M:IDENTEC.SerialPortStream.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.SerialPortStream"/> class.
            </summary>
            <param name="port">The port.</param>
            <param name="baudRate">The baud rate.</param>
        </member>
        <member name="M:IDENTEC.SerialPortStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.SerialPortStream"/> class.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:IDENTEC.SerialPortStream.#ctor(System.Int32,System.Boolean)">
            <summary>
            !!! This constructor is used for IB2L user data writer
            Initializes a new instance of the <see cref="T:IDENTEC.SerialPortStream"/> class.
            </summary>
            <param name="port">The port.</param>
            <param name="setDTR">If 'true' the DTR is set to 'high'</param>
        </member>
        <member name="M:IDENTEC.SerialPortStream.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:IDENTEC.SerialPortStream.Open">
            <summary>
            Opens this instance.
            </summary>
        </member>
        <member name="M:IDENTEC.SerialPortStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="nBytesToRead">The n bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.SerialPortStream.PollingRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Polling read where the call is not allowed to block.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="nBytesToRead">The n bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.SerialPortStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="nBytesToWrite">The n bytes to write.</param>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.SerialPortStream.ReadTimeout">
            <summary>
            Gets or sets the Read timeout.
            </summary>
            <value>The read timeout.</value>
        </member>
        <member name="P:IDENTEC.SerialPortStream.WriteTimeout">
            <summary>
            Gets or sets the write timeout.
            </summary>
            <value>The write timeout.</value>
        </member>
        <member name="P:IDENTEC.SerialPortStream.ClearReceiveBufferOnWrite">
            <summary>
            Gets or sets a value indicating whether [clear receive buffer on write].
            </summary>
            <value>
            	<c>true</c> if [clear receive buffer on write]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDENTEC.SerialPortStream.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value><c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:IDENTEC.TCPSocketStream">
            <summary>
            Represents a TCP/IP data stream.
            </summary>
        </member>
        <member name="F:IDENTEC.TCPSocketStream.DefaultWriteTimeout">
            <summary>
            Default Write timeout = 10 seconds
            </summary>
        </member>
        <member name="F:IDENTEC.TCPSocketStream.DefaultReadTimeout">
            <summary>
            Default Read timeout = 10 seconds
            </summary>
        </member>
        <member name="M:IDENTEC.TCPSocketStream.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.TCPSocketStream"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:IDENTEC.TCPSocketStream.Open">
            <summary>
            Opens this instance.
            </summary>
        </member>
        <member name="M:IDENTEC.TCPSocketStream.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:IDENTEC.TCPSocketStream.PollingRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Polling read where the method is not allowed to block.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="nBytesToRead">The n bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.TCPSocketStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="nBytesToRead">The n bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.TCPSocketStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="nBytesToWrite">The n bytes to write.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.TCPSocketStream.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="P:IDENTEC.TCPSocketStream.ReadTimeout">
            <summary>
            Gets or sets the read timeout.
            </summary>
            <value>The read timeout.</value>
        </member>
        <member name="P:IDENTEC.TCPSocketStream.WriteTimeout">
            <summary>
            Gets or sets the write timeout.
            </summary>
            <value>The write timeout.</value>
        </member>
        <member name="P:IDENTEC.TCPSocketStream.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value><c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:IDENTEC.iBusModule">
            <summary>
            Base class for a module on an Identec iBus
            </summary>
        </member>
        <member name="M:IDENTEC.iBusModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:IDENTEC.iBusModule.EventModuleStatusError">
            <summary>
            this event is generated when a module returned a status error
            <seealso cref="T:IDENTEC.iBusModule.OnModuleStatusError"/>
            </summary>
        </member>
        <member name="T:IDENTEC.iBusModule.OnModuleStatusError">
            <summary>
            Delegate  for EventModuleStatusError
            <seealso cref="E:IDENTEC.iBusModule.EventModuleStatusError"/>
            </summary>
        </member>
        <member name="T:IDENTEC.iDeviceHWInfo">
            <summary>
            Shows HW information of the Position Marker.
            </summary>    
            <seealso cref="N:IDENTEC.PositionMarker"/>
        </member>
        <member name="M:IDENTEC.iDeviceHWInfo.GetHWvalue">
            <summary>
            Gets the measured ADC value for HW recognition.
            </summary>
            <value>The ADC value of the potential divider.</value>
        </member>
        <member name="M:IDENTEC.iDeviceHWInfo.GetHWversion">
            <summary>
            Gets the version number of recognized HW.
            </summary>
            <value>A number from 0 to 6.</value>
        </member>
        <member name="M:IDENTEC.iDeviceHWInfo.GetBLversion">
            <summary>
            Gets the BootLoader version.
            </summary>
            <value>The BootLoader version.</value>
        </member>
        <member name="P:IDENTEC.iDeviceHWInfo.DateTime">
            <summary>
            Gets the date time.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="T:IDENTEC.iBusDeviceStatus">
            <summary>
            Indicates the status of the Position Marker.
            </summary>    
            <seealso cref="N:IDENTEC.PositionMarker"/>
        </member>
        <member name="M:IDENTEC.iBusDeviceStatus.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iBusDeviceStatus"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.iBusDeviceStatus"></see>.
            </returns>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.DateTime">
            <summary>
            Gets the date time.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.CRCError">
            <summary>
            Gets a value indicating whether [CRC error].
            </summary>
            <value><c>true</c> if [CRC error]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.HasError">
            <summary>
            Check if there is any error.
            </summary>
            <value><c>true</c> if any error; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.UnknownHostCommand">
            <summary>
            Gets a value indicating whether [unknown host command].
            </summary>
            <value><c>true</c> if [unknown host command]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.InternalVersion">
            <summary>
            Gets a value indicating whether [internal version].
            </summary>
            <value><c>true</c> if [internal version]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.HostTimeout">
            <summary>
            Gets a value indicating whether [host timeout].
            </summary>
            <value><c>true</c> if [host timeout]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.EscapeDLENotUsedProperly">
            <summary>
            Gets a value indicating whether [escape DLE not used properly].
            </summary>
            <value>
            	<c>true</c> if [escape DLE not used properly]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.Rebooted">
            <summary>
            Gets a value indicating whether the device rebooted since the last status check.
            </summary>
            <value><c>true</c> if rebooted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.EEPROMParamCRC">
            <summary>
            Gets a value indicating whether [EEPROM param CRC].
            </summary>
            <value><c>true</c> if [EEPROM param CRC]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.WatchDogReboot">
            <summary>
            Gets a value indicating whether [watch dog reboot].
            </summary>
            <value><c>true</c> if [watch dog reboot]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.EEPROMCalibrationCRC">
            <summary>
            Gets a value indicating whether [A calibration/configuration CRC error].
            </summary>
            <value><c>true</c> if a CRC while loading reader calibration/configuration occured; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.FallBackSoftware">
            <summary>
            Gets a value indicating whether [fall back software].
            </summary>
            <value><c>true</c> if [fall back software]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.VoltageTooLow">
            <summary>
            Gets a value indicating whether [supply voltage too low].
            </summary>
            <value>
            	<c>true</c> if [supply voltage too low]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.ActualVoltageTooLow">
            <summary>
            Gets a value indicating whether [actual voltage too low].
            </summary>
            <value>
            	<c>true</c> if [actual voltage too low]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.TemperatureTooLow">
            <summary>
            Gets a value indicating whether [temperature too low].
            </summary>
            <value><c>true</c> if [temperature too low]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.TemperatureTooHigh">
            <summary>
            Gets a value indicating whether [temperature too high].
            </summary>
            <value><c>true</c> if [temperature too high]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.LoopError">
            <summary>
            Gets a value indicating whether [loop error].
            </summary>
            <value><c>true</c> if [loop error]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.CurrentError">
            <summary>
            Gets a value indicating whether [current error].
            </summary>
            <value><c>true</c> if [current error]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.AmplifierError">
            <summary>
            Gets a value indicating whether [amplifier hot error].
            </summary>
            <value><c>true</c> if [amplifier hot error]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.VersionError">
            <summary>
            Gets a value indicating whether [version error].
            </summary>
            <value><c>true</c> if [version error]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.EEPROMError">
            <summary>
            Gets a value indicating whether [EEPROM error].
            </summary>
            <value><c>true</c> if [EEPROM error]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.QuartzClockError">
            <summary>
            Gets a value indicating whether [quartz clock error].
            </summary>
            <value><c>true</c> if [quartz clock error]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.I2CError">
            <summary>
            Gets a value indicating whether [I2C error].
            </summary>
            <value><c>true</c> if [IsC error]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:IDENTEC.iBusDeviceStatus.DWord">
            <summary>
            Gets the 4byte integer value.
            </summary>
            <value>Mask of 32 bits each showing another status (refer to manual).</value>
        </member>
        <member name="T:IDENTEC.iBusAdapter">
            <summary>
            Bus class that enumerates modules on the i-BUS.
            </summary>
            <remarks>This class's datastrem property is the DataStream property for Gen 3 M series readers.</remarks>
        </member>
        <member name="F:IDENTEC.iBusAdapter.DISCONNECTED_SLAVE_ADDRESS">
            <summary>
            Address of device with disconnected slave bus
            </summary>
        </member>
        <member name="F:IDENTEC.iBusAdapter.BroadcastAddress">
            <summary>
            Broadcast Address for all devices on the bus
            There wil be no response.
            </summary>
        </member>
        <member name="M:IDENTEC.iBusAdapter.#ctor(IDENTEC.DataStream)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.iBusAdapter"/> class using a compatible <see cref="P:IDENTEC.iBusAdapter.DataStream"/>.
            </summary>
        </member>
        <member name="M:IDENTEC.iBusAdapter.GetProgrammer(System.Int32)">
            <summary>
            Enumerates the bus modules to establish an iB-Programmer (iMark and iPortMB).
            iPortMB needs some time to boot after connecting ...
            </summary>
            <param name="TOms">TimeOut in ms.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.iBusAdapter.EnumerateBusModules">
            <summary>
            Discovers all the modules on the bus.
            They will all be readdressed
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.iBusAdapter.EnumerateBusModules(System.Int32)">
            <summary>
            Discovers a maximum amount of modules on the bus.
            They will all be readdressed
            </summary>
            <param name="deviceCount">The number of devices to limit the discovery.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.iBusAdapter.EnumerateBusModules(System.Int32,System.Boolean)">
            <summary>
            Enumerates the bus modules.
            </summary>
            <param name="deviceCount">The number of devices to limit the discovery.</param>
            <param name="readdress">true for readdressing all devices.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.iBusAdapter.GetNextBusDevice(System.Int32)">
            <summary>
            Get next device on the bus
            </summary>
            <param name="pollTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.iBusAdapter.QueryDeviceInformation(System.Int32)">
            <summary>
            Query the device information, device type and version
            </summary>
            <param name="address">Device address on the bus</param>
            <returns>The device information</returns>
        </member>
        <member name="M:IDENTEC.iBusAdapter.BroadcastDisconnectMessage">
            <summary>
            Broadcasts the disconnect message to all the devices on the bus.
            </summary>
            <remarks>Each device will have its slave port disconnected and will be addressed with the first device on the chain as address 1.</remarks>
        </member>
        <member name="M:IDENTEC.iBusAdapter.BroadcastConnectMessage">
            <summary>
            Broadcasts the Connect message to all the devices on the bus.
            </summary>
            <remarks>Each device will have its slave port connected </remarks>
        </member>
        <member name="M:IDENTEC.iBusAdapter.BroadcastSyncMessage">
            <summary>
            Broadcasts the sync message to all the devices on the chain.
            </summary>
            <remarks>This message should be broadcast every 5 seconds or less when an i-MARK device is part of the chain.</remarks>
        </member>
        <member name="M:IDENTEC.iBusAdapter.SendSyncMessage(System.Int32)">
            <summary>
            Sends the sync message to a specific device on the chain.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="E:IDENTEC.iBusAdapter.UnknownDeviceDiscovered">
            <summary>
            Occurs when an unknown device is enumerated on the iBus
            </summary>
        </member>
        <member name="P:IDENTEC.iBusAdapter.DataStream">
            <summary>
            Gets or sets the data stream.
            </summary>
            <value>The data stream.</value>
        </member>
        <member name="T:IDENTEC.iBusAdapter.UnknownBusDeviceHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDENTEC.ILRGen3.RFBaudRate">
            <summary>
            Defines the RF communication baud rate to use
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.RFBaudRate.RF_DEFAULT">
            <summary>
            uses the default baudrate 19200
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.RFBaudRate.RF_19200">
            <summary>
            Baudrate is 19200
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.RFBaudRate.RF_38400">
            <summary>
            Baudrate is 38400
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.RFBaudRate.RF_57600">
            <summary>
            Baudrate is 57600
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.RFBaudRate.RF_115200">
            <summary>
            Baudrate is 115200
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.RFBaudRate.RF_250000">
            <summary>
            Baudrate is 250000
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.RFBaudRate.RF_500000">
            <summary>
            Baudrate is 500000
            </summary>
        </member>
        <member name="T:IDENTEC.ILRGen3.WakeUpMode">
            <summary>
            Defines how the readers has to manage the wake up signal
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.WakeUpMode.ForceWakeUP">
            <summary>
            The API will always force the reader to send a wake up signal
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.WakeUpMode.ForceNoWakeUp">
            <summary>
            The API will force the reader not to send a wake up signal
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.WakeUpMode.AutoWakeUp">
            <summary>
            The API will will self manage sending a wake up signal
            </summary>
        </member>
        <member name="T:IDENTEC.ILRGen3.Readers.Gen3Reader">
            <summary>
            Base Class for all Gen3 readers
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.ConnectSlavePort(System.Boolean)">
            <summary>
            Connects the slave port.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.GetBusAddress">
            <summary>
            Gets the bus address.
            </summary>
            <returns>The bus address.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.SetBusAddress(System.Int32)">
            <summary>
            CSet the device bus address
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="F:IDENTEC.ILRGen3.Readers.Gen3Reader.DISCONNECTED_SLAVE_ADDRESS">
            <summary>
            The bus address to communicate with the device with the slave port disconnected.
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.Readers.Gen3Reader._serialNumber">
            <summary>
            The serial number
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.Readers.Gen3Reader._infoString">
            <summary>
            The reader information string
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.Readers.Gen3Reader._BufferID">
            <summary>
            The buffer ID for use with the reader protocol (advanced)
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.Readers.Gen3Reader._firmwareVersion">
            <summary>
            The firmware version string
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.Readers.Gen3Reader._bootLoaderVersion">
            <summary>
            The firmware bootloader version string
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.Readers.Gen3Reader._protocolVersion">
            <summary>
            The supported protocol version string
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.Readers.Gen3Reader._antennaCount">
            <summary>
            The number of antennas the reader supports
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.Readers.Gen3Reader._ActiveAntenna">
            <summary>
            The antenna to use for RF communication
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.ILRGen3.Readers.Gen3Reader"/> class.
            </summary>                
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.#ctor(IDENTEC.ILRGen3.Readers.Gen3Reader)">
            <summary>
            Copy constructor, initializes a new instance of the <see cref="T:IDENTEC.ILRGen3.Readers.Gen3Reader"/> class.
            </summary>                
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.Initialize">
            <summary>
            Initializes the reader instance through calls to the device via the connected DataStream object.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.GetStatus">
            <summary>
            Read the current reader status.
            </summary>
            <returns>The current status</returns>
            <remarks>This command will clear the reader status on the device</remarks>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.GetBeaconTags">
            <summary>
            Gets the beacon tag list. This is a blocking call.
            </summary>
            <returns>A ILRGen3TagCollection containing the beacon tags reported by the reader.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.ActivateListeningForOtherScanResponses(System.Int32,System.Int32)">
            <summary>
            Activates the listening for other scan responses.
            </summary>
            <param name="minimumAntennaID">The minimum antenna ID.</param>
            <param name="maximumAntennaID">The maximum antenna ID.</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.DeactivateListeningForOtherScanResponses">
            <summary>
            Deactivates the listening for other scan responses.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.GetTagsScannedByOtherReaders">
            <summary>
            Gets the tags scanned by other readers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.GetParameter(System.Int32)">
            <summary>
            Gets the parameter.
            </summary>
            <param name="subCommand">The sub command.</param>                
            <returns>The resulting parameter</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.GetParameterPrivate(System.Byte,System.UInt32@)">
            <summary>
            Gets the parameter.
            </summary>
            <param name="bySubCmd">The by sub CMD.</param>
            <param name="dwParameter">The dw parameter.</param>                
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.SetParameter(System.Int32,System.Int32)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="subCommand">The sub command.</param>
            <param name="param">The param.</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.SetParameterPrivate(System.Byte,System.UInt32)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="bySubCmd">The by sub CMD.</param>
            <param name="dwParameter">The dw parameter.</param>
            <remarks>This is an advanced control; improper use may result in indeterminate operational behavior.</remarks>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.GetLastTagFrequencyOffset">
            <summary>
            Gets the frequency Offset.
            </summary>
            <returns>The frequency offset of the last tag communication</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.GetFrequency">
            <summary>
            Gets the frequency used.
            </summary>
            <returns>The frequency used by teh reader</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.GetRFBeaconBaudrate">
            <summary>
            Gets the RF Beacon baudrate
            </summary>
            <returns>The fRF beacon Baudrate used by reader</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.SetFrequency(IDENTEC.Frequency)">
            <summary>
            Set the frequency the reader must use.
            </summary>
            <param name="freq">The frequency to use</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.SetRFBeaconBaudrate(IDENTEC.ILRGen3.RFBaudRate)">
            <summary>
            Set the RF Beacon baudrate the reader must use to listen for beacon messages.
            </summary>
            <param name="baudrate">The baudrate to use</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.SetTagListBehavior(IDENTEC.Readers.BeaconReaders.TagListBehavior)">
            <summary>
            Sets the reader's list behavior.
            <seealso cref="T:IDENTEC.Readers.BeaconReaders.TagListBehavior"/>				
            <seealso cref="M:IDENTEC.ILRGen3.Readers.Gen3Reader.GetTagListBehavior"/>
            </summary>
            <remarks>You should clear the list after changing the list behavior!!</remarks>
            <param name="mode">The TagListBehavior enumerated setting.</param>			
            <returns></returns>			
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.LimitNumberOfTagsDuringRequest(System.Int32)">
            <summary>
            Limits the number of tags the reader responds with during a request for tags.
            </summary>
            <param name="maxTags">The maximum number of tags the reader will reply with during a request. Set to 0 for unlimited or any number below 100.</param>
            <returns></returns>
            <remarks>The default on power-up is 0.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.GetTagListBehavior">
            <summary>
            Queries the reader for its list behavior.
            </summary>
            <seealso cref="M:IDENTEC.ILRGen3.Readers.Gen3Reader.SetTagListBehavior(IDENTEC.Readers.BeaconReaders.TagListBehavior)"/>
            <returns></returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.SetTagListInhibitTime(System.TimeSpan)">
            <summary>
            Tags that have not been detected in longer than the inhibit time and have been reported are removed from the reader's internal list.
            </summary>
            <param name="lifetimeInList">The length of time that the tag remains in the list if it is not detected again. Set to 0 to keep the tag in the list. </param>
            <returns></returns>
            <remarks>The default is 60 seconds when the unit powers up.</remarks>
            <remarks>The resolution of the reader's timer is in seconds.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                                
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.SetTagReReportingInterval(System.TimeSpan)">
            <summary>
            The time in seconds after which a tag is re-reported if it is still detected.
            </summary>
            <param name="interval">The amount of time after which a tag is re-reported if it is still detected. To disable re-reporting set to 0 (default on power up). </param>
            <returns></returns>
            <remarks>The resolution of the reader's timer is in seconds.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.ClearTagList">
            <summary>
            Removes all tags from the reader's list.
            </summary>
            <returns></returns>
            <remarks>The list is empty on power-up.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.SetAllTagsInListAsNotYetReported">
            <summary>
            This command causes a resend of all tags in reader memory  (schedule for retransmission).
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.SetTagSignalFilterLevel(System.Int32)">
            <summary>
            Sets up a filter so tags that are ignored when detected at levels below the specified signal (dBm)
            </summary>
            <param name="minSignal"></param>
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.GetTagSignalFilterLevel">
            <summary>
            Gets the current signal filter used to ignore tags that are detected at levels below the specified signal (dBm)
            </summary>
            <returns></returns>
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.ResetToFactoryDefault">
            <summary>
            This command reset all parameters to default configuration.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.ReadInfo">
            <summary>
            Reads the info.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.BroadcastWriteDataToRegister(System.Byte,System.Int32,System.Byte[],System.Int32,System.Boolean,System.Int32)">
            <summary>
            Writes the data (blocking call).
            </summary>
            <param name="register">The register.</param>
            <param name="address">The address within the register.</param>
            <param name="data">The data.</param>
            <param name="bytesToWrite">The bytes to write.</param>
            <param name="UseWakeUp">Wake Up mode.</param>
            <param name="WakeUpDuration">duration of wake up in 100ms step</param>
            <returns>A reference to a TagWriteDataResult object.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.BroadcastWriteDataToEEPROM(System.Int32,System.Byte[],System.Int32,System.Boolean,System.Int32)">
            <summary>
            Writes the data (blocking call).
            </summary>
            <param name="address">The address within the register.</param>
            <param name="data">The data.</param>
            <param name="bytesToWrite">The bytes to write.</param>
            <param name="UseWakeUp">Wake Up mode.</param>
            <param name="WakeUpDuration">duration of wake up in 100ms step</param>
            <returns>A reference to a TagWriteDataResult object.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.BroadcastWriteDataToRegister(System.Byte,System.Byte,System.Byte,System.Int32,System.Byte[],System.Int32,System.Boolean,System.Int32)">
            <summary>
            Writes the data (blocking call).
            </summary>
            <param name="manufacturer">Tag manufacturer</param>
            <param name="tagType">The tag Type</param>
            <param name="register">The register.</param>
            <param name="address">The address within the register.</param>
            <param name="data">The data.</param>
            <param name="bytesToWrite">The bytes to write.</param>
            <param name="UseWakeUp">Wake Up mode.</param>
            <param name="WakeUpDuration">duration of wake up in 100ms step</param>
            <returns>A reference to a TagWriteDataResult object.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.BroadcastWriteDataToEEPROM(System.Byte,System.Byte,System.Int32,System.Byte[],System.Int32,System.Boolean,System.Int32)">
            <summary>
            Writes the data (blocking call).
            </summary>
            <param name="manufacturer">Tag manufacturer</param>
            <param name="tagType">The tag Type</param>
            <param name="address">The address within the register.</param>
            <param name="data">The data.</param>
            <param name="bytesToWrite">The bytes to write.</param>
            <param name="UseWakeUp">Wake Up mode.</param>
            <param name="WakeUpDuration">duration of wake up in 100ms step</param>
            <returns>A reference to a TagWriteDataResult object.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.PingTag(IDENTEC.ILRGen3.Tags.iQ350)">
            <summary>
            Blinks a tag once (blocking call).
            </summary>
            <param name="tag">tag to blink</param>
            <returns>true on success.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.StartEnableTagLogger(IDENTEC.ILRGen3.Tags.ILRGen3Tag,System.TimeSpan)">
            <summary>
            Starts the tag's logger.
            </summary>
            <param name="tag">The tag.</param>
            <param name="loggingInterval">The logging interval.</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.StartTagDataWrite(IDENTEC.ILRGen3.Tags.ILRGen3Tag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="tag"></param>
            <param name="address"></param>
            <param name="data"></param>
            <param name="bytesToWrite"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.StartTagDataRead(IDENTEC.ILRGen3.Tags.ILRGen3Tag,System.Int32,System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="tag"></param>
            <param name="address"></param>
            <param name="bytesToRead"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.CheckTagReadDataComplete(IDENTEC.ILRGen3.Tags.ILRGen3Tag)">
            <summary>
            Not implemented
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.CheckTagWriteDataComplete(IDENTEC.ILRGen3.Tags.ILRGen3Tag)">
            <summary>
            Not implemented
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.StartTagDataRead(IDENTEC.ILRGen3.Readers.Gen3Reader,IDENTEC.ILRGen3.Tags.ILRGen3Tag,System.Int32,System.Int32)">
            <summary>
            Called by the tag class to do the actual work.
            </summary>
            <param name="reader"></param>
            <param name="tag"></param>
            <param name="address"></param>
            <param name="bytesToRead"></param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.StartQueryForResponseTags(System.Int32)">
            <summary>
            Queries for tags.
            </summary>
            <param name="maximumTags">The maximum tags.</param>
            <returns>The approximate amount of time it will take for the reader to have a response</returns>
            <seealso cref="M:IDENTEC.ILRGen3.Readers.Gen3Reader.CheckQueryResponseTagsComplete"/>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.Gen3Reader.CheckQueryResponseTagsComplete">
            <summary>
            Checks for query tags completed.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.Antenna">
            <summary>
            The antenna to work with.
            </summary>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.Address">
            <summary>
            Gets the bus address assigned on the bus.
            </summary>
            <value>The bus address message.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.Retries">
            <summary>
            Gets or sets the retries value (0 to 10).
            </summary>
            <value>The retries message.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.AntennaCount">
            <summary>
            Gets the antenna count.
            </summary>
            <value>The antenna count.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.SerialNumber">
            <summary>
            Gets the serial number.
            </summary>
            <value>The serial number.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.Information">
            <summary>
            Gets the sreader information.
            </summary>
            <value>The reader information.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.FirmwareVersion">
            <summary>
            The firmware version.
            </summary>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.MajorVersion">
            <summary>
            The major firmware version.
            </summary>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.MinorVersion">
            <summary>
            The minor firmware version.
            </summary>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.DataStream">
            <summary>
            Gets or sets the data stream.
            </summary>
            <value>The data stream.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.TXPower">
            <summary>
            Gets or sets the TX power (-30 to +10).
            </summary>
            <value>The TX Power.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.RFBaudRate">
            <summary>
            Gets or sets the F frequency communication baudrate.
            </summary>
            <value>The RF frequency communication baudrate</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.WakeUpDuration">
            <summary>
            Gets or sets the duration of the wake up signal.
            </summary>
            <value>The wake up duration in 100 millisecond steps. min 2 and maximum 255</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.Gen3Reader.Status">
            <summary>
            Gets or sets the reader status.
            </summary>
            <value>The Reader status</value>
            <remarks>This is not the current reader status please use <see cref="M:IDENTEC.ILRGen3.Readers.Gen3Reader.GetStatus"/> to read the current status</remarks>
        </member>
        <member name="T:IDENTEC.ILRGen3.Readers.Gen3Reader.ReturnCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.Readers.Gen3Reader.ReturnCode.Indeterminate">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.ILRGen3.Readers.Gen3Reader.ReturnCode.NoError">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDENTEC.ILRGen3.Readers.ErrorDeviceEventArgs">
            <summary>
            This class should be in the iBusAdapter
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.ErrorDeviceEventArgs.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.ErrorDeviceEventArgs.Status">
            <summary>
            Gets the device status.
            </summary>
            <value>The status value.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.ErrorDeviceEventArgs.Information">
            <summary>
            Gets the device information.
            </summary>
            <value>The information.</value>
        </member>
        <member name="T:IDENTEC.ILRGen3.Readers.iPortM350">
            <summary>
            Represents the functionality of ani-Port M 350 for use with 
            IDENTEC SOLUTIONS Gen3 tags <see cref="T:IDENTEC.ILRGen3.Tags.iQ350"/>
            <seealso cref="T:IDENTEC.ILRGen3.Readers.iCardCF350"/>
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iPortM350.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.ILRGen3.Readers.iPortM350"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iPortM350.#ctor(IDENTEC.ILRGen3.Readers.iPortM350)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.ILRGen3.Readers.iPortM350"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iPortM350.#ctor(IDENTEC.DataStream)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.ILRGen3.Readers.iPortM350"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iPortM350.#ctor(IDENTEC.iBusAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.ILRGen3.Readers.iPortM350"/> class.
            </summary>
            <param name="bus">The bus.</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iPortM350.Initialize">
            <summary>
            Initializes the reader instance through calls to the device via the connected DataStream object.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iPortM350.ReadEEPROM(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Backwards compatible read of the reader's EEPROM (i-CARD 3 style for configuration properties).
            </summary>
            <param name="address">The address.</param>
            <param name="buffer">The buffer.</param>
            <param name="bytesToRead">The bytes to read.</param>
            <remarks>Not implemented</remarks>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iPortM350.WriteEEPROM(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Backwards compatible read of the reader's EEPROM (i-CARD 3 style for configuration properties).
            </summary>
            <param name="address">The address.</param>
            <param name="buffer">The buffer.</param>
            <param name="bytesToWrite">The number of bytes to write.</param>
            <remarks>Not implemented</remarks>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iPortM350.Disconnect">
            <summary>
            Disconnect the device from the datastream <see cref="T:IDENTEC.DataStream"/> object.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iPortM350.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:IDENTEC.ILRGen3.Readers.iCardCF350">
            <summary>
            Represents the functionality of an i-CARD CF 350 for use with 
            IDENTEC SOLUTIONS Gen3 tags. <see cref="T:IDENTEC.ILRGen3.Tags.iQ350"/>
            <seealso cref="T:IDENTEC.ILRGen3.Readers.iPortM350"/>
            /// </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iCardCF350.EnumerateCFSerialPorts">
            <summary>
            Enumerates the CF serial ports.
            </summary>
            <returns>An array of serial ports that have CF cards attached.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iCardCF350.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.ILRGen3.Readers.iCardCF350"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iCardCF350.#ctor(IDENTEC.DataStream)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.ILRGen3.Readers.iCardCF350"/> class.
            </summary>
            <param name="stream">The stream used to communicate with the reader.</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iCardCF350.#ctor(IDENTEC.iBusAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.ILRGen3.Readers.iCardCF350"/> class.
            </summary>
            <param name="bus">The bus.</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iCardCF350.Initialize">
            <summary>
            Initializes the reader instance through calls to the device via the connected <see cref="T:IDENTEC.DataStream"/> object.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Readers.iCardCF350.Disconnect">
            <summary>
            Disconnect the device from the datastream <see cref="T:IDENTEC.DataStream"/> object.
            </summary>
        </member>
        <member name="P:IDENTEC.ILRGen3.Readers.iCardCF350.Connected">
            <summary>
            Returns true if connected, false if not.
            </summary>
        </member>
        <member name="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag">
            <summary>
            Represents base behavior for Gen3 based tags.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.#ctor(IDENTEC.ILRGen3.Tags.ILRGen3Tag)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/> class.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.StartDataRead(IDENTEC.ILRGen3.Readers.Gen3Reader,System.Int32,System.Int32)">
            <summary>
            Begins the read data.
            </summary>
            <param name="reader">The reader.</param>
            <param name="address">The address.</param>
            <param name="bytesToRead">The bytes to read.</param>
            <returns>The approximate amount of time it will take for the reader to perform the operation.</returns>
            <seealso cref="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.CheckReadDataComplete(IDENTEC.ILRGen3.Readers.Gen3Reader)"/>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.CheckReadDataComplete(IDENTEC.ILRGen3.Readers.Gen3Reader)">
            <summary>
            Checks the reader to see if the data is ready to report.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.StartDataWrite(IDENTEC.ILRGen3.Readers.Gen3Reader,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Start writting data
            </summary>
            <param name="reader">The reader.</param>
            <param name="address">The address.</param>
            <param name="data">The data.</param>
            <param name="bytesToWrite">The bytesToWrite.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.CheckWriteDataComplete(IDENTEC.ILRGen3.Readers.Gen3Reader)">
            <summary>
            Checks the reader to see if the write data operation has completed.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.ReadData(IDENTEC.ILRGen3.Readers.Gen3Reader,System.Byte,System.Int32,System.Int32,System.Int32,IDENTEC.ILRGen3.WakeUpMode)">
            <summary>
            Reads the data (blocking call).
            </summary>
            <param name="reader">The reader.</param>
            <param name="register">The register.</param>
            <param name="address">The address.</param>
            <param name="bytesToRead">The bytes to read.</param>
            <param name="retries">Numbers of retries..</param>
            <param name="wakeUpMode">Defines  how to magnage the tag wake</param>
            <returns>A TagReadStatsResult object with relevant information.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.ReadVersion(IDENTEC.ILRGen3.Readers.Gen3Reader,IDENTEC.ILRGen3.WakeUpMode)">
            <summary>
            Reads the data (blocking call).
            </summary>
            <param name="reader">The reader.</param>
            <param name="wakeUpMode">Defines  how to magnage the tag wake</param>
            <returns>A TagReadStatsResult object with relevant information.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.ReadData(IDENTEC.ILRGen3.Readers.Gen3Reader,System.Int32,System.Int32,System.Int32,IDENTEC.ILRGen3.WakeUpMode)">
            <summary>
            Reads the data (blocking call).
            </summary>
            <param name="reader">The reader.</param>
            <param name="address">The address.</param>
            <param name="bytesToRead">The bytes to read.</param>
            <param name="retries">Numbers of retries..</param>
            <param name="wakeUpMode">Defines  how to magnage the tag wake</param>
            <returns>A TagReadStatsResult object with relevant information.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.WriteData(IDENTEC.ILRGen3.Readers.Gen3Reader,System.Byte,System.Int32,System.Byte[],System.Int32,System.Int32,IDENTEC.ILRGen3.WakeUpMode)">
            <summary>
            Writes the data (blocking call).
            </summary>
            <param name="reader">The reader.</param>
            <param name="register">The register.</param>
            <param name="address">The address within the register.</param>
            <param name="data">The data.</param>
            <param name="bytesToWrite">The bytes to write.</param>
            <param name="retries">Numbers of retries..</param>
            <param name="wakeUpMode">Wake Up mode.</param>
            <returns>A reference to a TagWriteDataResult object.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.WriteData(IDENTEC.ILRGen3.Readers.Gen3Reader,System.Int32,System.Byte[],System.Int32,System.Int32,IDENTEC.ILRGen3.WakeUpMode)">
            <summary>
            Writes the data (blocking call).
            </summary>
            <param name="reader">The reader.</param>
            <param name="address">The address.</param>
            <param name="data">The data.</param>
            <param name="bytesToWrite">The bytes to write.</param>
            <param name="retries">NUmbre of retries</param>
            <param name="wakeUpMode">Define if we want to let the system manage the wake up or force it</param>
            <returns>A reference to a TagWriteDataResult object.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.WriteBeaconInterval(IDENTEC.ILRGen3.Readers.Gen3Reader,System.Byte,IDENTEC.ILRGen3.WakeUpMode)">
            <summary>
            Set the tag beacon interval (blocking call).
            </summary>
            <param name="reader">The reader.</param>
            <param name="interval">The beacon interval in seconds. 0 to disable or 0xFF for tag default value</param>
            <param name="wakeUpMode">Define if we want to let the system manage the wake up or force it</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.TagPing(IDENTEC.ILRGen3.Readers.Gen3Reader,System.Byte,System.Byte)">
            <summary>
            Make the tag blink (blocking call).
            </summary>
            <param name="reader">The reader.</param>
            <param name="interval">The blink interval in 100ms steps.</param>
            <param name="amount">How often to blink.</param>
            <returns>true on success.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.ResetBattery(IDENTEC.ILRGen3.Readers.Gen3Reader)">
            <summary>
            Make the tag blink (blocking call).
            </summary>
            <param name="reader">The reader.</param>
            <returns>true on success.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type; based on the Tag's <see cref="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.SerialNumber"/>
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than obj. Zero This instance is equal to obj. Greater than zero This instance is greater than obj.
            </returns>
            <exception cref="T:System.ArgumentException">obj is not the same type as this instance. </exception>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3Tag.ToString">
            <summary>
            Convert tag object to string.
            </summary>
            <returns>
            A string representing the Tag ID
            </returns>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.BeaconMessage">
            <summary>
            Gets or sets the raw beacon message.
            </summary>
            <value>The beacon message.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.BeaconCounterLowByte">
            <summary>
            Gets the beacon counter low byte.
            </summary>
            <value>The beacon counter low byte.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.BeaconCounterHighByte">
            <summary>
            Gets the beacon counter high byte.
            </summary>
            <value>The beacon counter high byte.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.BeaconMessageType">
            <summary>
            Gets or sets the type of the beacon message.
            </summary>
            <value>The type of the beacon message.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.ManufacturerID">
            <summary>
            Gets or sets the manufacturer ID.
            </summary>
            <value>The manufacturer ID.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.Version">
            <summary>
            Gets the tag firmware version.
            </summary>
            <value>The firmware version.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.TypeID">
            <summary>
            Gets or sets the type ID.
            </summary>
            <value>The type ID.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.AntennaSignals">
            <summary>
            Gets or sets the antenna signals.
            </summary>
            <value>The antenna signals.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.MaxSignal">
            <summary>
            Gets or sets the max signal.
            </summary>
            <value>The max signal.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.StatusBitMask">
            <summary>
            Gets the status bit mask.
            </summary>
            <value>The status bit mask.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.Status">
            <summary>
            Gets the tag status.
            </summary>
            <value>The tag Status.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.SerialLabel">
            <summary>
            Gets or sets the tag serial number.
            </summary>
            <value>The tag serial number.</value>
            <remarks>The string format will match the printed label format. For example 0.420.000.100</remarks>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.SerialNumber">
            <summary>
            Gets or sets the tag serial number.
            </summary>
            <value>The tag serial number.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.TimeLastSeen">
            <summary>
            Gets or sets the last time beacon message has been seen.
            </summary>
            <value>The time last seen.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.TimeFirstSeen">
            <summary>
            Gets or sets the first time beacon message has been seen.
            </summary>
            <value>The time first seen.</value>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3Tag.ResetCounter">
            <summary>
            Gets or sets the tag Reset counter.
            </summary>
            <value>The tag reset counter.</value>
            <remark>The tag reset is not resetted on the tag itself.</remark>
        </member>
        <member name="T:IDENTEC.ILRGen3.Tags.iQ350">
            <summary>
            Represents base behavior for iQ350 based tags.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.iQ350.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.ILRGen3.Tags.iQ350"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.iQ350.#ctor(IDENTEC.ILRGen3.Tags.iQ350)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.ILRGen3.Tags.iQ350"/> class.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="T:IDENTEC.ILRGen3.Tags.CompareTagByManufacturerID">
            <summary>
            An IComparer class used for sorting the a Tag Collection based on the Manufacturer ID of the tag
            </summary>
            <remarks>The <see cref="M:IDENTEC.ILRGen3.Tags.CompareTagByManufacturerID.Compare(System.Object,System.Object)"/> method expects a <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/> object to be passed as arguments</remarks>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.CompareTagByManufacturerID.Compare(System.Object,System.Object)">
            <summary>
            Compares two <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/> objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare; must be a <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/></param>
            <param name="y">The second object to compare; must be a <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/></param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:IDENTEC.ILRGen3.Tags.CompareTagBySerialNumber">
            <summary>
            An IComparer class used for sorting the a Tag Collection based on the serial number of the tag
            </summary>
            <remarks>The <see cref="M:IDENTEC.ILRGen3.Tags.CompareTagBySerialNumber.Compare(System.String,System.String)"/> method expects a <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/> object to be passed as arguments</remarks>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.CompareTagBySerialNumber.Compare(System.Object,System.Object)">
            <summary>
            Compares two <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/> objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare; must be a <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/></param>
            <param name="y">The second object to compare; must be a <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/></param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.CompareTagBySerialNumber.Compare(System.String,System.String)">
            <summary>
            Compares two <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/> objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare; must be a <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/></param>
            <param name="y">The second object to compare; must be a <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/></param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:IDENTEC.ILRGen3.Tags.ILRGen3TagCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3TagCollection.BinarySearch(IDENTEC.ILRGen3.Tags.ILRGen3Tag)">
            <summary>
            Uses a binary search algorithm to locate a specific element in the sorted TagCollection.
            </summary>
            <param name="tag">The tag to search for.</param>
            <returns>The i of the tag, negative if not found.</returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3TagCollection.BinarySearch(System.Int32,System.Int32,IDENTEC.ILRGen3.Tags.ILRGen3Tag,System.Collections.IComparer)">
            <summary>
                Searches a range of elements in the sorted System.Collections.ArrayList for
                an element using the specified comparer and returns the zero-based index
                of the element.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="tag">The tag.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3TagCollection.#ctor">
            <summary>
            Initializes a new instance of the TagCollection class.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3TagCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the TagCollection class with a specified initial capacity.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3TagCollection.#ctor(IDENTEC.ILRGen3.Tags.ILRGen3TagCollection)">
            <summary>
            Initializes a new instance of the TagCollection class with the items of another TagCollection instance.
            </summary>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3TagCollection.Add(IDENTEC.ILRGen3.Tags.ILRGen3Tag)">
            <summary>
            Adds a new tag to the collection and returns the object.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3TagCollection.CopyTo(IDENTEC.ILRGen3.Tags.ILRGen3Tag[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="i">The i.</param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3TagCollection.IndexOf(IDENTEC.ILRGen3.Tags.ILRGen3Tag)">
            <summary>
            Returns the i of the specified tag.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3TagCollection.Contains(IDENTEC.ILRGen3.Tags.ILRGen3Tag)">
            <summary>
            Query the colletion to see if it contains the specified tag.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3TagCollection.Insert(System.Int32,IDENTEC.ILRGen3.Tags.ILRGen3Tag)">
            <summary>
            Inserts the tag at the specified i.
            </summary>
            <param name="i"></param>
            <param name="tag"></param>
        </member>
        <member name="M:IDENTEC.ILRGen3.Tags.ILRGen3TagCollection.Remove(IDENTEC.ILRGen3.Tags.ILRGen3Tag)">
            <summary>
            Removes the specified tag.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="P:IDENTEC.ILRGen3.Tags.ILRGen3TagCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:IDENTEC.ILRGen3.Tags.ILRGen3Tag"/> with the specified i.
            </summary>
            <value></value>
        </member>
        <member name="T:IDENTEC.Tags.DigitalInputLogging.DigitalInputLog">
            <summary>
            Represents the Digital input log as read from the special i-Q32L tag.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputLog.CreateInputSamples">
            <summary>
            Does the grunt work to convert the raw bytes read from the tag into the 32-bit values they were recorded as
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputLog.#ctor">
            <summary>
            Initializes a new DigitalInputLog.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputLog.ConvertRawToSample(System.UInt32)">
            <summary>
            Converts a raw sample into the according Time/State object.
            </summary>
            <param name="sample">The raw sample value.</param>
            <returns>A LogSample with Time and State information.</returns>                
        </member>
        <member name="P:IDENTEC.Tags.DigitalInputLogging.DigitalInputLog.Wrapped">
            <summary>
            The status of the samples on the log. When it is wrapped it means that the capacity of the log has overflown and older samples have been replaced by newer samples.
            </summary>                
        </member>
        <member name="P:IDENTEC.Tags.DigitalInputLogging.DigitalInputLog.Start">
            <summary>
            The moment the tag was last switched on to monitor digital input events.
            </summary>                
        </member>
        <member name="P:IDENTEC.Tags.DigitalInputLogging.DigitalInputLog.End">
            <summary>
            The moment the tag stopped monitoring digital input events.
            </summary>
            <remarks>If the tag is still logging then the time of reading the log is returned instead.</remarks>                
        </member>
        <member name="P:IDENTEC.Tags.DigitalInputLogging.DigitalInputLog.SampleCount">
            <summary>
            The number of samples recorded in the log; 0 if no events were recorded.
            </summary>				
        </member>
        <member name="P:IDENTEC.Tags.DigitalInputLogging.DigitalInputLog.Samples">
            <summary>
            The collection of samples as read from the tag.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.DigitalInputLogging.DigitalInputLogSample">
            <summary>
            Represents a recorded digital input log sample from the tag's digital input event log.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputLogSample.CompareTo(System.Object)">
            <summary>
            The compare method. Based on the time of the sample.
            </summary>
            <remarks>If the sample times are equal then the state values are compared. Therefore sorting is by time then state.</remarks>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputLogSample.ToString">
            <summary>
            Returns a string representing the time and the state of the recorded sample.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.Tags.DigitalInputLogging.DigitalInputLogSample.SampleTime">
            <summary>
            The time the sample was recorded in the log by the tag. 
            </summary>
            <remarks>The tag has a resolution of 1 second </remarks>
        </member>
        <member name="P:IDENTEC.Tags.DigitalInputLogging.DigitalInputLogSample.SampleState">
            <summary>
            The state of the digital input when the sample was recorded. True = 1 and false = 0.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.DigitalInputLogging.DigitalInputSampleCollection">
            <summary>
            Hosts a collection of DigitalInputLogSample objects.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputSampleCollection.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputSampleCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new DigitalInputSampleCollection with an initial capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputSampleCollection.#ctor(IDENTEC.Tags.DigitalInputLogging.DigitalInputSampleCollection)">
            <summary>
            Initializes a new DigitalInputSampleCollection with another collection.
            </summary>
            <param name="samples"></param>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputSampleCollection.Add(IDENTEC.Tags.DigitalInputLogging.DigitalInputLogSample)">
            <summary>
            Adds a new sample to the collection.
            </summary>
            <param name="sample">The sample to add.</param>
            <returns>The sample added.</returns>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputSampleCollection.Add">
            <summary>
            Adds a new DigitalInputLogSample to the collection.
            </summary>
            <returns>The newly added DigitalInputLogSample</returns>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputSampleCollection.CopyTo(IDENTEC.Tags.DigitalInputLogging.DigitalInputLogSample[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputSampleCollection.IndexOf(IDENTEC.Tags.DigitalInputLogging.DigitalInputLogSample)">
            <summary>
            Indexes the of.
            </summary>
            <param name="sample">The sample.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputSampleCollection.Contains(IDENTEC.Tags.DigitalInputLogging.DigitalInputLogSample)">
            <summary>
            Determines whether [contains] [the specified sample].
            </summary>
            <param name="sample">The sample.</param>
            <returns>
            	<c>true</c> if [contains] [the specified sample]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputSampleCollection.Insert(System.Int32,IDENTEC.Tags.DigitalInputLogging.DigitalInputLogSample)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="sample">The sample.</param>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.DigitalInputSampleCollection.Remove(IDENTEC.Tags.DigitalInputLogging.DigitalInputLogSample)">
            <summary>
            Removes the specified sample.
            </summary>
            <param name="sample">The sample.</param>
        </member>
        <member name="P:IDENTEC.Tags.DigitalInputLogging.DigitalInputSampleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:IDENTEC.Tags.DigitalInputLogging.DigitalInputLogSample"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:IDENTEC.Tags.DigitalInputLogging.TagHasWrongLoggerException">
            <summary>
            The exception that is thrown when a logging operation is performed on a tag that has no or the wrong logging capabilities.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.TagHasWrongLoggerException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.TagHasWrongLoggerException.#ctor(System.String)">
            <summary>
            Constructor containing a message.
            </summary>
            <param name="message">Message detailing the exception source.</param>
        </member>
        <member name="M:IDENTEC.Tags.DigitalInputLogging.TagHasWrongLoggerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.DigitalInputLogging.TagHasWrongLoggerException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:IDENTEC.Readers.iPort3">
             <summary>
             Represents an i-PORT 3 reader controlled remotely.		
             </summary>
             <remarks>
             The i-PORT must be in "host only" mode. See the "configuration" web page on the i-PORT web interface.	
             <para></para>	
            <para>For a static environment or pick-to-light, we recommend the following strategy to ping a tag:</para>
             <list type = "bullet">		
             <item>
            <description>
            Attempt a ping using the antenna that returned the best signal strength from a scan (when scanning on all antennas)
            </description>
            </item>
            <item>
            <description>
            When a ping fails on the antenna that returned the best RSSI, switch to one of the other three antennas
            </description>		
            </item>
             <item>
            <description>
            Continue ping attempts until the ping succeeds
            </description>
            </item>
             <item>
            <description>
            Switch the "best" antenna to the antenna that successfully sent the ping command for subsequent ping attempts (This may not be the same antenna as the antenna reporting the best RSSI)
            </description>
            </item>		 
            </list>		
            </remarks>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.m_byLastSendBuffer">
            <summary>
            The last message buffer that was sent to the reader.
            </summary>
            <remarks>This may be useful for debugging and troubleshooting purposes.</remarks>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.m_ArrayAntennas">
            <summary>
            The internal antenna settings cached locally.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.m_bEnableCallResponseMode">
            <summary>
            The call and response mode; enabled by default
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.IsActiveAntennaValid">
            <summary>
            We use this to check if the antenna is set to "auto select" before single tag communcations. We don't allow this anymore!
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.Dispose">
            <summary>
            Cleans up the socket connection. 
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ToString">
            <summary>
            Overriden to teturn the user-friendly text "i-PORT 3".
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="clearPendingEvents"></param>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.Connect(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <param name="clearPendingEvents"></param>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.Connect(System.String,System.Int32)">
            <summary>
            Connect to the i-PORT 3.
            </summary>
            <param name="hostname"></param>
            <param name="port"></param>
            <remarks>Clears the pending event messages.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <remarks>Clears the pending event messages.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ConnectRS232(System.Int32)">
            <summary>
            Connect to an i-PORT 3 over RS-232. Be sure to set up the i-PORT 3 for a serial connection (SerlHost in the general section of the "configuration" page. Be sure to set the baud rate appropriately.)
            </summary>
            <remarks>The baud rate is set to 115 200.</remarks>
            <param name="port"></param>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.Disconnect">
            <summary>
            Closes the connection to the reader.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.GetMainID">
            <summary>
            The main ID as configured on the i-PORT 3 web interface.
            </summary>
            <returns>The main i-PORT 3 ID.</returns>
            <remarks>The underlying TcpClient object may throw an exception if the connection has been broken.</remarks>			
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error </exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.GetSubID">
            <summary>
            The sub ID as configured on the i-PORT 3 web interface.
            </summary>
            <returns>The sub i-PORT 3 ID.</returns>
            <remarks>The underlying TcpClient object may throw an exception if the connection has been broken.</remarks>			
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error </exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.SetMainID(System.Int32)">
            <summary>
            Sets the main ID of the i-PORT
            </summary>
            <param name="id"></param>
            <remarks>Setting the id is totally optionally.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.SetSubID(System.Int32)">
            <summary>
            Sets the sub ID of the i-PORT
            </summary>
            <param name="id"></param>
            <remarks>Setting the id is totally optionally.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.GetVersion">
            <summary>
            Gets the protocol version, the CPU serial number and some other goodies. Not terribly important at this moment.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.Reset">
             <summary>
             Resets the i-PORT 3. 
            <seealso cref="M:IDENTEC.Readers.iPort3.Disconnect"/>
             </summary>
             <remarks>A reset also disconnects the host from the reader.</remarks>			
             <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
             <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
             <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
             <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error </exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.CommitConfiguration">
            <summary>
            Stores all settings permanently to EEPROM so that it is persistent through power cycling of the device.
            </summary>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error </exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.TestConnection">
            <summary>
            Tests the connection to the i-PORT.
            <seealso cref="P:IDENTEC.Readers.iPort3.TcpClient"/>
            </summary>			
            <returns>true if successful</returns>
            <remarks>The underlying TcpClient object may throw an exception if the connection has been broken.</remarks>			
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error </exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.CalculateCRC(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the CRC that is sent with the message to the i-PORT3
            </summary>
            <param name="byBuffer"></param>
            <param name="nLength"></param>
            <param name="nStartIndex"></param>
            <returns>A string representing the CRC</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.IsCRCValid(System.Byte[],System.Int32)">
            <summary>
            Checks to see if the CRC is valid
            </summary>
            <param name="byBuffer"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReceiveCommand(IDENTEC.Readers.iPort3.FunctionCode,System.Byte[],System.Int32@)">
            <summary>
            Parses the response message
            </summary>
            <param name="fcExpected">The expected function code.</param>
            <param name="byReceiveBuffer">The by receive buffer.</param>
            <param name="nTotalBytesReceived">The n total bytes received.</param>
            <returns>The response code</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.IsFullMessageReceived(System.Int32,System.Byte[],System.Int32@)">
            <summary>
            Inspects the buffer for the carriage return character which ends each message.
            </summary>
            <param name="nCurrentLength">The current amount of data read into the buffer.</param>
            <param name="byBuffer">The buffer to inspect.</param>
            <param name="nMessageLength">Length of the n message.</param>
            <returns>
            True if a full message is found, false if it is still pending.
            </returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ScanForIQTags(System.Int32)">
            <summary>
            Scans the area on the active antennas for i-Q Tags.
            </summary>
            <param name="maxTagsThatCanRespond">The maximum number of tags that can respond.</param>
            <returns>A colletion of tags.</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error </exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ScanForIQTags(System.Int32,System.Boolean)">
            <summary>
            Scans the area on the active antennas for i-Q Tags.
            </summary>
            <param name="maxTagsThatCanRespond">The maximum number of tags that can respond.</param>
            <param name="blink">True to blink the tag's LED (if equipped) immediately following the scan.</param>
            <returns>A colletion of tags.</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error </exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ScanForID2Tags(System.Int32)">
            <summary>
            Scans the area on the active antennas for i-Q Tags.
            </summary>
            <param name="maxTagsThatCanRespond">The maximum number of tags that can respond.</param>
            <returns>A colletion of tags.</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ScanForID2Tags(System.Int32,System.Boolean)">
            <summary>
            Scans the area on the active antennas for i-Q Tags.
            </summary>
            <param name="maxTagsThatCanRespond">The maximum number of tags that can respond.</param>
            <param name="blink">True to blink the tag's LED (if equipped) immediately following the scan.</param>
            <returns>A colletion of tags.</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.SetOutputs(IDENTEC.Readers.iPort3.OutputOption[])">
            <summary>
            Sets the ouputs on the i-PORT 3 according to the specific options.
            </summary>
            <remarks>The timed option has a resolution of .1 seconds.</remarks>
            <param name="outputOptions">An array of 4 OutputOption objects specifying the output settings.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The timed option is set to more than 25 seconds.</exception>	
            <returns>True if successful, false if it fails.</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.GetInputs(System.Boolean[]@,System.Boolean[]@)">
            <summary>
            Gets the inuts on the i-PORT 3.
            </summary>
            <returns>true for success, two arrays reflecting inputs and outputs situation.</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadConfigurationKey(System.String)">
            <summary>
            Reads the configuration key.
            </summary>
            <param name="key">The key to read. See the i-PORT 3 user's guide and config.ini documentation.</param>
            <returns>Returns the value of the key.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadConfigurationKey(System.String,System.String@)">
            <summary>
            Reads the key from the reader and sets the value.
            </summary>
            <param name="strKey">The key to lookup.</param>
            <param name="strValue">The value as returned by the reader.</param>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.WriteConfigurationKey(System.String,System.String)">
            <summary>
            Writes the key/value pair
            </summary>
            <param name="strKey">The key to write.</param>
            <param name="strValue">The value ;)</param>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.GetErrorCodeAsString(IDENTEC.Readers.iPort3.ErrorCode)">
            <summary>
            Converts an error code to a user friendly message.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>An error message.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.WriteConfigKeyAntEnable(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="nAntenna">The antenna number, 5 for antenna W.</param>
            <param name="enable"></param>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.AntennaArgumentOutOfRangeCheck(System.Int32)">
            <summary>
            Sanity check helper
            </summary>
            <param name="antenna"></param>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.EnableAntenna(System.Int32,System.Boolean)">
            <summary>
            Enable/disable the specified antenna.
            </summary>
            <param name="antenna">The antenna to change.</param>
            <param name="enable">True to enable, false to disable.</param>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
            <remarks>Socket and IO exceptions are only possible if while the reader is connected.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.EnableAllAntennas(System.Boolean)">
            <summary>
            Enable/disable all the antennas including the W antenna.
            </summary>
            <param name="enable">True to enable, false to disable.</param>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
            <remarks>Socket and IO exceptions are only possible if while the reader is connected.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.IsAntennaEnabled(System.Int32)">
            <summary>
            Checks to see if the specified antenna is enabled or not.
            </summary>
            <param name="antenna">The antenna to query.</param>
            <returns>True if enabled, false if disabled.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.SetTxPowerForIQTags(System.Int32,System.Int32)">
            <summary>
            Sets the transmission power for communications with i-Q series tags.
            <seealso cref="M:IDENTEC.Readers.iPort3.SetCableLoss(System.Int32,System.Int32)"/>
            </summary>
            <param name="antenna">The antenna to change.</param>
            <param name="dBm">The power level in dBm.</param>
            <remarks>The max output power for transmitting to i-Q tags is 6 dBm. However the actual output can be increased by setting the cable loss. Please refer to the i-PORT 3 user's guide.</remarks>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
            <remarks>Socket and IO exceptions are only possible if while the reader is connected.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.GetTxPowerForIQTags(System.Int32)">
            <summary>
            Gets the current output power of the i-PORT's antenna used for communications with i-Q tags.
            </summary>
            <param name="antenna">The antenna to query.</param>
            <returns>The output power in dBm.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.SetTxPowerForID2Tags(System.Int32,System.Int32)">
            <summary>
            Sets the transmission power for communications with i-D2 series tags.
            </summary>
            <param name="antenna">The antenna to change.</param>
            <param name="dBm">The power level in dBm.</param>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error </exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.GetTxPowerForID2Tags(System.Int32)">
            <summary>
            Gets the current output power of the i-PORT's antenna used for communications with i-D2 tags.
            </summary>
            <param name="antenna">The antenna to query.</param>
            <returns>The output power in dBm.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.EnableRecieveSensitivityForIQTags(System.Int32,System.Boolean)">
            <summary>
            Enable/disable receive sensitivity for i-Q series tags.
            </summary>
            <param name="antenna">The antenna to change.</param>
            <param name="enable">True to enable boost, false to disable.</param>			
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
            <remarks>Socket and IO exceptions are only possible if while the reader is connected.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.GetEnableRecieveSensitivityForIQTags(System.Int32)">
            <summary>
            Gets the state of the receive sensitivity used for i-Q tags for the specified antenna.
            </summary>
            <param name="antenna">The antenna to query.</param>
            <returns>True if the receive boost is on, False if it is off.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.EnableRecieveSensitivityForID2Tags(System.Int32,System.Boolean)">
            <summary>
            Enable/disable receive sensitivity for i-D2 series tags.
            </summary>
            <param name="antenna">The antenna to change.</param>
            <param name="enable">True to enable boost, false to disable.</param>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
            <remarks>Socket and IO exceptions are only possible if while the reader is connected.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.GetEnableRecieveSensitivityForID2Tags(System.Int32)">
            <summary>
            Gets the state of the receive sensitivity used for i-D2 tags for the specified antenna.
            </summary>
            <param name="antenna">The antenna to query.</param>
            <returns>True if the receive boost is on, False if it is off.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.SetReceiveThreshold(System.Int32,System.Int32)">
            <summary>
            Sets the receive threshold such that tags that are detected below the threshold are not reported.
            </summary>
            <param name="antenna">The antenna to change.</param>
            <param name="dBm">The receive threshold in dBm</param>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
            <remarks>Socket and IO exceptions are only possible if while the reader is connected.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.SetCableLoss(System.Int32,System.Int32)">
            <summary>
            Sets the cable loss so that the actual output at the antenna is increased.
            <seealso cref="M:IDENTEC.Readers.iPort3.SetTxPowerForIQTags(System.Int32,System.Int32)"/>
            </summary>
            <remarks>The actual output is tx power + cable loss.</remarks>
            <param name="antenna">The antenna to change.</param>
            <param name="dBm">The cable loss value in dBm.</param>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
            <remarks>Socket and IO exceptions are only possible if while the reader is connected.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.EnableWakeupAntenna(System.Boolean)">
            <summary>
            Enables/disables the wakeup antenna.
            </summary>
            <param name="enable"></param>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
            <remarks>Socket and IO exceptions are only possible if while the reader is connected.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.IsWakeupAntennaEnabled">
            <summary>
            Query to see the enabled status of the wakeup antenna
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.SetTxPowerForIQTagsOnWakeupAntenna(System.Int32)">
            <summary>
            The output power on the wakeup antenna for contacting i-Q tags
            </summary>
            <param name="dbm">The output power.</param>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
            <remarks>Socket and IO exceptions are only possible if while the reader is connected.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.SetTxPowerForID2TagsOnWakeupAntenna(System.Int32)">
            <summary>
            The output power on the wakeup antenna for contacting i-D2 tags
            </summary>
            <param name="dbm">The output power.</param>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
            <remarks>Socket and IO exceptions are only possible if while the reader is connected.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.BlinkTag(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Blink the tag multiple times for "pick to light" use.			
            </summary>
            <remarks>Upon success, the tag will blink <I>blinks</I> times at two blinks per second.</remarks>
            <param name="tag">The tag to blink.</param>
            <param name="blinks">The number of times to blink the tag.</param>
            <returns>true if succesful, false if it fails.</returns>			
            <exception cref="T:System.ArgumentOutOfRangeException">The Active Antenna is set to 0.</exception>				
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>				 
        </member>
        <member name="M:IDENTEC.Readers.iPort3.SleepTagPrivate(IDENTEC.Tags.ResponseTag,System.Int32)">
            <summary>
            Sets the tag into the sleep mode where it does not respond to RF interrogation.
            </summary>
            <param name="tag">The tag to sleep.</param>
            <param name="seconds">The number of seconds to sleep the tag; 255 max.</param>
            <returns>True if successful, false if it fails.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The Active Antenna is set to 0.</exception>				
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.PingTagPrivate(IDENTEC.Tags.ResponseTag)">
            <summary>
            Verifies communications with a tag.
            </summary>
            <param name="tag">The tag to ping.</param>
            <returns>True if successful, false if it fails.</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>		
        </member>
        <member name="M:IDENTEC.Readers.iPort3.PingTag(IDENTEC.Tags.iQTag)">
            <summary>
            Simple communications with a tag. 
            </summary>
            <remarks>As a side effect, the tag will blink its LED if equipped.</remarks>
            <param name="tag">The tag to Ping.</param>
            <returns>True if successful, false if it fails</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.PingTag(IDENTEC.Tags.iD2Tag)">
            <summary>
            Simple communications with a tag. 
            </summary>
            <remarks>As a side effect, the tag will blink its LED if equipped.</remarks>
            <param name="tag">The tag to Ping.</param>
            <returns>True if successful, false if it fails</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.PingTag(IDENTEC.Tags.iD2Tag,System.Boolean)">
            <summary>
            Pings the i-D2 tag with the option of not blinking the tag.
            </summary>
            <param name="tag">The tag to Ping.</param>
            <param name="enableBlink">True to blink the tag, false to disable the blinking of the tag.</param>
            <returns>True if successful, false if it fails</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.WriteTagDataPrivate(IDENTEC.Tags.ResponseTag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            The actual write command.
            </summary>
            <param name="tag">The tag.</param>
            <param name="address">The address.</param>
            <param name="byData">The by data.</param>
            <param name="bytesToWrite">The bytes to write.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadTagDataPrivate(IDENTEC.Tags.ResponseTag,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads the tag data private.
            </summary>
            <param name="tag">The tag.</param>
            <param name="address">The address.</param>
            <param name="bytesToRead">The bytes to read.</param>
            <param name="enableBlink">if set to <c>true</c> [enable blink].</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.WriteTagData(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write data to the tag's EEPROM memory.
            </summary>
            <param name="tag">The tag to write data to.</param>
            <param name="address">The start address to begin writing data at.</param>
            <param name="byData">The data to write.</param>
            <param name="bytesToWrite">The number of bytes to write.</param>		
            <remarks>For i-Q tags, the start address should be 160 or greater. If communications with the tag fails, you can check the number of bytes actually written.</remarks>
            <returns>true if successful, false if it fails</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadTagData(IDENTEC.Tags.iQTag,System.Int32,System.Int32)">
            <summary>
            Reads unformatted data from the tag.
            </summary>
            <param name="tag">The tag to read data from.</param>
            <param name="address">The start address of the requested data.</param>		
            <param name="bytesToRead">The number of bytes to read.</param>		
            <returns></returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)">
            <summary>
            Writes a string to the tag.
            <seealso cref="M:IDENTEC.Readers.iPort3.ReadTagDataString(IDENTEC.Tags.iQTag,System.Int32)"/>
            	<seealso cref="M:IDENTEC.Readers.iPort3.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)"/>
            	<seealso cref="P:System.Text.Encoding.ASCII"/>
            </summary>
            <param name="tag">The tag to write the string to.</param>
            <param name="address">The start address.</param>
            <param name="text">The text to write to the tag.</param>
            <returns>true if successful, false if it fails.</returns>
            <remarks>Only standard ASCII text is valid. Extended characters are not compatible. Uses WriteTagDataWithCRCAndLength</remarks>
            <exception cref="T:System.ArgumentNullException">
            	<I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes data to a tag with a crc and a known length.
            <seealso cref="M:IDENTEC.Readers.iPort3.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            </summary>
            <param name="tag">the tag to write formatted data to.</param>
            <param name="address">The memory address to store the data.</param>
            <param name="byData">The byte array of data.</param>
            <param name="bytesToWrite">The number of bytes to write from <I>byData</I> on to the tag.</param>
            <returns>
            A reference to a TagWriteDataResult object.
            </returns>
            <remarks>A 5 byte header is actually written to the tag at the address specified. If you try to read the data raw at this address, you will read the header. <B>Therefore the actual amount of data you write on the tag is <I>bytesToWrite</I> + 5.</B></remarks>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Reads formatted data off of the tag that was written using WriteTagDataWithCRCAndLength
            </summary>
            <param name="tag"></param>
            <param name="address"></param>					
            <returns></returns>			
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadTagDataString(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Reads a formatted data off of the tag as a string.
            <seealso cref="M:IDENTEC.Readers.iPort3.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            <seealso cref="P:System.Text.Encoding.ASCII"/>
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="address">The memory address on the tag.</param>				
            <returns>A TagReadStringResult object containing the string.</returns>
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <remarks><I>tag</I> must already have formatted string data at the given <I>address</I>.</remarks>			
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.SleepTag(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Sets the tag into a state where it does not respond to any RF for the specified time.
            </summary>
            <param name="tag"></param>
            <param name="seconds">The number of seconds to sleep. Maximum of 255.</param>
            <returns>True if successful, false if it fails.</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.SetTagRangeState(IDENTEC.Tags.iQTag,System.Boolean)">
            <summary>
            Sets the i-Qx tag into extended or normal range mode.
            <seealso cref="P:IDENTEC.Tags.iQTag.Range"/>
            <seealso cref="P:IDENTEC.Tags.iQTag.ReportsBatteryVoltage"/>
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <param name="tag">The i-Qx tag to communicate with.</param>
            <param name="enableExtendedRange">Set to true for extended range, false for normal range.</param>
            <remarks>The extended range state may not be as reliable as normal range for data transfer. <B>If the tag supports reporting battery voltage then a Scan must be performed before the tag will change state.</B></remarks>									
            <returns>true if successful, false if it fails</returns>						
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ToggleTagModes(IDENTEC.Tags.iQTag,System.Byte)">
            <summary>
            Procedure to toggle the logging and sens modes
            </summary>
            <param name="tag"></param>
            <param name="byModeFlag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadiQTagVersion(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the version information from the i-Q tag.
            </summary>
            <param name="tag"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.StartTagLogging(IDENTEC.Tags.iQTag,System.TimeSpan)">
            <summary>Sets <I>tag</I> into the logging mode. If it is already logging the log will clear and restart.
            <seealso cref="M:IDENTEC.Readers.iPort3.StopTagLogging(IDENTEC.Tags.iQTag)"/>
            <seealso cref="M:IDENTEC.Readers.iPort3.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)"/>
            <seealso cref="M:IDENTEC.Readers.iPort3.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
            <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
            </summary>	
            <remarks>The maximum sampling interval of the tag is 65 535 seconds (approx 18 hours).</remarks>
            <param name="tag">The tag to commence logging.</param>
            <param name="samplingRate">The rate at which samples are recorded in the log.</param>			
            <exception cref="T:System.ArgumentOutOfRangeException"><I>samplingRate</I> exceeds 65535 seconds.</exception>	
            <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>		
            <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.StopTagLogging(IDENTEC.Tags.iQTag)">
            <summary>Stops <I>tag</I> from logging.
            <seealso cref="M:IDENTEC.Readers.iPort3.StartTagLogging(IDENTEC.Tags.iQTag,System.TimeSpan)"/>
            <seealso cref="M:IDENTEC.Readers.iPort3.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)"/>
            <seealso cref="M:IDENTEC.Readers.iPort3.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
            <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
            </summary>	
            <remarks>A log does not need to be stopped in order to be read.</remarks>
            <param name="tag">The tag to stop logging.</param>			
            <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
            <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>		
            <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the log off of the tag and converts it to a temperature log.
            <seealso cref="M:IDENTEC.Readers.iPort3.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
            <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
            </summary>			
            <remarks>This method actually calls ReadTagRawLog and does a conversion.</remarks>
            <param name="tag">The tag to read.</param>
            <returns>A TemperatureLogData object containing the sampled data.</returns>
            <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
            <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadTagRawLog(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the log samples as stored on the tag.
            <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The RawLogData object containing the raw samples.</returns>
            <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
            <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadTagLogSamplingInterval(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the log sampling interval off of the tag.
            <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
            </summary>
            <param name="tag">The tag to read.</param>
            <returns>The Timespan representing the logging interval.</returns>	
            <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
            <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadTagTemperatureExtremes(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the highest recorded temperature and lowest recorded temperature as recorded in the temperature log.		
            <seealso cref="T:IDENTEC.Tags.Logging.TemperatureExtremes"/>
            </summary>						
            <remarks>This capability is only available on i-Q temperature tags that support reporting battery percent used.
            </remarks>
            <param name="tag">The tag to contact.</param>			
            <returns>A TemperatureExtremes object.</returns>	
            <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
            <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadLastSampledTemperature(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the last temperature sample logged.
            </summary>
            <param name="tag">The tag to query.</param>
            <returns>The most recently logged TemperatureLogSample.</returns>
            <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
            <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadTagCurrentTemperature(IDENTEC.Tags.iQTag)">
            <summary>
            Forces the temperature tag to report the current temperature even if the tag is not in a logging state.
            </summary>
            <param name="tag">The tag to read the current temperature from.</param>
            <returns>A TemperatureLogSample object containing the temperature and time of the reading.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadiQLTagMarkerInfo(IDENTEC.Tags.iQTag)">
            <summary>
            Reads Marker info off of i-Q tags with the "L" indicator on the label.
            </summary>
            <param name="tag"></param>
            <returns>A Tags.LoopData object.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadIQTagAbsoluteEngineHourCounter(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the total hours logged by the tag (6 minute resolution). <B>For i-Q8C tags only.</B>
            </summary>
            <remarks>The IQ8C has a combined PNP/NPN input to recognise pulses or a high/low status. This input is polled every 2 seconds and when active increments the hour counter in RAM. If the RAM hour counter reaches the value for 6 minutes (1/10 hour), the hour counter in EEPROM is incremented. Also a absolute hour counter(not user writeable) is updated.</remarks>
            <param name="tag">The tag to read from.</param>
            <returns>The total amount of time the engine has been running for.</returns>
            <seealso cref="M:IDENTEC.Readers.iPort3.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)"/>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the user engine counter value from the tag (6 minute resolution). <B>For i-Q8C tags only.</B>
            </summary>
            <param name="tag">The tag to read from.</param>
            <returns>The amount of time the engine has been running for as specified by the user counter.</returns>
            <seealso cref="M:IDENTEC.Readers.iPort3.ReadIQTagAbsoluteEngineHourCounter(IDENTEC.Tags.iQTag)"/>
            <seealso cref="M:IDENTEC.Readers.iPort3.WriteIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag,System.TimeSpan)"/>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.WriteIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag,System.TimeSpan)">
            <summary>
            Writes the specified amount of time to the user/trip hour meter. Typically used to set the time back to zero. <B>For i-Q8C tags only.</B>
            </summary>
            <param name="tag">The tag.</param>
            <param name="ts">The amount of time to reset the user counter to. In a resolution of 6 minutes.</param>
            <remarks>The counter is reported in 6 minute increments (10x per hour). Any value lesser or greater will be rounded.</remarks>
            <seealso cref="M:IDENTEC.Readers.iPort3.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)"/>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadTagDigitalInputEventLog(IDENTEC.Tags.iQTag)">
            <summary>
            Throws a NotSupportedException because the i-PORT 3 does not support this operation.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.StartTagDigitalInputEventLog(IDENTEC.Tags.iQTag)">
            <summary>
            Throws a NotSupportedException because the i-PORT 3 does not support this operation.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.StartTagDigitalInputEventLog(IDENTEC.Tags.iQTag,System.Boolean)">
            <summary>
            Throws a NotSupportedException because the i-PORT 3 does not support this operation.
            </summary>
            <param name="tag"></param>
            <param name="synchronize"></param>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.WriteTagData(IDENTEC.Tags.iD2Tag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write data to the tag's EEPROM memory.
            </summary>
            <param name="tag">The tag to write data to.</param>
            <param name="address">The start address to begin writing data at.</param>
            <param name="byData">The data to write.</param>
            <param name="bytesToWrite">The number of bytes to write.</param>		
            <remarks>For i-Q tags, the start address should be 160 or greater. If communications with the tag fails, you can check the number of bytes actually written.</remarks>
            <returns>true if successful, false if it fails</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadTagData(IDENTEC.Tags.iD2Tag,System.Int32,System.Int32)">
            <summary>
            Reads unformatted data from the tag.
            </summary>
            <param name="tag">The tag to read data from.</param>
            <param name="address">The start address of the requested data.</param>		
            <param name="bytesToRead">The number of bytes to read.</param>		
            <returns>A new TagWriteDataResult object.</returns>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.WriteTagDataString(IDENTEC.Tags.iD2Tag,System.Int32,System.String)">
            <summary>
            Writes a string to the tag.
            <seealso cref="M:IDENTEC.Readers.iPort3.ReadTagDataString(IDENTEC.Tags.iQTag,System.Int32)"/>
            	<seealso cref="M:IDENTEC.Readers.iPort3.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)"/>
            	<seealso cref="P:System.Text.Encoding.ASCII"/>
            </summary>
            <param name="tag">The tag to write the string to.</param>
            <param name="address">The start address.</param>
            <param name="text">The text to write to the tag.</param>
            <returns>A TagReadDataResult object.</returns>
            <remarks>Only standard ASCII text is valid. Extended characters are not compatible. Uses WriteTagDataWithCRCAndLength</remarks>
            <exception cref="T:System.ArgumentNullException">
            	<I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iD2Tag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes data to a tag with a crc and a known length.
            <seealso cref="M:IDENTEC.Readers.iPort3.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            </summary>
            <param name="tag">the tag to write formatted data to.</param>
            <param name="address">The memory address to store the data.</param>
            <param name="byData">The byte array of data.</param>
            <param name="bytesToWrite">The number of bytes to write from <I>byData</I> on to the tag.</param>
            <returns>
            A reference to a TagWriteDataResult object.
            </returns>
            <remarks>A 5 byte header is actually written to the tag at the address specified. If you try to read the data raw at this address, you will read the header. <B>Therefore the actual amount of data you write on the tag is <I>bytesToWrite</I> + 5.</B></remarks>
            <exception cref="T:System.ArgumentNullException">
            	<I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadTagDataWithCRCAndLength(IDENTEC.Tags.iD2Tag,System.Int32)">
            <summary>
            Reads formatted data off of the tag that was written using WriteTagDataWithCRCAndLength
            </summary>
            <param name="tag"></param>
            <param name="address"></param>					
            <returns>A TagWriteDataResult object.</returns>			
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPort3.ReadTagDataString(IDENTEC.Tags.iD2Tag,System.Int32)">
            <summary>
            Reads a formatted data off of the tag as a string.
            <seealso cref="M:IDENTEC.Readers.iPort3.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            	<seealso cref="P:System.Text.Encoding.ASCII"/>
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="address">The memory address on the tag.</param>
            <returns>
            A TagReadStringResult object containing the string.
            </returns>
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <remarks><I>tag</I> must already have formatted string data at the given <I>address</I>.</remarks>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.SessionSetupTag(IDENTEC.Tags.iD2Tag,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets the tag into a sleep mode.
            </summary>
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>	
            <param name="tag">The tag to contact.</param>
            <param name="seconds">The number of seconds to sleep.</param>
            <param name="sleep">Ignored.</param>
            <param name="quiet">Ignored.</param>
            <remarks>The i-PORT 3 only implements sleep functionality with the i-D2 tags. Therefore both sleep and quiet mode options are ignored.</remarks>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iPort3.BlinkTag(IDENTEC.Tags.iD2Tag,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            Invokes the i-D2 tag to blink autonomously by specifying how many blinks and customizing the flashing behavior.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The Active Antenna is set to 0.</exception>				
            <exception cref="T:System.IO.IOException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.IO.IOException">The server closed the connection.</exception>	
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>	
            <exception cref="T:System.Net.Sockets.SocketException">If you receive a SocketException, use SocketException.ErrorCode to obtain the specific error 
            code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</exception>				
            <exception cref="T:System.ArgumentOutOfRangeException">The LED off time exceeds 2.55 seconds.</exception>	
            <exception cref="T:System.ArgumentOutOfRangeException">The blink count exceeds 255 seconds.</exception>	
            <param name="tag">The tag to blink.</param>
            <param name="LEDOn">The amount of time the tag LED is to stay on (in 10ms steps), maximum of 2.55 seconds.</param>
            <param name="LEDOff">The amount of time the tag LED is to stay off (in 10ms steps), maximum of 2.55 seconds. <B>0 for continuous on.</B></param>
            <param name="blinkCount">The number of blinks to perform. O to turn off (if already blinking) and 255 maximum.</param>
            <returns>True if successful, false if it fails</returns>
            <remarks>With continuous on set, the LED on time is repeated for the blink count. For example 2.55 seconds on time x 255 blinks = 650.25 seconds (nearly 11 minutes).</remarks>			
        </member>
        <member name="P:IDENTEC.Readers.iPort3.LastContact">
            <summary>
            The last time the reader was known to be online
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iPort3.Location">
            <summary>
            The location information as defined in the web interface.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iPort3.ActiveAntenna">
            <summary>
            The antenna to transmit a request to the tag(s) on. Set the active antenna to 0 before a scan to scan on all enabled antennas.
            </summary>
            <remarks><B>The active antenna must be set to a specific antenna (1-4) for single tag communications. If not, an ArgumentOutOfRangeException will be thrown.</B></remarks>
        </member>
        <member name="P:IDENTEC.Readers.iPort3.DeviceStatus">
            <summary>
            The error code as reported by the i-PORT3.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iPort3.TcpClient">
            <summary>
            Access the TcpClient member used for TCP communications.
            </summary>
            <remarks>This class library is built for the .NET Compact Framework. Some TcpClient methods are missing in the CF such as delays. You may need to tweak the default settings for your installation.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iPort3.Connected">
            <summary>
            Specifies whether a connection to the reader was made or not.
            </summary>
            <remarks>This property does not get updated until Disconnect is called.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iPort3.Version">
            <summary>
            i-PORT 3 version information.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.iPort3.ErrorCode">
            <summary>
            The status code as returned from the i-PORT 3
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.NotConnected">
            <summary>
            A connection has not been established with the reader.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.OK">
            <summary>
            No error.
            </summary>			
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.IPError">
            <summary>
            IP Address error.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.NoError">
            <summary>
            No Error.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.NAK">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.UnknownCommand">
            <summary>
            The command issued was not understood
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.RangeOrFormat">
            <summary>
            The value passed to the reader is out of range or bad format
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.CommandNotAllowed">
            <summary>
            The command is not allowed
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.Common">
            <summary>
            Internal error
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.CommandNotSupported">
            <summary>
            The command is not supported
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.AntennaNotEnabled">
            <summary>
            The antenna is not enabled
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.TagNotInField">
            <summary>
            The tag could not be detected
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.OperationPartialSuccess">
            <summary>
            The operation failed to complete.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.NoAccessToAddressRange">
            <summary>
            Access to the address specified is not allowed
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.StartAddressOutOfRange">
            <summary>
            The address specified is out of range
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.SelectedTagNotInList">
            <summary>
            The specified tag is not in the reader's list and therefore the reader does not know what antenna to use.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.TagTypeDoesNotSupportOperation">
            <summary>
            The specified tag does not have the capabilities to perform the request
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.LoggerInactive">
            <summary>
            The logger is not enabled
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.TemperatureOutOf256Range">
            <summary>
            The temeperature data is invalid
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.TagCommunicationPermissionDenied">
            <summary>
            Permission denied
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.NoConfigurationKeyWithThisName">
            <summary>
            The selected configuration key is not valid
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.ErrorCode.ConfigurationKeyOutOfBounds">
            <summary>
            The value for configuration key specified is out of range
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.iPort3.FunctionCode">
            <summary>
            The function codes as per the i-PORT III Communications Protocol document
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.iPort3.DetectTagType">
            <summary>
            The Tag detection options for tags.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.iPort3.iPort3Antenna">
            <summary>
            Helper structure to keep track of the antenna settings internally
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.iPort3Antenna.bEnabled">
            <summary>
            Antenna enable
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.iPort3Antenna.niQTxPwr">
            <summary>
            Tx power for i-Q detection
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.iPort3Antenna.niDTxPwr">
            <summary>
            Tx power for i-D2 detection
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.iPort3Antenna.bEnableiQRxSens">
            <summary>
            Enable Rx sens for i-Q signals
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.iPort3Antenna.bEnableiDRxSens">
            <summary>
            Enable Rx sens for i-D2 signals
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.iPort3Antenna.nRxThreshold">
            <summary>
            Rx threshold where tags will be ignored
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.iPort3Antenna.nCableLoss">
            <summary>
            The cable loss value (tx + loss = actual output)
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.iPort3.CachedKeys">
            <summary>
            Cached key-value pairs for the i-PORT 3's config.ini file
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iPort3.CachedKeys.EnableBlinkOnTagData">
            <summary>
            Scan on blink
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iPort3.CachedKeys.detectTagType">
            <summary>
            The detection type
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iPort3.CachedKeys.nSlots">
            <summary>
            The time slots for max number of tags
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.iPort3.OutputSetting">
            <summary>
            The output settings for toggling the digital outputs
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.OutputSetting.Off">
            <summary>
            Turns the output off.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.OutputSetting.On">
            <summary>
            Turns the output on.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.OutputSetting.NoChange">
            <summary>
            The output state is unchanged.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.OutputSetting.Timed">
            <summary>
            Uses the timed option 
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.iPort3.OutputOption">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.OutputOption.setting">
            <summary>
            The output setting.
            <seealso cref="T:IDENTEC.Readers.iPort3.OutputSetting"/>
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.iPort3.OutputOption.elapsedTime">
            <summary>
            Used only when the Timed output setting is used for up to <B>25</B> seconds of on time.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.iPORT3Exception">
            <summary>
            The exception that is thrown when the i-PORT3 cannot perform the requested operation.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iPORT3Exception.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iPORT3Exception.#ctor(System.String)">
            <summary>
            Constructor containing a message.
            </summary>
            <param name="message">Message detailing the exception source.</param>
        </member>
        <member name="M:IDENTEC.Readers.iPORT3Exception.#ctor(System.String,IDENTEC.Readers.iPort3.ErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Readers.iPORT3Exception"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:IDENTEC.Readers.iPORT3Exception.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message and a reference to the inner 
            exception that is the cause of this exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The inner exception reference.</param>
        </member>
        <member name="P:IDENTEC.Readers.iPORT3Exception.ErrorCode">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.ModularReaderBus">
            <summary>
            Represents a communications bus over TCP or serial for modular readers.
            </summary>
            <seealso cref="T:IDENTEC.iBusAdapter"/>
            <seealso cref="P:IDENTEC.Readers.ModularReaderBus.DataStream"/>
        </member>
        <member name="F:IDENTEC.Readers.ModularReaderBus.MaxReadersAllowedOnDaisyChain">
            <summary>
            The maximum number of readers allowed on the bus.
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.ModularReaderBus.m_Readers">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.ModularReaderBus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Readers.ModularReaderBus"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.ModularReaderBus.ConnectSerial(System.Int32)">
            <summary>
            Opens a serial connection at 115200bps.
            </summary>
            <param name="port">The COM: port to connect to.</param>
            <returns>True if successful, false if it fails.</returns>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the iCard is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            </exception>	
            <remarks>Connects at 115200 bps</remarks>
        </member>
        <member name="M:IDENTEC.Readers.ModularReaderBus.ConnectSerial(System.Int32,System.Int32)">
            <summary>
            Opens a serial connection at a specific baud rate.
            </summary>
            <param name="port">The COM: port to connect to.</param>
            <param name="baudRate">The specified baudrate</param>
            <returns></returns>
            <remarks>Unless you have special firmware, the baud rate will be 115200 bps</remarks>
        </member>
        <member name="M:IDENTEC.Readers.ModularReaderBus.ConnectTCP(System.String,System.Int32)">
            <summary>
            Connects to the daisy chained modular readers.
            </summary>
            <param name="hostName">The host name on the network or IP address.</param>
            <param name="port">The port number the host is configured to use.</param>
            <remarks>The i-PORT R2 does not natively support TCP but if you have a device on the network that converts TCP to serial (and vice versa) then you can use that instead. For example, see www.digi.com for products for wired and wireless solutions.  The Connect method will block until it either connects or fails. Note: If you receive a <B>SocketException</B>, use <B>SocketException.ErrorCode</B> to obtain the specific error code. Once you have obtained this code, you can refer to the Windows Socket Version 2 API error code documentation in MSDN for a detailed description of the error.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:System.ArgumentNullException">The <I>hostName</I> argument is null.</exception>	
            <exception cref="T:System.ObjectDisposedException">The underlying Socket is closed.</exception>					
        </member>
        <member name="M:IDENTEC.Readers.ModularReaderBus.Disconnect">
            <summary>
            Closes the communications bus. 
            </summary>
            <returns></returns>
            <remarks>No operations are performed directly on the i-PORT R2 readers during disconnect. Only the connection is closed.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.ModularReaderBus.EnumerateReaders">
            <summary>
            Discovers modular readers available on the bus.
            </summary>
            <returns>An array of modular readers reprsenting the daisy chained readers.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.ModularReaderBus.EnumerateReaders(System.TimeSpan)">
            <summary>
            Enumerates the readers.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.ModularReaderBus.EnumerateReaders(System.TimeSpan,System.Int32)">
            <summary>
            Discovers modular readers available on the bus.
            </summary>
            <param name="timeout">The timeout for discovering the last reader on the bus.</param>
            <param name="maxDevices">The maximum number of devices to enumerate. -1 for unlimited.</param>
            <returns>An array of modular readers reprsenting the daisy chained readers.</returns>
            <remarks>It is not advisable to mix MB/R2 readers with MQ readers on the same bus.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.ModularReaderBus.SendDisconnectDaisyChainMessage">
            <summary>
            Broadcasts the disconnect message to all the readers on the chain. There is no response.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.ModularReaderBus.Connected">
            <summary>
            Established connection property
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.ModularReaderBus.DataStream">
            <summary>
            Associate a user defined transport data stream for communications
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.ModularReaderBus.Socket">
            <summary>
            The underlying socket that is used for TCP communications.
            </summary>            
        </member>
        <member name="P:IDENTEC.Readers.ModularReaderBus.CommunicationsTimeout">
            <summary>
            The timeout for communications in ms between receiving bytes.
            </summary>
            <remarks>i-PORT MQ uses this value only for initialization calls.</remarks>
        </member>
        <member name="T:IDENTEC.Readers.iPortMQ">
            <summary>
            Implements functionality for a MQ reader.
            </summary>
            <remarks>The MQ reader communication occurs through a connected ModularReaderBus object.</remarks>        
            <seealso cref="T:IDENTEC.iBusAdapter"/>
            <seealso cref="T:IDENTEC.DataStream"/>
        </member>
        <member name="F:IDENTEC.Readers.iPortMQ.m_iCard3">
            <summary>
            We take the same approach as an i-CARD CF and all the grunt work is done through an i-CARD 3 object
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.#ctor(IDENTEC.Readers.ModularReaderBus)">
            <summary>
            Default constructor
            </summary>
            <param name="comm"></param>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.#ctor(IDENTEC.iBusAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Readers.iPortMQ"/> class.
            </summary>
            <param name="iBus">The i bus.</param>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.SetComBusAddress">
            <summary>
            We use this to ensure that the protocol is using the correct reader on the bus.
            </summary>
            <remarks>You must call this before any call to the reader or else the wrong reader may be addressed on the bus.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.Initialize">
            <summary>
            Gets the frequency, the serial number, etc from the MQ's EEPROM
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ScanForIQTags(System.Int32)">
            <summary>
            Scan the area for i-Q type tags.
            <seealso cref="P:IDENTEC.Readers.iCard.Region"/>
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>			
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>	
            <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>
            <returns>true if successful, false if it fails.</returns>
            <remarks>If no tags are detected, the arraylist will contain 0 tags.</remarks>
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ScanForIQTags(System.Int32,System.Boolean)">
             <summary>
             Scan the area for i-Q type tags.
            <seealso cref="P:IDENTEC.Readers.iCard.Region"/>
             </summary>
             <example>
             This example shows how to connect to an i-CARD 3 and scan for tags at a high power. <B>[C#]:</B>
             <code>
            			using IDENTEC.Readers;
            			using IDENTEC.Tags;
            
            			class NewTest
            			{
            				public static void Main()
            				{
            					iCard3 myReader = new iCard3();
            					try
            					{
            						if (myReader.Connect())
            						{
            							// Set the transmission power to be high so that we detect tags at a fair distance
            							myReader.TxPowerIQ = 6;
            							// Scan for up to 64 tags; allow them to blink when they respond
            							TagCollection tags = myReader.ScanForIQTags(64, true);
            							// Sort the tags numerically
            							tags.Sort();
            							Console.WriteLine(tags.Count + " tags detected during scan:");
            							foreach (Tag t in tags)
            							{
            								Console.WriteLine(t.Number);
            							}
            						}
            					}
            					catch (Exception ex)
            					{
            						Console.WriteLine(ex);
            					}            
            				}
            			}			
             </code>
             <B>Output</B>			
             <code>
            			22 tags detected during scan:
            			208753
            			209648
            			330205
            			369021
            			369027
            			369938
            			380008
            			200055865
            			200066462
            			200071726
            			200072219
            			200074601
            			200074604
            			200074606
            			200074607
            			200074617
            			200074630
            			200081930
            			200081940
            			200081996
            			220000800
            			220000821
             </code>
             </example>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>			
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>		
             <param name="maxTagsThatCanRespond">The number of tags anticipated. The larger the number, the longer the scan time.</param>
             <param name="blink">When set to true the tags detected in the scan will blink.</param>
             <returns>true if successful, false if it fails.</returns>
             <remarks>If no tags are detected, the arraylist will contain 0 tags.</remarks>
             <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.WriteTagData(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write data to the tag's EEPROM memory.
            </summary>
            <param name="tag">The tag to write data to.</param>
            <param name="address">The start address to begin writing data at.</param>
            <param name="byData">The data to write.</param>
            <param name="bytesToWrite">The number of bytes to write.</param>		
            <remarks>For i-Q tags, the start address should be 160 or greater. If communications with the tag fails, you can check the number of bytes actually written.</remarks>
            <returns>true if successful, false if it fails</returns>
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadTagData(IDENTEC.Tags.iQTag,System.Int32,System.Int32)">
            <summary>
            Reads unformatted data from the tag.
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <param name="tag">The tag to read data from.</param>
            <param name="address">The start address of the requested data.</param>		
            <param name="bytesToRead">The number of bytes to read.</param>		
            <returns></returns>
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)">
             <summary>
             Writes a string to the tag.
             <seealso cref="M:IDENTEC.Readers.iPortMQ.ReadTagDataString(IDENTEC.Tags.iQTag,System.Int32)"/>
             <seealso cref="M:IDENTEC.Readers.iPortMQ.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)"/>	
             <seealso cref="P:System.Text.Encoding.ASCII"/>				 				
             </summary>
             <example>This example shows how to write and read text data with tags <B>[C#]:</B>
             <code>
            	using System;
            	using System.Diagnostics;
            	using System.Collections;
            	using IDENTEC.Readers;
            	using IDENTEC.Tags;
            
            	namespace Read_and_Write_Tag_Data
            			  {
            	class ExampleReadWriteTags
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			iCard3 myReader = new iCard3();
            			// Since we are doing a lot of communications, set the card retries high
            			myReader.Retries = 4;			
            			try
            			{
            				if (myReader.Connect())
            				{
            					// Set the transmission power to be high
            					myReader.TxPowerIQ = 6;
            					// Scan for up to 32 tags; no blink during scan
            					TagCollection tags = myReader.ScanForIQTags(32, false);
            					// Sort the tags numerically
            					tags.Sort();					
            			
            					ArrayList phrases = new ArrayList();
            					phrases.Add("You say yes");
            					phrases.Add("I say no");
            					phrases.Add("You say stop");
            					phrases.Add("And I say go go go");
            					phrases.Add("You say goodbye");
            					phrases.Add("And I say hello");
            					phrases.Add("Hello hello");
            					Random rand = new Random();
            					TagCollection successfulTags = new TagCollection();
            
            					foreach (iQTag t in tags)
            					{
            						if (phrases.Count == 0)
            							break;
            						try
            						{
            							int i = rand.Next(0, phrases.Count -1);
            							TagWriteDataResult writeResult =
            								myReader.WriteTagDataString(t, 200, phrases[i] as string);
            							if (writeResult.Success)
            							{
            								//remove the phrase so that each tag has something unique to say
            								phrases.RemoveAt(i);
            								successfulTags.Add(t);
            							}
            						}
            						catch (iCardCommunicationsException ex)
            						{
            							Console.WriteLine("An error occured communicating with the i-CARD: " + ex.Message);
            						}
            						catch (Exception ex)
            						{
            							Console.WriteLine("An error occured: " + ex.Message);
            						}						
            					}					
            
            					foreach (iQTag t in successfulTags)
            					{
            						TagReadStringResult readResult = myReader.ReadTagDataString(t, 200);
            						if (readResult.Success)
            							Console.WriteLine(t.ToString() + ": " + readResult.Text);
            					}
            				}
            			}
            			catch (Exception ex)
            			{
            				Console.WriteLine(ex);
            			} 
            			Console.WriteLine("Press ENTER to continue...");
            			Console.ReadLine();
            		}
            	}
            }
            </code>
            <B>Output:</B>
            <code>
            208753: You say goodbye
            209648: You say stop
            369021: I say no
            369027: And I say hello
            383261: And I say go go go
            200066114: You say yes
            230001047: Hello hello
            Press ENTER to continue...
            </code>
             </example>			
             <param name="tag">The tag to write the string to.</param>
             <param name="address">The start address.</param>
             <param name="text">The text to write to the tag.</param>		
             <returns>true if successful, false if it fails.</returns>
             <remarks>Only standard ASCII text is valid. Extended characters are not compatible. Uses WriteTagDataWithCRCAndLength</remarks>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <exception cref="T:System.ArgumentNullException"> <I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>	
             <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.WriteTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes data to a tag with a crc and a known length.
            <seealso cref="M:IDENTEC.Readers.iPortMQ.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            </summary>
            <param name="tag">the tag to write formatted data to.</param>
            <param name="address">The memory address to store the data.</param>
            <param name="byData">The byte array of data.</param>
            <param name="bytesToWrite">The number of bytes to write from <I>byData</I> on to the tag.</param>		
            <returns>A reference to a TagWriteDataResult object.</returns>
            <remarks>A 5 byte header is actually written to the tag at the address specified. If you try to read the data raw at this address, you will read the header. <B>Therefore the actual amount of data you write on the tag is <I>bytesToWrite</I> + 5.</B></remarks>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <exception cref="T:System.ArgumentNullException"> <I>text</I> is a null reference (<B>Nothing</B> in Visual Basic).</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadTagDataWithCRCAndLength(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Reads formatted data off of the tag that was written using WriteTagDataWithCRCAndLength
            </summary>
            <param name="tag"></param>
            <param name="address"></param>					
            <returns></returns>			
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            </exception>
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadTagDataString(IDENTEC.Tags.iQTag,System.Int32)">
            <summary>
            Reads a formatted data off of the tag as a string.
            <seealso cref="M:IDENTEC.Readers.iPortMQ.WriteTagDataString(IDENTEC.Tags.iQTag,System.Int32,System.String)"/>
            <seealso cref="P:System.Text.Encoding.ASCII"/>
            </summary>
            <param name="tag">The tag to read.</param>
            <param name="address">The memory address on the tag.</param>				
            <returns>A TagReadStringResult object containing the string.</returns>
            <exception cref="T:IDENTEC.Tags.TagDataException"><I>tag</I> does not contain formatted data.</exception>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
             to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
            </exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <remarks><I>tag</I> must already have formatted string data at the given <I>address</I>.</remarks>			
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.BlinkTag(IDENTEC.Tags.iQTag,System.Int32)">
             <summary>
             Some versions of iQ based tags support a periodic blink command.	
            <seealso cref="M:IDENTEC.Readers.iPortMQ.PingTag(IDENTEC.Tags.iQTag)"/>
             </summary>
             <remarks>The tag will blink every 500ms for the specified count.</remarks>
             <param name="tag">The tag to blink.</param>
             <param name="blinkCount">The nunber of blinks. 255 maximum.</param>
             <returns>True if successful, false if it fails.</returns>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.
             </exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException"><I>blinkCount</I> exceeds the maximum 255 blinks allowed.</exception>			
             <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.SleepTag(IDENTEC.Tags.iQTag,System.Int32)">
             <summary>
             Sets the tag into a state where it does not respond to any RF for the specified time.
             </summary>
             <example>
             <B>[C#]</B>
             <code>
            	using System;
            	using IDENTEC.Readers;
            	using IDENTEC.Tags;
            		
            	namespace ScanAndSleep
            	{
            	class NewTest
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			iCard3 myReader = new iCard3();
            			try
            			{
            				if (myReader.Connect())
            				{
            					/// Set the transmission power to be high so that we detect tags at a medium distance
            					myReader.TxPowerIQ = 0;
            					/// Scan for up to 32 tags; no blink during scan
            					TagCollection tags = myReader.ScanForIQTags(32, false);
            					/// Sort the tags numerically
            					tags.Sort();
            					Console.WriteLine(tags.Count + " tags detected during scan:");
            							/// Bump up the transmission power a bit in case the tag is moving away from the reader
            					myReader.TxPowerIQ = 3;
            					foreach (iQTag t in tags)
            					{
            						try
            						{
            							if (myReader.SleepTag(t, 30))
            							{
            								Console.WriteLine("Tag " + t.Number + " now sleeping for 30 seconds");
            							}
            							else
            							{
            								Console.WriteLine("Could not sleep tag " + t.Number + ". Reason: " 
            									+ myReader.DeviceStatus);
            							}
            						}
            						catch (iCardCommunicationsException ex)
            						{
            							Console.WriteLine("An error occured communicating with the i-CARD: " + ex.Message);
            						}
            						catch (Exception ex)
            						{
            							Console.WriteLine("An error occured: " + ex.Message);
            						}						
            					}
            				}
            			}
            			catch (Exception ex)
            			{
            				Console.WriteLine(ex);
            			} 
            		}
            	}
            }
            </code>
            <B>Output</B>
            	<code>
            	4 tags detected during scan:
            	Tag 369021 now sleeping for 30 seconds
            	Tag 369027 now sleeping for 30 seconds
            	Tag 380008 now sleeping for 30 seconds
            	Tag 200074689 now sleeping for 30 seconds			
            </code>
             </example>
             <param name="tag"></param>
             <param name="seconds">The number of seconds to sleep. Maximum of 255.</param>
             <returns>True if successful, false if it fails.</returns>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.PingTag(IDENTEC.Tags.iQTag)">
             <summary>
             Contact a tag. If the tag is equipped with an LED, it will blink as a side effect.			
             <seealso cref="M:IDENTEC.Readers.iPortMQ.BlinkTag(IDENTEC.Tags.iQTag,System.Int32)"/>
             </summary>
             <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
             <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
             </exception>
             <example> This example shows how to connect to an i-CARD and contact an IQ tag without scanning first and then displays the tag's state information. <B>[C#]</B>
             <code>
            using System;
            using IDENTEC.Readers;
            using IDENTEC.Tags;
            
            
            namespace iCardConnectAndPingTag
            {
            	class NewTest
            	{
            		[STAThread]
            		static void Main(string[] args)
            		{
            			if (args.Length == 0)
            			{
            				Console.WriteLine("You must specify a tag number to ping");
            			}
            			else
            			{				
            				try
            				{
            					uint id = uint.Parse(args[0]);
            					iCard3 myReader = new iCard3();
            					if (myReader.Connect())
            					{
            						iQTag tag = new iQTag(id);
            						if (myReader.PingTag(tag))
            						{
            							Console.WriteLine("Tag info: ");
            							Console.WriteLine("ID: " + tag.Number.ToString());
            							Console.WriteLine("Model: " +  tag.ModelType.ToString());
            							if (iQTag.LoggerInstalledState.Available == tag.LoggerInstalled)
            							{
            								Console.WriteLine("Logging State: " + tag.Logging.ToString());
            							}
            							Console.WriteLine("Range State: " + tag.Range);
            							if (tag.BatteryPercent)
            							{
            								Console.WriteLine(tag.BatteryPercentUsed.ToString() + "% of battery consumed"); 
            							}
            						}
            					}
            					else
            					{
            						Console.WriteLine("Error reading card: " + myReader.DeviceStatus);
            					}
            				}
            				catch (Exception ex)
            				{
            					Console.WriteLine("An exception was thrown : " + ex);
            				}
            			}
            			Console.WriteLine("Press Enter to continue...");
            			Console.ReadLine();                
            		}
            	}
            }
            
            </code>
            <B>Output:</B>
            <code>
            Tag info:
            ID: 200074790
            Model: IQ8N
            Range State: NormalRange
            11% of battery consumed
            Press Enter to continue...
            </code>
             </example>
             <param name="tag"></param>
             <returns>true if successful, false if communication cannot be established.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.SetTagRangeState(IDENTEC.Tags.iQTag,System.Boolean)">
            <summary>
            Sets the i-Qx tag into extended or normal range mode.
            <seealso cref="P:IDENTEC.Tags.iQTag.Range"/>
            <seealso cref="P:IDENTEC.Tags.iQTag.ReportsBatteryVoltage"/>
            </summary>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected to fails.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>	
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. The host did not receive a response from the reader within the expected timeframe.
            </exception>
            <param name="tag">The i-Qx tag to communicate with.</param>
            <param name="enableExtendedRange">Set to true for extended range, false for normal range.</param>
            <remarks>The extended range state may not be as reliable as normal range for data transfer. <B>If the tag supports reporting battery voltage then a Scan must be performed before the tag will change state.</B></remarks>									
            <returns>true if successful, false if it fails</returns>						
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadiQTagVersion(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the version information from the i-Q tag.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadTagCurrentTemperature(IDENTEC.Tags.iQTag)">
            <summary>
            Forces the temperature tag to report the current temperature even if the tag is not in a logging state.
            </summary>
            <param name="tag">The tag to read the current temperature from.</param>
            <returns>A TemperatureLogSample object containing the temperature and time of the reading.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.StartTagLogging(IDENTEC.Tags.iQTag,System.TimeSpan)">
             <summary>Sets <I>tag</I> into the logging mode. If it is already logging the log will clear and restart.
             <seealso cref="M:IDENTEC.Readers.iPortMQ.StopTagLogging(IDENTEC.Tags.iQTag)"/>
             <seealso cref="M:IDENTEC.Readers.iPortMQ.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="M:IDENTEC.Readers.iPortMQ.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>	
             <remarks>The maximum sampling interval of the tag is 65 535 seconds (approx 18 hours).</remarks>
             <param name="tag">The tag to commence logging.</param>
             <param name="samplingRate">The rate at which samples are recorded in the log.</param>			
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:System.ArgumentOutOfRangeException"><I>samplingRate</I> exceeds 65535 seconds.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>						
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.StopTagLogging(IDENTEC.Tags.iQTag)">
             <summary>Stops <I>tag</I> from logging.
             <seealso cref="M:IDENTEC.Readers.iPortMQ.StartTagLogging(IDENTEC.Tags.iQTag,System.TimeSpan)"/>
             <seealso cref="M:IDENTEC.Readers.iPortMQ.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="M:IDENTEC.Readers.iPortMQ.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>	
             <remarks>A log does not need to be stopped in order to be read.</remarks>
             <param name="tag">The tag to stop logging.</param>			
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>				
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadTagTemperatureLog(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the log off of the tag and converts it to a temperature log.
             <seealso cref="M:IDENTEC.Readers.iPortMQ.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>			
             <remarks>This method actually calls ReadTagRawLog and does a conversion.</remarks>
             <param name="tag">The tag to read.</param>
             <returns>A TemperatureLogData object containing the sampled data.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadTagRawLog(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the log samples as stored on the tag.
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>
             <param name="tag">The tag to read.</param>
             <returns>The RawLogData object containing the raw samples.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadTagLogSamplingInterval(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the log sampling interval off of the tag.
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>
             <param name="tag">The tag to read.</param>
             <returns>The Timespan representing the logging interval.</returns>	
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadTagTemperatureExtremes(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the highest recorded temperature and lowest recorded temperature as recorded in the temperature log.		
             <seealso cref="T:IDENTEC.Tags.Logging.TemperatureExtremes"/>
             </summary>						
             <remarks>This capability is only available on i-Q temperature tags that support reporting battery percent used.
             </remarks>
             <param name="tag">The tag to contact.</param>			
             <returns>A TemperatureExtremes object.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadLastSampledTemperature(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the last temperature sample logged.
             </summary>
             <param name="tag">The tag to query.</param>
             <returns>The most recently logged TemperatureLogSample.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.InvalidTagOperationException"><I>tag</I> is not currently logging.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.StartTagDigitalInputEventLog(IDENTEC.Tags.iQTag)">
            <summary>
            Sets <I>tag</I> into the logging mode at digital input. If it is already logging the log will clear and restart.
            <seealso cref="M:IDENTEC.Readers.iPortMQ.StopTagLogging(IDENTEC.Tags.iQTag)"/>
            	<seealso cref="M:IDENTEC.Readers.iPortMQ.ReadTagDigitalInputEventLog(IDENTEC.Tags.iQTag)"/>            
            	<seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
            </summary>
            <param name="tag">The tag to commence logging.</param>
            <remarks>TagInternal quartz is accurate for approx 1 year.</remarks>
            <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
            to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader.
            The host did not receive a response from the reader within the expected timeframe.</exception>
            <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of starting a log.</exception>
            <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> does not have logging capability.</exception>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.StartTagDigitalInputEventLog(IDENTEC.Tags.iQTag,System.Boolean)">
            <summary>
            Starts the tag digital input event log.
            </summary>
            <param name="tag">The tag.</param>
            <param name="synchronize">if set to <c>true</c> [synchronize].</param>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadTagDigitalInputEventLog(IDENTEC.Tags.iQTag)">
             <summary>
             Reads the InputEvent log off of the tag.
             <seealso cref="M:IDENTEC.Readers.iPortMQ.ReadTagRawLog(IDENTEC.Tags.iQTag)"/>
             <seealso cref="P:IDENTEC.Tags.iQTag.LoggerInstalled"/>
             </summary>			
             <remarks>This method actually calls ReadTagRawInp and does a conversion.</remarks>
             <param name="tag">The tag to read.</param>
             <returns>A InputLogData object containing the sampled data.</returns>
              <exception cref="T:IDENTEC.CommPortException">Thrown when reading/writing the communications port that the i-CARD is connected
              to fails.</exception>
            <exception cref="T:IDENTEC.Readers.iCardCommunicationsException">Low level communications error with the reader.</exception>
            <exception cref="T:IDENTEC.Readers.iCardTimeoutException">Low level communications timeout with the reader. 			
             The host did not receive a response from the reader within the expected timeframe.</exception>			
             <exception cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"><I>tag</I> none or wrong logging capabilities.</exception>	
             <exception cref="T:IDENTEC.Tags.PartialTagCommunicationsException"><I>tag</I> did not complete the process of reading a log.</exception>	
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadiQLTagMarkerInfo(IDENTEC.Tags.iQTag)">
            <summary>
            Reads Marker info off of i-Q tags with the "L" indicator on the label.
            </summary>
            <param name="tag"></param>
            <returns>A Tags.LoopData object.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadIQTagAbsoluteEngineHourCounter(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the total hours logged by the tag (6 minute resolution). <B>For i-Q8C tags only.</B>
            </summary>
            <remarks>The IQ8C has a combined PNP/NPN input to recognise pulses or a high/low status. This input is polled every 2 seconds and when active increments the hour counter in RAM. If the RAM hour counter reaches the value for 6 minutes (1/10 hour), the hour counter in EEPROM is incremented. Also a absolute hour counter(not user writeable) is updated.</remarks>
            <param name="tag">The tag to read from.</param>
            <returns>The total amount of time the engine has been running for.</returns>
            <seealso cref="M:IDENTEC.Readers.iPortMQ.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)"/>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)">
            <summary>
            Reads the user engine counter value from the tag (6 minute resolution). <B>For i-Q8C tags only.</B>
            </summary>
            <param name="tag">The tag to read from.</param>
            <returns>The amount of time the engine has been running for as specified by the user counter.</returns>
            <seealso cref="M:IDENTEC.Readers.iPortMQ.ReadIQTagAbsoluteEngineHourCounter(IDENTEC.Tags.iQTag)"/>
            <seealso cref="M:IDENTEC.Readers.iPortMQ.WriteIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag,System.TimeSpan)"/>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.WriteIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag,System.TimeSpan)">
            <summary>
            Writes the specified amount of time to the user/trip hour meter. Typically used to set the time back to zero. <B>For i-Q8C tags only.</B>
            </summary>
            <param name="tag">The tag.</param>
            <param name="ts">The amount of time to reset the user counter to. In a resolution of 6 minutes.</param>
            <remarks>The counter is reported in 6 minute increments (10x per hour). Any value lesser or greater will be rounded.</remarks>
            <seealso cref="M:IDENTEC.Readers.iPortMQ.ReadIQTagUserEngineHourCounter(IDENTEC.Tags.iQTag)"/>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ToString">
            <summary>
            Overriden to show <I>i-PORT T2</I>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.GetStatus">
            <summary>
            Gets the status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.GetBusAddress">
            <summary>
            Gets the bus address.
            </summary>
            <returns>The address.</returns>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.SetBusAddress(System.Int32)">
            <summary>
            Sets the bus address.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ConnectSlavePort(System.Boolean)">
            <summary>
            Connects the slave port.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="M:IDENTEC.Readers.iPortMQ.ResetToFactoryDefault">
            <summary>
            This command reset all parameters to default configuration.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.Retries">
            <summary>
            The number of retries the i-CARD 3 attempts when RF communications with a tag fails.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When the value is set to less than 1 or more than 255.
            </exception>		
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.MaxOutputdBm">
            <summary>
            The maximum dBm allowable to transmit as dictated by the card's firmware.
            </summary>
            <remarks>This value is read from the card during the connection routine.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.MinOutputdBm">
            <summary>
            The minimum transmission level the card can output.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.EnableTagLogDataProtection">
            <summary>
            Enables/Disables the protection of log data from accidental overwrites
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.DeviceStatus">
            <summary>
            The error code as returned by the hardware. It is reset with each call to the card and may provide additional 
            </summary>
            <remarks>This is the <B><I>device error code</I></B> message as returned directly from the card's low level communications with the tag(s). If there are no problems then OK is returned.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.EnableWakeupTagsDuringScan">
            <summary>
            When enabled the tags are sent a wakeup call during scan. The default value is true.
            </summary>
            <remarks>This is an advanced property. Disabling this property is not recommended and requires intimate knowledge of the solution and timing.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.EnableChangeICSessionAddressDuringScan">
            <summary>
            When enabled the session address is changed by the card for each scan. The default value is true.
            </summary>
            <remarks>This is an advanced property. Disabling this property is not recommended and requires intimate knowledge of the solution.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.TxPowerIQ">
            <summary>
            The RF transmission level for communications with i-Q tags			
            <seealso cref="P:IDENTEC.Readers.iPortMQ.MinOutputdBm"/>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when attempting to set the power beyond the allowed range.</exception>						
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.EnableReceiveBoost">
            <summary>
            The RF receive boost. Enabling makes the card more sensitive to RF signals from tags. The default value is true.
            </summary>
            <remarks>It is only necessary to disable this property when close communications with tags is necessary.</remarks>
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.Information">
            <summary>
            The information string as returned by the reader during initialization
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.Antenna">
            <summary>
            The antenna to work with.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.Region">
            <summary>
            The RF frequency. Set this to NA (916.5MHz) or European (868MHz). 
            <seealso cref="P:IDENTEC.Tags.Tag.Region"/>
            </summary>		
            <exception cref="T:IDENTEC.Readers.RegionException">Thrown when the region specified is incompatible.</exception>				
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.SerialNumber">
            <summary>
            The unique serial number of the reader
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iPortMQ.MinReceivedBm">
            <summary>
            The minimum signal strength the card will report after communications with a tag
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.iQTag">
            <summary>
            Represents an i-Qx tag for tag interactions.	
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.iQTag.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.iQTag.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.iQTag"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:IDENTEC.Tags.iQTag.#ctor(IDENTEC.Tags.iQTag)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.iQTag"/> class.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="P:IDENTEC.Tags.iQTag.Logging">
            <summary>
            Specifies whether the tag logging is enabled/disabled or interderminate.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.iQTag.Range">
            <summary>
            The range state of the tag.
            </summary>			
        </member>
        <member name="P:IDENTEC.Tags.iQTag.LoggerInstalled">
            <summary>
            One of the LoggerInstalledState enumeration values. The default value is Indeterminate.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.iQTag.ModelType">
             <summary>
             The i-Q tag Model type.
             </summary>
            [CLSCompliant(false)] 
        </member>
        <member name="P:IDENTEC.Tags.iQTag.BatteryPercentConsumed">
            <summary>
            Reports how much of the battery has already been consumed (0...127%).
            </summary>
            <remarks>This property is not available if the tag was contact via i-PORT 3.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.iQTag.DataCapacity">
            <summary>
            Returns the maximum data size of the tag provided single tag communication has occured
            </summary>
            <remarks>The actual tag Model type is not known during a scan unless the tag is set to blink during this operation</remarks>
        </member>
        <member name="P:IDENTEC.Tags.iQTag.MinDataWriteAddress">
            <summary>
            The minimum address where data can be written to the tag.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.iQTag.ReportsBatteryVoltage">
            <summary>
            Older i-Q tags report a battery voltage.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.iQTag.ReportsBatteryPercentConsumed">
            <summary>
            Newer tags report a percentage consumed.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.iQTag.RangeState">
            <summary>
            Specifies the range state of a tag. It can be ExtendedRange, NormalRange, or Indeterminate.						
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.RangeState.Indeterminate">
            <summary>
            The sensitivity range state could not be determined.
            </summary>
            <remarks>This is the default value until reader communications has been established.</remarks>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.RangeState.ExtendedRange">
            <summary>
            The tag is in an extended range state.
            </summary>
            <remarks>The tag can hear signals from readers at a longer distance when in this state.</remarks>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.RangeState.NormalRange">
            <summary>				
            The tag is in its normal sensitivity range state.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.iQTag.LoggerInstalledState">
            <summary>
            Specifies the state of a tag's logger hardware. It can be Available, Unavailable, or Indeterminate.
            </summary>
            <remarks>Simple tag communication such as a Ping must be established with the tag in order to determine its capabilities. A scan without blinking the tags will not retrieve this information.</remarks>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.LoggerInstalledState.Indeterminate">
            <summary>
            The installed state cannot be determined.
            </summary>
            <remarks>This is the default value.</remarks>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.LoggerInstalledState.Available">
            <summary>
            The tag is known to have an onboard logging device.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.LoggerInstalledState.Unavailable">
            <summary>
            The tag does not contain an onboard logging device.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.iQTag.LoggingState">
            <summary>
            The logging state of the tag.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.LoggingState.Indeterminate">
            <summary>
            The logging state cannot be determined.
            </summary>
            <remarks>This is the default state when no tag communication has been established.</remarks>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.LoggingState.On">
            <summary>
            The tag is known to be logging.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.LoggingState.Off">
            <summary>
            The tag is known to have its logger turned off.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.iQTag.Model">
            <summary>
            The various Model types that are available. Set after communication with a tag.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.Model.Indeterminate">
            <summary>
            The model type is unknown.
            </summary>
            <remarks>Default value.</remarks>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.Model.IQ8">
            <summary>
            i-Q8 model
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.Model.IQ8S">
            <summary>
            i-Q8S model
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.Model.IQ8N">
            <summary>
            i-Q8N model
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.Model.IQ8C">
            <summary>
            i-Q8C model (Engine Counter capability).
            </summary>
            <remarks>Has PNP/NPN input.</remarks>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.Model.IQ8T">
            <summary>
            i-Q8T model (temperature log capable). 
            </summary>
            <remarks>The logger's capacity is 1024 samples.</remarks>
        </member>
        <member name="F:IDENTEC.Tags.iQTag.Model.IQ32">
            <summary>
            i-Q32 model.
            </summary>				
        </member>
        <member name="F:IDENTEC.Tags.iQTag.Model.IQ32T">
            <summary>
            i-Q32T model (temperature log capable). 
            </summary>
            <remarks>The logger's capacity is 13312 samples.</remarks>				
        </member>
        <member name="F:IDENTEC.Tags.iQTag.Model.IQ32S">
            <summary>
            i-Q32S model. This is a temperature tag with an external probe.
            </summary>
            This is an extended measurement temperature tag. Range of -50°C to +125°C.
            S type tags have the ID range 200 000 000 to 299 999 999
        </member>
        <member name="F:IDENTEC.Tags.iQTag.Model.IQ32Elpro">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.iQTagVersionInfo">
            <summary>
            The tag version information as read from the i-Q tag
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iQTagVersionInfo.PCBVersion">
            <summary>
            PCB version number
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iQTagVersionInfo.AssemblingVersion">
            <summary>
            Assembling version number.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iQTagVersionInfo.SoftwareMajorVersion">
            <summary>
            Main/major software version.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.iQTagVersionInfo.SoftwareMinorVersion">
            <summary>
            Minor/sub software version
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.Logging.LogData">
            <summary>
            Defines common Log Data functionality.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Logging.LogData.SampleCount">
            <summary>
            The number of samples recorded in the log.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Logging.LogData.SamplingInterval">
            <summary>
            The rate at which samples are recorded in the log.
            </summary>
            <remarks>The resolution is in seconds.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Logging.LogData.LoggingInterval">
            <summary>
            The rate at which samples are recorded in the log.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Logging.LogData.Start">
            <summary>
            The DateTime of the first sample.
            </summary>
            <remarks>This is equivalent to the time the first sample was recorded.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Logging.LogData.End">
            <summary>
            The DateTime of the last sample.
            </summary>
            <remarks>This is equivalent to the time the last sample was recorded.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Logging.LogData.LoggerStarted">
            <summary>
            The DateTime when the tag logger was started.
            </summary>
            <remarks>This is equivalent to the time the tag started logging.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Logging.LogData.LoggerStopped">
            <summary>
            The DateTime when the tag logger was stopped.
            </summary>
            <remarks>This is equivalent to the time the tag stopped logging.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Logging.LogData.Wrapped">
            <summary>
            The status of the samples on the log. When it is wrapped it means that the time of each sample is calculated from the End time only. When the log is not wrapped then the time of each sample is calculated using the start and end time.
            </summary>
            <remarks>A log is considered <I>wrapped</I> when the number of samples has breached capacity. At this point old samples are overwritten as new samples are added. This means that the <I>Start</I> time is then calculated from the <I>End</I> time.</remarks>
        </member>
        <member name="T:IDENTEC.Tags.Logging.RawLogData">
            <summary>
            Encapsulates log data read from a tag in raw samples.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.Logging.RawLogData"/> class.
            </summary>
            <remarks>A log object is only useful after it has been read from a tag.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogData.Wrapped">
            <summary>
            The status of the samples on the log. When it is wrapped it means that the time of each sample is calculated from the End time only. When the log is not wrapped then the time of each sample is calculated using the start and end time.
            </summary>
            <remarks>A log is considered <I>wrapped</I> when the number of samples has breached capacity. At this point old samples are overwritten as new samples are added. This means that the <I>Start</I> time is then calculated from the <I>End</I> time.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogData.Logging">
            <summary>
            The logging tag status
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogData.Start">
            <summary>
            The DateTime of the first sample.
            </summary>
            <remarks>This is equivalent to the time the first sample was recorded.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogData.End">
            <summary>
            The DateTime of the last sample.
            </summary>
            <remarks>This is equivalent to the time the last sample was recorded.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogData.LoggerStarted">
            <summary>
            The DateTime when the tag logger was started.
            </summary>
            <remarks>This is equivalent to the time the tag started logging.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogData.LoggerStopped">
            <summary>
            The DateTime when the tag logger was stopped.
            </summary>
            <remarks>This is equivalent to the time the tag stopped logging.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogData.SamplingInterval">
            <summary>
            The rate at which samples are recorded in the log.
            </summary>
            <remarks>The resolution is in seconds.</remarks>	
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogData.LoggingInterval">
            <summary>
            The rate at which samples are recorded in the log.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogData.SampleCount">
            <summary>
            The number of samples recorded in the log.
            </summary>				
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogData.RawSamples">
            <summary>
            Allows access to the samples recorded in the log.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.Logging.TemperatureLogData">
            <summary>
            Encapsulates the temperature log data as read from an i-QxT tag.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.Logging.TemperatureLogData"/> class.
            </summary>
            <remarks>A log object is only useful after it has been read from a tag.</remarks>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogData.ConvertRawToCelsius(System.UInt16,IDENTEC.Tags.iQTag.Model)">
            <summary>
            Converts a raw sample into the 10-bit 2's compliment temperature in degrees Celsius.
            </summary>
            <param name="sample">The raw sample value.</param>
            <param name="model">The model.</param>
            <returns>
            A floating point temperature value in degrees Celsius.
            </returns>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogData.GetExtremes">
            <summary>
            Gets the lowest and highest temperatures
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogData.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureLogData.LowestTemperatureRecord">
            <summary>
            Gets the lowest temperature record.
            </summary>
            <remarks>If the lowest recorded temperature was found more than once, the first recorded instance is returned.</remarks>
            <value>The lowest temperature record.</value>
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureLogData.HighestTemperatureRecord">
            <summary>
            Gets the highest temperature record.
            </summary>
            <value>The highest temperature record.</value>
            <remarks>If the highest recorded temperature was found more than once, the first recorded instance is returned.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureLogData.SampleCount">
            <summary>
            The number of samples recorded in the log.
            </summary>
            <value></value>
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureLogData.Samples">
            <summary>
            The collection of samples as read from the tag.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.Logging.CompareTemperatureLogSamplesByLowestTemperature">
            <summary>
            An IComparer class used for sorting the a collection of TemperatureLogSample objects, based on temperature
            </summary>            
        </member>
        <member name="M:IDENTEC.Tags.Logging.CompareTemperatureLogSamplesByLowestTemperature.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:IDENTEC.Tags.Logging.CompareTemperatureLogSamplesByHighestTemperature">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.CompareTemperatureLogSamplesByHighestTemperature.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:IDENTEC.Tags.Logging.LogSample">
            <summary>
            Encapsulates common log sample functionality.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.LogSample.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.Logging.LogSample"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.LogSample.#ctor(IDENTEC.Tags.Logging.LogSample)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.Logging.LogSample"/> class.
            </summary>
            <param name="sample">The sample.</param>
        </member>
        <member name="P:IDENTEC.Tags.Logging.LogSample.SampleTime">
            <summary>
            The time the sample was recorded in the log.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.Logging.TemperatureLogSample">
            <summary>
            Encapsulates a recorded temperature log sample.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.Logging.RawLogSample">
            <summary>
            Encapsulates a raw sample from a raw log as recorded on the i-Qxx tag.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.Logging.RawLogSample.SampleUnderflow">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.Logging.RawLogSample.SampleOverflow">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogSample.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogSample.#ctor(IDENTEC.Tags.Logging.RawLogSample)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.Logging.RawLogSample"/> class.
            </summary>
            <param name="sample">The sample.</param>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogSample.CompareTo(System.Object)">
            <summary>
            The compare method. Based on the time of the sample.
            </summary>
            <remarks>compares time</remarks>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogSample.Overflow">
            <summary>
            Reports if the sample is an overflow due to a broken sensor
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogSample.Underflow">
            <summary>
            Reports if the sample is an underflow due to a broken sensor
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogSample.Sample">
            <summary>
            The sample data.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.Logging.TemperatureLogSample.InvalidTemperature">
            <summary>
            If the temperature sample has not be read it is set to invalid.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSample.#ctor(IDENTEC.Tags.Logging.TemperatureLogSample)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.Logging.TemperatureLogSample"/> class.
            </summary>
            <param name="sample">The sample.</param>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSample.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSample.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.Logging.TemperatureLogSample"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSample.CompareTo(System.Object)">
            <summary>
            The compare method. Based on the time of the sample.
            </summary>
            <remarks>If the sample time is equal then the temperature value is compared. Therefore sorting is by time then temperature.</remarks>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureLogSample.DegreesCelsius">
            <summary>
            The reported temperature in degrees Celsius.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureLogSample.DegreesFahrenheit">
            <summary>
            The reported temperature in degrees Fahrenheit
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.Logging.TemperatureLogSampleCollection">
            <summary>
            A collection of temperature log samples.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSampleCollection.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSampleCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new TemperatureLogSampleCollection with an initial capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSampleCollection.#ctor(IDENTEC.Tags.Logging.TemperatureLogSampleCollection)">
            <summary>
            Initializes a new TemperatureLogSampleCollection with another collection.
            </summary>
            <param name="samples"></param>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSampleCollection.Add(IDENTEC.Tags.Logging.TemperatureLogSample)">
            <summary>
            Adds a new sample to the collection.
            </summary>
            <param name="sample">The sample to add.</param>
            <returns>The sample added.</returns>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSampleCollection.Add">
            <summary>
            Adds a new TemperatureLogSample to the collection.
            </summary>
            <returns>The newly added TemperatureLogSample</returns>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSampleCollection.CopyTo(IDENTEC.Tags.Logging.TemperatureLogSample[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSampleCollection.IndexOf(IDENTEC.Tags.Logging.TemperatureLogSample)">
            <summary>
            Indexes the of.
            </summary>
            <param name="sample">The sample.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSampleCollection.Contains(IDENTEC.Tags.Logging.TemperatureLogSample)">
            <summary>
            Determines whether [contains] [the specified sample].
            </summary>
            <param name="sample">The sample.</param>
            <returns>
            	<c>true</c> if [contains] [the specified sample]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSampleCollection.Insert(System.Int32,IDENTEC.Tags.Logging.TemperatureLogSample)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="sample">The sample.</param>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureLogSampleCollection.Remove(IDENTEC.Tags.Logging.TemperatureLogSample)">
            <summary>
            Removes the specified sample.
            </summary>
            <param name="sample">The sample.</param>
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureLogSampleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:IDENTEC.Tags.Logging.TemperatureLogSample"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:IDENTEC.Tags.Logging.RawLogSampleCollection">
            <summary>
            A collection of raw log samples.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogSampleCollection.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogSampleCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new RawSampleCollection with a capacity.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogSampleCollection.#ctor(IDENTEC.Tags.Logging.RawLogSampleCollection)">
            <summary>
            Initializes a new RawLogSampleCollection with an existing sample collection.
            </summary>
            <param name="samples"></param>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogSampleCollection.Add(IDENTEC.Tags.Logging.RawLogSample)">
            <summary>
            Adds a new sample to the collection and returns a reference to the sample.
            </summary>
            <param name="sample">The sample to add.</param>
            <returns>A reference to the sample added.</returns>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogSampleCollection.Add">
            <summary>
            Adds a sample to the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogSampleCollection.CopyTo(IDENTEC.Tags.Logging.TemperatureLogSample[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogSampleCollection.IndexOf(IDENTEC.Tags.Logging.RawLogSample)">
            <summary>
            Returns the index of the sample.
            </summary>
            <param name="sample">The sample.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogSampleCollection.Contains(IDENTEC.Tags.Logging.RawLogSample)">
            <summary>
            Determines whether [contains] [the specified sample].
            </summary>
            <param name="sample">The sample.</param>
            <returns>
            	<c>true</c> if [contains] [the specified sample]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogSampleCollection.Insert(System.Int32,IDENTEC.Tags.Logging.RawLogSample)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="sample">The sample.</param>
        </member>
        <member name="M:IDENTEC.Tags.Logging.RawLogSampleCollection.Remove(IDENTEC.Tags.Logging.RawLogSample)">
            <summary>
            Removes the specified sample.
            </summary>
            <param name="sample">The sample.</param>
        </member>
        <member name="P:IDENTEC.Tags.Logging.RawLogSampleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:IDENTEC.Tags.Logging.RawLogSample"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:IDENTEC.Tags.Logging.TemperatureExtremes">
            <summary>
            Encapsulates the temperature extremes information as recorded on the tag. It also includes the start and end times of the log. This gives you the maximum and minimum temperatures recorded within a time frame.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TemperatureExtremes.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureExtremes.Success">
            <summary>
            
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureExtremes.MaximumDegreesCelsius">
            <summary>
            The maximum temperature as recorded during the course of the temperature log.
            </summary>				
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureExtremes.MaximumDegreesFahrenheit">
            <summary>
            The maximum temperature as recorded during the course of the temperature log.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureExtremes.MinimumDegreesCelsius">
            <summary>
            The minimum temperature as recorded during the course of the temperature log.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureExtremes.MinimumDegreesFahreheit">
            <summary>
            The minimum temperature as recorded during the course of the temperature log.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureExtremes.LogStart">
            <summary>
            The start time of the log.
            </summary>
            <remarks>This is equivalent to the time the first sample was recorded.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.Logging.TemperatureExtremes.LogEnd">
            <summary>
            The end time of the log.
            </summary>
            <remarks>This is equivalent to the time the last sample was recorded.</remarks>				
        </member>
        <member name="T:IDENTEC.Tags.Logging.TagHasNoLoggerException">
            <summary>
            The exception that is thrown when a logging operation is performed on a tag that has no logging capabilities.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TagHasNoLoggerException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TagHasNoLoggerException.#ctor(System.String)">
            <summary>
            Constructor containing a message.
            </summary>
            <param name="message">Message detailing the exception source.</param>
        </member>
        <member name="M:IDENTEC.Tags.Logging.TagHasNoLoggerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.Logging.TagHasNoLoggerException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:IDENTEC.Registry">
            <summary>
            Supplies the base <b>RegistryKeys</b> that access values and subkeys in the registry.
            </summary>
            <remarks>This class provides the set of standard root keys found in the registry on machines running Windows CE.
            The registry is a storage facility for information about applications and default system settings.
            For example, applications can use the registry for storing information that needs to be preserved once the application is closed, and access that same information when the application is reloaded.
            For instance, you can store color preferences, screen locations, or the size of the window.
            The keys exposed by Registry are: 
            <list type="bullet">
            <item><term>CurrentUser</term><description>Stores information about user preferences.</description></item>
            <item><term>LocalMachine</term><description>Stores configuration information for the local machine.</description></item>
            <item><term>ClassesRoot</term><description>Stores information about types (and classes) and their properties.</description></item>  
            <item><term>Users</term><description>Stores information about the default user configuration.</description></item></list> 
            Once you have identified the root key under which you want to store/retrieve information from the registry, you can use the RegistryKey class to add or remove subkeys, and manipulate the values for a given key.</remarks>
        </member>
        <member name="F:IDENTEC.Registry.LocalMachine">
            <summary>
            Contains the configuration data for the local machine. This field reads the Windows registry base key HKEY_LOCAL_MACHINE.
            </summary>
        </member>
        <member name="F:IDENTEC.Registry.CurrentUser">
            <summary>
            Contains information about the current user preferences. This field reads the Windows registry base key HKEY_CURRENT_USER.
            </summary>
        </member>
        <member name="F:IDENTEC.Registry.ClassesRoot">
            <summary>
             Defines the types (or classes) of documents and the properties associated with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.
            </summary>
        </member>
        <member name="F:IDENTEC.Registry.Users">
            <summary>
            Contains information about the default user configuration. This field reads the Windows registry base key HKEY_USERS.
            </summary>
        </member>
        <member name="T:IDENTEC.RegistryKey">
            <summary>
            Represents a key level node in the Windows registry. This class is a registry encapsulation.
            </summary>
        </member>
        <member name="M:IDENTEC.RegistryKey.ToString">
            <summary>
            Retrieves a string representation of this key.
            </summary>
            <returns>A string representing the key. If the specified key is invalid (cannot be found) then a null value is returned.</returns>
            <exception cref="T:System.ObjectDisposedException"> The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.Flush">
            <summary>
            Writes all the attributes of the specified open registry key into the registry.
            </summary>
            <remarks>The Flush method may also write out parts of or all of the other keys.
            Calling this function excessively can have a negative effect on an application’s performance.</remarks>
        </member>
        <member name="M:IDENTEC.RegistryKey.Close">
            <summary>
            Closes the key and flushes it to storage if the contents have been modified.
            </summary>
            <remarks>Calling this method on system keys will have no effect, since system keys should never be closed.
            This method does nothing if you call it on an instance of <b>RegistryKey</b> that is already closed.</remarks>
        </member>
        <member name="M:IDENTEC.RegistryKey.CreateSubKey(System.String)">
            <summary>
             Creates a new subkey or opens an existing subkey.
             The string subKey is not case-sensitive.
            </summary>
            <param name="subkey">Name or path of subkey to create or open.</param>
            <returns>Returns the subkey, or null if the operation failed.</returns>
            <exception cref="T:System.ArgumentNullException">The specified subkey is null.</exception>
            <exception cref="T:System.ArgumentException">The length of the specified subkey is longer than the maximum length allowed (255 characters).</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey on which this method is being invoked is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.CreateSubKey(System.String,System.Boolean)">
            <summary>
             Creates a new subkey or opens an existing subkey.
             The string subKey is not case-sensitive.
             <para><b>New in v1.3</b></para>
            </summary>
            <param name="subkey">Name or path of subkey to create or open.</param>
            <param name="createVolatile">If true creates a volatile key (Requires Windows CE 5.0).</param>
            <returns>Returns the subkey, or null if the operation failed.</returns>
            <exception cref="T:System.ArgumentNullException">The specified subkey is null.</exception>
            <exception cref="T:System.ArgumentException">The length of the specified subkey is longer than the maximum length allowed (255 characters).</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey on which this method is being invoked is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.OpenSubKey(System.String)">
            <summary>
            Retrieves a subkey as read-only.
            </summary>
            <param name="name">Name or path of subkey to open.</param>
            <returns>The subkey requested, or null if the operation failed.</returns>
        </member>
        <member name="M:IDENTEC.RegistryKey.OpenSubKey(System.String,System.Boolean)">
            <summary>
            Retrieves a specified subkey.
            </summary>
            <param name="name">Name or path of subkey to open.</param>
            <param name="writable">Set to true if you need write access to the key.</param>
            <returns>The subkey requested, or null if the operation failed.</returns>
            <exception cref="T:System.ArgumentNullException">name is null.</exception>
            <exception cref="T:System.ArgumentException">The length of the specified subkey is longer than the maximum length allowed (255 characters).</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.DeleteSubKey(System.String)">
            <summary>
            Deletes the specified subkey. The string subkey is not case-sensitive.
            </summary>
            <param name="subkey">Name of the subkey to delete.</param>
            <exception cref="T:System.ArgumentException">The specified subkey is not a valid reference to a registry key.</exception>
            <exception cref="T:System.ArgumentNullException">The subkey is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey on which this method is being invoked is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.DeleteSubKey(System.String,System.Boolean)">
            <summary>
            Deletes the specified subkey. The string subkey is not case-sensitive.
            </summary>
            <param name="subkey">Name of the subkey to delete.</param>
            <param name="throwOnMissingSubKey">Indicates whether an exception should be raised if the specified subkey cannot be found.
            If this argument is true and the specified subkey does not exist then an exception is raised.
            If this argument is false and the specified subkey does not exist, then no action is taken</param>
            <exception cref="T:System.ArgumentException">The specified subkey is not a valid reference to a registry key (and throwOnMissingSubKey is true).</exception>
            <exception cref="T:System.ArgumentNullException">The subkey is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey on which this method is being invoked is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.DeleteSubKeyTree(System.String)">
            <summary>
             Deletes a subkey and any child subkeys recursively.
             The string subKey is not case-sensitive.
            </summary>
            <param name="subkey">Subkey to delete.</param>
            <exception cref="T:System.ArgumentNullException">The subkey parameter is null.</exception>
            <exception cref="T:System.ArgumentException">Deletion of a root hive is attempted. 
            The subkey parameter does not match a valid registry subkey.</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.GetSubKeyNames">
            <summary>
            Retrieves an array of strings that contains all the subkey names.
            </summary>
            <returns>An array of strings that contains the names of the subkeys for the current key.</returns>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.GetValue(System.String)">
            <summary>
            Retrieves the data associated with the specified value, or null if the value does not exist.
            </summary>
            <param name="name">Name of the value to retrieve.</param>
            <returns>The data associated with name , or null if the value does not exist.</returns>
            <exception cref="T:System.ArgumentException">The RegistryKey being manipulated does not exist.</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.GetValue(System.String,System.Object)">
            <summary>
            Retrieves the specified value, or the default value you provide if the specified value is not found. 
            </summary>
            <param name="name">Name of the value to retrieve.</param>
            <param name="defaultValue">Value to return if name does not exist.</param>
            <returns>The data associated with name, or defaultValue if name is not found.</returns>
            <exception cref="T:System.ArgumentException">The RegistryKey being manipulated does not exist.</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.GetValueKind(System.String)">
            <summary>
            Retrieves the registry data type of the value associated with the specified name.
            <para><b>New in v1.3</b></para>
            </summary>
            <param name="name">The name of the value whose registry data type is to be retrieved.</param>
            <returns>A <see cref="T:IDENTEC.RegistryValueKind"/> value representing the registry data type of the value associated with name.</returns>
        </member>
        <member name="M:IDENTEC.RegistryKey.SetValue(System.String,System.Object)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="name">Name of value to store data in.</param>
            <param name="value">Data to store.</param>
            <exception cref="T:System.ArgumentException">The length of the specified value is longer than the maximum length allowed (255 characters).</exception>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being set is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The RegistryKey being set is readonly, and cannot be written to (for example, it is a root-level node, or the key has not been opened with write-access).</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.SetValue(System.String,System.Object,IDENTEC.RegistryValueKind)">
            <summary>
            Sets the value of a name/value pair in the registry key, using the specified registry data type.
            <para><b>New in v1.3</b></para>
            </summary>
            <param name="name">Name of value to store data in.</param>
            <param name="value">Data to store.</param>
            <param name="valueKind">The registry data type to use when storing the data.</param>
            <exception cref="T:System.ArgumentException">The length of the specified value is longer than the maximum length allowed (255 characters).</exception>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being set is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The RegistryKey being set is readonly, and cannot be written to (for example, it is a root-level node, or the key has not been opened with write-access).</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.DeleteValue(System.String)">
            <summary>
            Deletes the specified value from this key.
            </summary>
            <param name="name">Name of the value to delete.</param>
            <exception cref="T:System.ArgumentException">name is not a valid reference to a value (and throwOnMissingValue is true) or name is null</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The RegistryKey being manipulated is readonly.</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.DeleteValue(System.String,System.Boolean)">
            <summary>
            Deletes the specified value from this key.
            </summary>
            <param name="name">Name of the value to delete.</param>
            <param name="throwOnMissingValue">Indicates whether an exception should be raised if the specified value cannot be found.
            If this argument is true and the specified value does not exist then an exception is raised.
            If this argument is false and the specified value does not exist, then no action is taken</param>
            <exception cref="T:System.ArgumentException">name is not a valid reference to a value (and throwOnMissingValue is true) or name is null</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The RegistryKey being manipulated is readonly.</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.GetValueNames">
            <summary>
            Retrieves an array of strings that contains all the value names associated with this key.
            </summary>
            <returns>An array of strings that contains the value names for the current key.</returns>
            <remarks>If no value names for the key are found, an empty array is returned.
            <para>All RegistryKeys are assigned a default value.
            This is not counted as a value name, and is not returned as part of the result set.</para></remarks>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:IDENTEC.RegistryKey.Dispose">
            <summary>
            Free up resources used by the RegistryKey
            </summary>
        </member>
        <member name="P:IDENTEC.RegistryKey.Name">
            <summary>
            Retrieves the name of the key.
            </summary>
        </member>
        <member name="P:IDENTEC.RegistryKey.SubKeyCount">
            <summary>
            Retrieves the count of subkeys at the base level, for the current key.
            </summary>
            <exception cref="T:System.ObjectDisposedException"> The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="P:IDENTEC.RegistryKey.ValueCount">
            <summary>
            Retrieves the count of values in the key.
            </summary>
            <exception cref="T:System.ObjectDisposedException"> The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="T:IDENTEC.RegistryValueKind">
            <summary>
            Specifies the data types to use when storing values in the registry, or identifies the data type of a value in the registry.
            <para><b>New in v1.3</b></para>
            </summary>
            <remarks>The RegistryValueKind enumeration defines the set of supported registry data types and the value that is used for unsupported types (Unknown).
            <para>Use the <see cref="M:IDENTEC.RegistryKey.GetValueKind(System.String)"/> method to determine the data type of a registry key value before retrieving the value.
            When you set a registry key value, use the RegistryKey.SetValue method to specify the registry data type explicitly.</para></remarks>
        </member>
        <member name="F:IDENTEC.RegistryValueKind.Unknown">
            <summary>
            Indicates an unsupported registry data type.
            Use this value to specify that SetValue should determine the appropriate registry data type when storing a name/value pair.
            </summary>
        </member>
        <member name="F:IDENTEC.RegistryValueKind.String">
            <summary>
            Specifies a null-terminated string.
            This value is equivalent to the Win32 API registry data type REG_SZ.
            </summary>
        </member>
        <member name="F:IDENTEC.RegistryValueKind.ExpandString">
            <summary>
            Specifies a null-terminated string that contains unexpanded references to environment variables, such as %PATH%, that are expanded when the value is retrieved.
            This value is equivalent to the Win32 API registry data type REG_EXPAND_SZ.
            </summary>
        </member>
        <member name="F:IDENTEC.RegistryValueKind.Binary">
            <summary>
            Specifies binary data in any form.
            This value is equivalent to the Win32 API registry data type REG_BINARY.
            </summary>
        </member>
        <member name="F:IDENTEC.RegistryValueKind.DWord">
            <summary>
            Specifies a 32-bit binary number.
            This value is equivalent to the Win32 API registry data type REG_DWORD.
            </summary>
        </member>
        <member name="F:IDENTEC.RegistryValueKind.MultiString">
            <summary>
            Specifies an array of null-terminated strings, terminated by two null characters.
            This value is equivalent to the Win32 API registry data type REG_MULTI_SZ.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.Port">
            <summary>
            A class obj for serial port communications
            </summary>
        </member>
        <member name="F:IDENTEC.Readers.Port.m_bOverlappedEnabled">
            <summary>
            
            </summary>
            <remarks>Added by IDENTEC</remarks>
        </member>
        <member name="M:IDENTEC.Readers.Port.#ctor(System.String)">
            <summary>
            Create a serial port class.  The port will be created with defualt settings.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
        </member>
        <member name="M:IDENTEC.Readers.Port.#ctor(System.String,IDENTEC.BasicPortSettings)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
            <param name="InitialSettings">BasicPortSettings to apply to the new Port</param>
        </member>
        <member name="M:IDENTEC.Readers.Port.#ctor(System.String,IDENTEC.DetailedPortSettings)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
            <param name="InitialSettings">DetailedPortSettings to apply to the new Port</param>
        </member>
        <member name="M:IDENTEC.Readers.Port.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="RxBufferSize">Receive buffer size, in bytes</param>
            <param name="TxBufferSize">Transmit buffer size, in bytes</param>
        </member>
        <member name="M:IDENTEC.Readers.Port.#ctor(IDENTEC.BasicPortSettings,System.Int32,System.Int32)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="InitialSettings">BasicPortSettings to apply to the new Port</param>
            <param name="RxBufferSize">Receive buffer size, in bytes</param>
            <param name="TxBufferSize">Transmit buffer size, in bytes</param>
        </member>
        <member name="M:IDENTEC.Readers.Port.#ctor(IDENTEC.DetailedPortSettings,System.Int32,System.Int32)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="InitialSettings">DetailedPortSettings to apply to the new Port</param>
            <param name="RxBufferSize">Receive buffer size, in bytes</param>
            <param name="TxBufferSize">Transmit buffer size, in bytes</param>
        </member>
        <member name="M:IDENTEC.Readers.Port.Dispose">
            <summary>
            Dispose the object's resources
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.Port.Finalize">
            <summary>
            Class destructor
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.Port.Open">
            <summary>
            Open the current port
            </summary>
            <returns>true if successful, false if it fails</returns>
        </member>
        <member name="M:IDENTEC.Readers.Port.Close">
            <summary>
            Close the current serial port
            </summary>
            <returns>true indicates success, false indicated failure</returns>
        </member>
        <member name="E:IDENTEC.Readers.Port.OnError">
            <summary>
             A communication error has occurred
            </summary>
        </member>
        <member name="E:IDENTEC.Readers.Port.DataReceived">
            <summary>
            Serial data has been received
            </summary>
        </member>
        <member name="E:IDENTEC.Readers.Port.RxOverrun">
            <summary>
            Overrun of the transmit buffer
            </summary>
        </member>
        <member name="E:IDENTEC.Readers.Port.TxDone">
            <summary>
            Transmit complete
            </summary>
        </member>
        <member name="E:IDENTEC.Readers.Port.FlagCharReceived">
            <summary>
            Set flag character was in the receive stream
            </summary>
        </member>
        <member name="E:IDENTEC.Readers.Port.PowerEvent">
            <summary>
            Power change event has occurred
            </summary>
        </member>
        <member name="E:IDENTEC.Readers.Port.HighWater">
            <summary>
            Serial buffer's high-water level has been exceeded
            </summary>
        </member>
        <member name="E:IDENTEC.Readers.Port.DSRChange">
            <summary>
            DSR state has changed
            </summary>
        </member>
        <member name="E:IDENTEC.Readers.Port.RingChange">
            <summary>
            Ring signal has been detected
            </summary>
        </member>
        <member name="E:IDENTEC.Readers.Port.CTSChange">
            <summary>
            CTS state has changed
            </summary>
        </member>
        <member name="E:IDENTEC.Readers.Port.RLSDChange">
            <summary>
            RLSD state has changed
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.Port.OverlappedEnabled">
            <summary>
            
            </summary>
            <remarks>Added by IDENTEC</remarks>
        </member>
        <member name="P:IDENTEC.Readers.Port.IsOpen">
            <summary>
            Returns whether or not the port is currently open
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.Port.Output">
            <summary>
            The Port's output buffer.  Set this property to send data.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.Port.CommEvent">
            <summary>
            Raised on all enables communication events
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.Port.CommChangeEvent">
            <summary>
            Raised when the communication state changes
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.Port.CommErrorEvent">
            <summary>
            Rasied during any communication error
            </summary>
        </member>
        <member name="T:IDENTEC.ASCII">
            <summary>
            Common ASCII Control Codes
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.NULL">
            <summary>
            NULL
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.SOH">
            <summary>
            Start of Heading
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.STX">
            <summary>
            Start of Text
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.ETX">
            <summary>
            End of Text
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.EOT">
            <summary>
            End of Transmission
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.ENQ">
            <summary>
            Enquiry
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.ACK">
            <summary>
            Acknowledge
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.BELL">
            <summary>
            Bell
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.BS">
            <summary>
            Backspace
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.HT">
            <summary>
            Horizontal tab
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.LF">
            <summary>
            Line Feed
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.VT">
            <summary>
            Vertical tab
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.FF">
            <summary>
            Form Feed
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.CR">
            <summary>
            Carriage Return
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.SO">
            <summary>
            Shift out
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.SI">
            <summary>
            Shift in
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.DC1">
            <summary>
            Device Control 1
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.DC2">
            <summary>
            Device Control 2
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.DC3">
            <summary>
            Device Control 3
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.DC4">
            <summary>
            Device Control 4
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.NAK">
            <summary>
            No Acknowledge
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.SYN">
            <summary>
            Synchronization
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.ETB">
            <summary>
            End of Transmission Block
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.CAN">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.EM">
            <summary>
            End of Medium
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.SUB">
            <summary>
            Substitute Character
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.ESC">
            <summary>
            Escape
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.FS">
            <summary>
            Field Separator
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.GS">
            <summary>
            Group Separator
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.RS">
            <summary>
            Record Separator
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.US">
            <summary>
            Unit Separator
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.SP">
            <summary>
            Spare
            </summary>
        </member>
        <member name="F:IDENTEC.ASCII.DEL">
            <summary>
            Delete
            </summary>
        </member>
        <member name="T:IDENTEC.Handshake">
            <summary>
            Common serial handshaking protocols
            </summary>
        </member>
        <member name="F:IDENTEC.Handshake.none">
            <summary>
            No handshaking
            </summary>
        </member>
        <member name="F:IDENTEC.Handshake.XonXoff">
            <summary>
            XOn/XOff handshaking
            </summary>
        </member>
        <member name="F:IDENTEC.Handshake.CtsRts">
            <summary>
            CTS/RTS
            </summary>
        </member>
        <member name="F:IDENTEC.Handshake.DsrDtr">
            <summary>
            DSR/DTR
            </summary>
        </member>
        <member name="T:IDENTEC.Parity">
            <summary>
            Parity
            </summary>
        </member>
        <member name="F:IDENTEC.Parity.none">
            <summary>
            No parity
            </summary>
        </member>
        <member name="F:IDENTEC.Parity.odd">
            <summary>
            Odd parity
            </summary>
        </member>
        <member name="F:IDENTEC.Parity.even">
            <summary>
            Even parity
            </summary>
        </member>
        <member name="F:IDENTEC.Parity.mark">
            <summary>
            Mark parity
            </summary>
        </member>
        <member name="F:IDENTEC.Parity.space">
            <summary>
            Space parity
            </summary>
        </member>
        <member name="T:IDENTEC.StopBits">
            <summary>
            Stop bits
            </summary>
        </member>
        <member name="F:IDENTEC.StopBits.one">
            <summary>
            One stop bit
            </summary>
        </member>
        <member name="F:IDENTEC.StopBits.onePointFive">
            <summary>
            1.5 stop bits
            </summary>
        </member>
        <member name="F:IDENTEC.StopBits.two">
            <summary>
            Two stop bits
            </summary>
        </member>
        <member name="T:IDENTEC.DTRControlFlows">
            <summary>
            DTR Flow Control
            </summary>
        </member>
        <member name="F:IDENTEC.DTRControlFlows.disable">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:IDENTEC.DTRControlFlows.enable">
            <summary>
            Enabled
            </summary>
        </member>
        <member name="F:IDENTEC.DTRControlFlows.handshake">
            <summary>
            Determined by handshaking
            </summary>
        </member>
        <member name="T:IDENTEC.RTSControlFlows">
            <summary>
            RTS Flow Control
            </summary>
        </member>
        <member name="F:IDENTEC.RTSControlFlows.disable">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:IDENTEC.RTSControlFlows.enable">
            <summary>
            Enabled
            </summary>
        </member>
        <member name="F:IDENTEC.RTSControlFlows.handshake">
            <summary>
            Determined by handshaking
            </summary>
        </member>
        <member name="F:IDENTEC.RTSControlFlows.toggle">
            <summary>
            Toggle
            </summary>
        </member>
        <member name="T:IDENTEC.BaudRates">
            <summary>
            CE-supported baud rates (check your hardware for actual availability)
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_110">
            <summary>
            110bpb
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_300">
            <summary>
            300bps
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_600">
            <summary>
            600bps
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_1200">
            <summary>
            1200bps
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_2400">
            <summary>
            2400bps
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_4800">
            <summary>
            4800bps
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_9600">
            <summary>
            9600bps
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_14400">
            <summary>
            14.4kbps
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_19200">
            <summary>
            19.2kbps
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_38400">
            <summary>
            38.4kbps
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_56000">
            <summary>
            56kbps
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_57600">
            <summary>
            57.6kbps
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_115200">
            <summary>
            115kbps
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_128000">
            <summary>
            128kbps
            </summary>
        </member>
        <member name="F:IDENTEC.BaudRates.CBR_256000">
            <summary>
            256kbps
            </summary>
        </member>
        <member name="T:IDENTEC.BasicPortSettings">
            <summary>
            Used for manipulating several basic Port settings of a Port class
            </summary>
        </member>
        <member name="F:IDENTEC.BasicPortSettings.BaudRate">
            <summary>
            Baud rate (default = 19200bps)
            </summary>
        </member>
        <member name="F:IDENTEC.BasicPortSettings.ByteSize">
            <summary>
            Byte Size of data (default = 8)
            </summary>
        </member>
        <member name="F:IDENTEC.BasicPortSettings.Parity">
            <summary>
            Data Parity (default = none)
            </summary>
        </member>
        <member name="F:IDENTEC.BasicPortSettings.StopBits">
            <summary>
            Number of stop bits (default = 1)
            </summary>
        </member>
        <member name="T:IDENTEC.DetailedPortSettings">
            <summary>
            Used for manipulating all settings of a Port class
            </summary>
        </member>
        <member name="M:IDENTEC.DetailedPortSettings.#ctor">
            <summary>
            Create a DetailedPortSettings class
            </summary>
        </member>
        <member name="M:IDENTEC.DetailedPortSettings.Init">
            <summary>
            These are the default port settings
            override Init() to create new defaults (i.e. common handshaking)
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.BasicSettings">
            <summary>
            Basic port settings
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.OutCTS">
            <summary>
            Specifies if the CTS (clear-to-send) signal is monitored for output flow control. If this member is TRUE and CTS is turned off, output is suspended until CTS is sent again.
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.OutDSR">
            <summary>
            Specifies if the DSR (data-set-ready) signal is monitored for output flow control. If this member is TRUE and DSR is turned off, output is suspended until DSR is sent again. 
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.DTRControl">
            <summary>
            Specifies the DTR (data-terminal-ready) flow control.
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.DSRSensitive">
            <summary>
            Specifies if the communications driver is sensitive to the state of the DSR signal. If this member is TRUE, the driver ignores any bytes received, unless the DSR modem input line is high.
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.TxContinueOnXOff">
            <summary>
            Specifies if transmission stops when the input buffer is full and the driver has transmitted the XoffChar character. If this member is TRUE, transmission continues after the input buffer has come within XoffLim bytes of being full and the driver has transmitted the XoffChar character to stop receiving bytes. If this member is FALSE, transmission does not continue until the input buffer is within XonLim bytes of being empty and the driver has transmitted the XonChar character to resume reception.
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.OutX">
            <summary>
            Specifies if XON/XOFF flow control is used during transmission. If this member is TRUE, transmission stops when the XoffChar character is received and starts again when the XonChar character is received.
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.InX">
            <summary>
            Specifies if XON/XOFF flow control is used during reception. If this member is TRUE, the XoffChar character is sent when the input buffer comes within XoffLim bytes of being full, and the XonChar character is sent when the input buffer comes within XonLim bytes of being empty
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.ReplaceErrorChar">
            <summary>
            Specifies if bytes received with parity errors are replaced with the character specified by the ErrorChar member. If this member is TRUE and the fParity member is TRUE, replacement occurs.
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.RTSControl">
            <summary>
            Specifies the RTS (request-to-send) flow control. If this value is zero, the default is RTS_CONTROL_HANDSHAKE. The following table shows possible values for this member.
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.DiscardNulls">
            <summary>
            Specifies if null bytes are discarded. If this member is TRUE, null bytes are discarded when received. 
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.AbortOnError">
            <summary>
            Specifies if read and write operations are terminated if an error occurs. If this member is TRUE, the driver terminates all read and write operations with an error status if an error occurs. The driver will not accept any further communications operations until the application has acknowledged the error by calling the ClearError function.
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.XonChar">
            <summary>
            Specifies the value of the XON character for both transmission and reception
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.XoffChar">
            <summary>
            Specifies the value of the XOFF character for both transmission and reception.
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.ErrorChar">
            <summary>
            Specifies the value of the character used to replace bytes received with a parity error.
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.EOFChar">
            <summary>
            Specifies the value of the character used to signal the end of data. 
            </summary>
        </member>
        <member name="F:IDENTEC.DetailedPortSettings.EVTChar">
            <summary>
            Specifies the value of the character used to signal an event.
            </summary>
        </member>
        <member name="T:IDENTEC.HandshakeNone">
            <summary>
            A common implementation of DetailedPortSettings for non handshaking
            </summary>
        </member>
        <member name="M:IDENTEC.HandshakeNone.Init">
            <summary>
            Initialize the port
            </summary>
        </member>
        <member name="T:IDENTEC.PositionMarker.SynchSlots">
            <summary>
            Class defining the Slot parameter of iMark.
            </summary>
            <seealso cref="M:IDENTEC.PositionMarker.PositionMarker.SetSynchronizationSlots(IDENTEC.PositionMarker.SynchSlots)"/>
            <seealso cref="M:IDENTEC.PositionMarker.PositionMarker.GetSynchronizationSlots"/>        
        </member>
        <member name="M:IDENTEC.PositionMarker.SynchSlots.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="slots"></param>
        </member>
        <member name="M:IDENTEC.PositionMarker.SynchSlots.#ctor(System.Collections.BitArray)">
            <summary>
            Constructor using a BitArray
            </summary>
            <param name="slots">Slot as BitArray</param>
        </member>
        <member name="P:IDENTEC.PositionMarker.SynchSlots.ui">
            <summary>
            Synchronization slots in integer format.
            </summary>
        </member>
        <member name="P:IDENTEC.PositionMarker.SynchSlots.ba">
            <summary>
            Synchronization slots in BitArray format.
            </summary>
        </member>
        <member name="T:IDENTEC.PositionMarker.PositionMarker">
            <summary>
            Summary description for PositionMarker.
            </summary>
            <seealso cref="P:IDENTEC.PositionMarker.PositionMarker.iBusAdapter"/>
            <seealso cref="P:IDENTEC.PositionMarker.PositionMarker.DataStream"/>        
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetParameter(System.Byte)">
            <summary>
            Gets the parameter.
            </summary>
            <param name="bySubCmd">The by sub CMD.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetStatus">
            <summary>
            Gets the status.
            </summary>
            <returns>iBusDeviceStatus</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetHWInfo">
            <summary>
            Gets the HW information.
            </summary>
            <returns>iDeviceHWInfo</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.ResetToFactoryDefault">
            <summary>
            This command reset all parameters to default configuration.
            </summary>
            <returns>True if successful, false if it fails.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">The underlying Socket is closed.</exception>	
            <exception cref="T:IDENTEC.Readers.ReaderTimeoutException">The reader did not respond in a timely manner.</exception>	                
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetBootTime">
            <summary>
            Gets the boot time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetDigitalVoltage">
            <summary>
            Gets the digital voltage in mV.
            </summary>
            <returns>The digital voltage in mV</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetAnalogVoltage">
            <summary>
            Gets the analog voltage in mV.
            </summary>
            <returns>The analog voltage in mV</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetAnalogPositiveCurrent">
            <summary>
            Gets the analog positive current in mA.
            </summary>
            <returns>The analog positive current in mV</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetAnalogNegativeCurrent">
            <summary>
            Gets the analog negative current in mA.
            </summary>
            <returns>The analog negative current in mV</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetLoopPeakCurrent">
            <summary>
            Gets the actual loop peak current in mA measured by the FW.
            </summary>
            <returns>The loop peak current in mA</returns>
            <remarks>This is the last measured value.</remarks>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetVehicleDetectionLevelPercentage">
            <summary>
            Gets the vehicle detection level percentage.
            </summary>
            <returns>The loop vehicle detection percentage</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetSlavePortConnected">
            <summary>
            Gets the slave port connected.
            </summary>
            <returns>True if slave port is connected</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetLoopID">
            <summary>
            Gets the loop ID.
            </summary>
            <returns>The loop ID</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.SetLoopID(System.Int32)">
            <summary>
            Sets the loop ID.
            </summary>
            <param name="loopID">The loop ID.</param>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetLoopCurrent">
            <summary>
            Gets the loop current in mA as set in the parameters.
            </summary>
            <returns>Loop current in mA</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.SetLoopCurrent(System.Int32)">
            <summary>
            Sets the loop current parameter in mA.
            </summary>
            <param name="current">The current.</param>
            <remarks>This is the peak value and it is regulated when set.</remarks>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.SetEnableMasterMode(System.Boolean)">
            <summary>
            Sets the enable master mode.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetEnableMasterMode">
            <summary>
            Gets the enable master mode.
            </summary>
            <returns>True if marker is in master mode</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.SetEnableHostOnlyRunningMode(System.Boolean)">
            <summary>
            Sets the enable host only running mode.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetEnableHostOnlyRunningMode">
            <summary>
            Gets the enable host only running mode.
            </summary>
            <returns>True if marker running in host only mode</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.Synchronize">
            <summary>
            Synchronizes all markers on this communication bus.
            </summary>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.SetSynchronizationSlots(IDENTEC.PositionMarker.SynchSlots)">
            <summary>
            Sets the synchronization slots.
            </summary>
            <param name="slots">The slots.</param>
            <remarks>See the Position Marker documentation on the synchronization slots for details.</remarks>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetSynchronizationSlots">
            <summary>
            Gets the synchronization slots.
            </summary>
            <returns>The synchronization slots</returns>
            <remarks>See the Position Marker documentation on the synchronization slots for details.</remarks>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.SetVehicleDetectionThreshold(System.Int32)">
            <summary>
            Sets the vehicle detection threshold.
            </summary>
            <param name="threshold">The threshold % (0 - 100).</param>
            <remarks>Defines the loop % limit to trigger the relay.</remarks>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetVehicleDetectionThreshold">
            <summary>
            Gets the vehicle detection threshold (0 - 100 %).
            </summary>
            <returns>The loop vehicle detection threshold</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.SetRelayControl(IDENTEC.PositionMarker.PositionMarker.RelayControl)">
            <summary>
            Sets the relay control.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetRelayControl">
            <summary>
            Gets the relay control.
            </summary>
            <returns>The relay status</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.SetLFFrequency(System.Int32)">
            <summary>
            Sets the LF frequency.
            </summary>
            <param name="frequency">The frequency.</param>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetLFFrequency">
            <summary>
            Gets the LF frequency.
            </summary>
            <returns>The loop LF Frequency</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.SetCycleDelay(System.Int32)">
            <summary>
            Sets the cycle delay.
            </summary>
            <param name="delay">Delay in 10ms steps.</param>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetCycleDelay">
            <summary>
            Gets the LF frequency.
            </summary>
            <returns>The cycle delay between slots sequence</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.SetEnableJitter(System.Boolean)">
            <summary>
            Sets the enable jitter.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetEnableJitter">
            <summary>
            Gets the enable jitter.
            </summary>
            <returns>True if Jitter is enable</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.SendLFSignal">
            <summary>
            This command is used to send a single telegram on the LF antenna.
            </summary>
            <remarks>Uses the device power parameter.</remarks>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.SendLFSignal(System.Int32)">
            <summary>
            This command is used to send a single telegram on the LF antenna.
            </summary>
            <param name="mA">The m A.</param>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.CustomLFSignal(System.Int32,System.Int32,System.Byte[])">
            <summary>
            This command is used to send a single customized telegram on the LF antenna - not to be disclosed to the end user.
            </summary>
            <param name="pow">Strength for field in DAC value (up to 255).</param>
            <param name="len">The length of data to send.</param>
            <param name="data">The data themselfes.</param>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.GetBusAddress">
            <summary>
            Gets the bus address.
            </summary>
            <returns>The bus address.</returns>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.SetBusAddress(System.Int32)">
            <summary>
            Sets the bus address.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:IDENTEC.PositionMarker.PositionMarker.ConnectSlavePort(System.Boolean)">
            <summary>
            Connects the slave port.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="P:IDENTEC.PositionMarker.PositionMarker.BootLoaderVersion">
            <summary>
            Gets the boot loader version.
            </summary>
            <value>The boot loader version.</value>
        </member>
        <member name="P:IDENTEC.PositionMarker.PositionMarker.ProtocolVersion">
            <summary>
            Gets the protocol version.
            </summary>
            <value>The protocol version.</value>
        </member>
        <member name="P:IDENTEC.PositionMarker.PositionMarker.FirmwareVersion">
            <summary>
            Gets the firmware version.
            </summary>
            <value>The firmware version.</value>
        </member>
        <member name="P:IDENTEC.PositionMarker.PositionMarker.DataStream">
            <summary>
            Gets the data stream being used by the iBusAdapter.
            </summary>
            <value>The data stream.</value>
        </member>
        <member name="P:IDENTEC.PositionMarker.PositionMarker.Status">
            <summary>
            Gets or sets the reader status.
            </summary>
            <value>The device status</value>
            <remarks>This is not the current reader status please use <see cref="M:IDENTEC.PositionMarker.PositionMarker.GetStatus"/> to read the current status</remarks>
        </member>
        <member name="P:IDENTEC.PositionMarker.PositionMarker.iBusAdapter">
            <summary>
            Gets the iBusAdapter.
            </summary>
            <value>The i bus adapter.</value>
        </member>
        <member name="P:IDENTEC.PositionMarker.PositionMarker.SerialNumber">
            <summary>
            The reader's unique serial number.
            </summary>
        </member>
        <member name="P:IDENTEC.PositionMarker.PositionMarker.MajorVersion">
            <summary>
            The major firmware version.
            </summary>
        </member>
        <member name="P:IDENTEC.PositionMarker.PositionMarker.MinorVersion">
            <summary>
            The minor firmware version.
            </summary>
        </member>
        <member name="P:IDENTEC.PositionMarker.PositionMarker.Address">
            <summary>
            Gets the bus address.
            </summary>
            <value>The bus address.</value>
        </member>
        <member name="P:IDENTEC.PositionMarker.PositionMarker.Information">
            <summary>
            Gets the information.
            </summary>
            <value>The information.</value>
        </member>
        <member name="P:IDENTEC.PositionMarker.PositionMarker.DateTimeBoot">
            <summary>
            Reports when the device booted.
            </summary>
            <value>The date time boot.</value>
        </member>
        <member name="T:IDENTEC.PositionMarker.PositionMarker.RelayControl">
            <summary>
            The relay control option
            </summary>
        </member>
        <member name="F:IDENTEC.PositionMarker.PositionMarker.RelayControl.OpenRelay">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.PositionMarker.PositionMarker.RelayControl.CloseRelay">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.PositionMarker.PositionMarker.RelayControl.CloseRelayWhenVehicleDetectionLevelAboveThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="F:IDENTEC.PositionMarker.PositionMarker.RelayControl.OpenRelayWhenVehicleDetectionLevelAboveThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="T:IDENTEC.PositionMarker.PositionMarker.DeviceParameterID">
            <summary>
            
            <seealso cref="F:IDENTEC.PositionMarker.PositionMarker.Command.GetDeviceParameter"/>
            <seealso cref="F:IDENTEC.PositionMarker.PositionMarker.Command.SetDeviceParameter"/>
            </summary>			
        </member>
        <member name="T:IDENTEC.Frequency">
            <summary>
            The operating frequency of the device.
            <seealso cref="P:IDENTEC.Tags.Tag.Region"/>	
            </summary>
        </member>
        <member name="F:IDENTEC.Frequency.Indeterminate">
            <summary>
            The frequency is unknown.
            </summary>
        </member>
        <member name="F:IDENTEC.Frequency.European">
            <summary>
            European or 868 MHz operating region. Also known as International for i-D2 tags.
            </summary>
        </member>
        <member name="F:IDENTEC.Frequency.NorthAmerican">
            <summary>
            North American or 916.5 MHz operating region.
            </summary>
        </member>
        <member name="F:IDENTEC.Frequency.Every">
            <summary>
            Capable of operating all the regions.
            </summary>
        </member>
        <member name="F:IDENTEC.Frequency.Taiwanese">
            <summary>
            Taiwanese or 925 MHz operating region.
            </summary>
        </member>
        <member name="F:IDENTEC.Frequency.Indian">
            <summary>
            Indian or 866 MHz operating region.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.CRC">
            <summary>
            The CRC class that helps us calculate a CRC for communications with the iCard
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.DateTimeConvertor">
            <summary>
            Class to provide conversions for time_t and DateTime
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.DateTimeConvertor.Convert_time_t(System.UInt32)">
            <summary>
            Converts a time_t value to the relevant DateTime value
            </summary>
            <param name="t">A C time value, where the time is passed as UTC</param>
            <returns>A DateTime value, in the current time zone.</returns>
        </member>
        <member name="T:IDENTEC.Readers.iCardProductionInformation">
            <summary>
            Encapsulates the production information.
            </summary>
            <remarks>This information is queried from the reader during the connection procedure.</remarks>
        </member>
        <member name="M:IDENTEC.Readers.iCardProductionInformation.#ctor">
            <summary>
            Initializes a new iCardProductionInformation object.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCardProductionInformation.Year">
            <summary>
            The production year.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCardProductionInformation.Week">
            <summary>
            The production week.
            </summary>
        </member>
        <member name="P:IDENTEC.Readers.iCardProductionInformation.ProductionNumber">
            <summary>
            The production number.
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.RegionException">
            <summary>
            The exception that is thrown when a reader is asked to switch to a regional frequency it doesn't support.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.RegionException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.RegionException.#ctor(System.String)">
            <summary>
            Constructor containing a message.
            </summary>
            <param name="message">Message detailing the exception source.</param>
        </member>
        <member name="M:IDENTEC.Readers.RegionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message and a reference to the inner 
            exception that is the cause of this exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The inner exception reference.</param>
        </member>
        <member name="T:IDENTEC.Readers.TagDataFormatter">
            <summary>
            Helper class for higher level tag data read/write functions
            </summary>
        </member>
        <member name="T:IDENTEC.Readers.CRCException">
            <summary>
            General CRC calculation exception.
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.CRCException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Readers.CRCException.#ctor(System.String)">
            <summary>
            Constructor containing a message.
            </summary>
            <param name="message">Message detailing the exception source.</param>
        </member>
        <member name="M:IDENTEC.Readers.CRCException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message and a reference to the inner 
            exception that is the cause of this exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The inner exception reference.</param>
        </member>
        <member name="M:IDENTEC.Readers.CRCException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Readers.CRCException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:IDENTEC.Readers.CRCException.CalculatedCRC">
            <summary>
            Gets or sets the calculated CRC.
            </summary>
            <value>The calculated CRC.</value>
        </member>
        <member name="P:IDENTEC.Readers.CRCException.GivenCRC">
            <summary>
            Gets or sets the given CRC.
            </summary>
            <value>The given CRC.</value>
        </member>
        <member name="P:IDENTEC.Readers.CRCException.Buffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>The buffer.</value>
        </member>
        <member name="T:IDENTEC.AntennaSignals">
            <summary>
            Represents the receive signal that the tag was detected at for up to 4 antennas; values are in dBm
            </summary>
        </member>
        <member name="F:IDENTEC.AntennaSignals.InvalidSignal">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDENTEC.AntennaSignals.#ctor(IDENTEC.AntennaSignals)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.AntennaSignals"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:IDENTEC.AntennaSignals.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.AntennaSignals"/> class.
            </summary>
            <param name="ant1Signal">The ant1 signal.</param>
        </member>
        <member name="M:IDENTEC.AntennaSignals.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.AntennaSignals"/> class.
            </summary>
            <param name="ant1Signal">The ant1 signal.</param>
            <param name="ant2Signal">The ant2 signal.</param>
        </member>
        <member name="M:IDENTEC.AntennaSignals.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.AntennaSignals"/> class.
            </summary>
            <param name="ant1Signal">The ant1 signal.</param>
            <param name="ant2Signal">The ant2 signal.</param>
            <param name="ant3Signal">The ant3 signal.</param>
        </member>
        <member name="M:IDENTEC.AntennaSignals.Invalidate">
            <summary>
            Invalidates this instance (sets all the values to -128).
            </summary>
        </member>
        <member name="M:IDENTEC.AntennaSignals.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.AntennaSignals"/> class.
            </summary>
            <param name="ant1Signal">The ant1 signal.</param>
            <param name="ant2Signal">The ant2 signal.</param>
            <param name="ant3Signal">The ant3 signal.</param>
            <param name="ant4Signal">The ant4 signal.</param>
        </member>
        <member name="M:IDENTEC.AntennaSignals.GetSignal(System.Int32)">
            <summary>
            Gets the signal on the specified antenna (1-4).
            </summary>
            <param name="antenna">The antenna.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.AntennaSignals.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current signal for each antenna.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:IDENTEC.AntennaSignals.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:IDENTEC.AntennaSignals.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:IDENTEC.AntennaSignals.op_Equality(IDENTEC.AntennaSignals,IDENTEC.AntennaSignals)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:IDENTEC.AntennaSignals.op_Inequality(IDENTEC.AntennaSignals,IDENTEC.AntennaSignals)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:IDENTEC.AntennaSignals.BestReceiveAntenna">
            <summary>
            Gets the antenna that received the best signal from the tag.
            </summary>
            <value>The best receive antenna.</value>        
        </member>
        <member name="P:IDENTEC.AntennaSignals.BestReceiveSignal">
            <summary>
            Gets the best receive signal.
            </summary>
            <value>The best receive signal.</value>
        </member>
        <member name="P:IDENTEC.AntennaSignals.AntennasWithValidSignalCount">
            <summary>
            Gets the antenna count for antennas with a valid signal.
            </summary>
            <value>The antennas with valid signal count.</value>
        </member>
        <member name="P:IDENTEC.AntennaSignals.Item(System.Int32)">
            <summary>
            The 1 based index to the antenna siganl; InvalidSignal if invalid
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:IDENTEC.MultiAntennaSignals">
            <summary>
            Represents a large number of antenna RSSI values
            </summary>
        </member>
        <member name="F:IDENTEC.MultiAntennaSignals.MinAntennas">
            <summary>
            
            </summary>
        </member>
        <member name="M:IDENTEC.MultiAntennaSignals.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.MultiAntennaSignals"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.MultiAntennaSignals.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.MultiAntennaSignals"/> class.
            </summary>
            <param name="totalAntennas">The total antennas.</param>
        </member>
        <member name="M:IDENTEC.MultiAntennaSignals.#ctor(IDENTEC.MultiAntennaSignals)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.MultiAntennaSignals"/> class.
            </summary>
            <param name="sigs">The MultiAntennaSignals object to initialize from.</param>
        </member>
        <member name="M:IDENTEC.MultiAntennaSignals.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:IDENTEC.MultiAntennaSignals"></see>.
            </returns>
        </member>
        <member name="M:IDENTEC.MultiAntennaSignals.SetSignal(System.Int32,System.Int32)">
            <summary>
            Sets the signal on the specified antenna.
            </summary>
            <param name="antenna">The antenna.</param>
            <param name="signal">The signal.</param>
        </member>
        <member name="M:IDENTEC.MultiAntennaSignals.GetSignal(System.Int32)">
            <summary>
            Gets the signal from the specified antenna.
            </summary>
            <param name="antenna">The antenna.</param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.MultiAntennaSignals.Resize(System.Int32)">
            <summary>
            Resizes the instance to the specified new size.
            </summary>
            <param name="totalAntennas">The new size.</param>
        </member>
        <member name="M:IDENTEC.MultiAntennaSignals.Copy(IDENTEC.MultiAntennaSignals)">
            <summary>
            Copies the specified antennas.
            </summary>
            <param name="antennas">The antennas.</param>
        </member>
        <member name="M:IDENTEC.MultiAntennaSignals.Invalidate">
            <summary>
            Invalidates this instance.
            </summary>
        </member>
        <member name="P:IDENTEC.MultiAntennaSignals.SendingAntenna">
            <summary>
            Gets or sets the sending antenna; that is, the antenna that called on the tag.
            </summary>
            <value>The sending antenna.</value>
        </member>
        <member name="P:IDENTEC.MultiAntennaSignals.Item(System.Int32)">
            <summary>
            Gets or sets the  with the specified anntenna (1 based).
            </summary>        
            <value></value>
        </member>
        <member name="P:IDENTEC.MultiAntennaSignals.AntennasWithValidSignalCount">
            <summary>
            Gets the antenna count for antennas with a valid signal.
            </summary>
            <value>The antennas with valid signal count.</value>
        </member>
        <member name="P:IDENTEC.MultiAntennaSignals.BestReceiveAntenna">
            <summary>
            Gets the best receive antenna.
            </summary>
            <value>The best receive antenna.</value>
        </member>
        <member name="P:IDENTEC.MultiAntennaSignals.BestReceiveSignal">
            <summary>
            Gets the best receive signal.
            </summary>
            <value>The best receive signal.</value>
        </member>
        <member name="P:IDENTEC.MultiAntennaSignals.Count">
            <summary>
            Gets the antenna count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:IDENTEC.Tags.BatteryStatus">
            <summary>
            The battery status of the tag.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.BatteryStatus.Poor">
            <summary>
            The battery status is unacceptable; consider replacing the tag.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.BatteryStatus.Good">
            <summary>
            The battery is working properly.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.BatteryStatus.Indeterminate">
            <summary>
            The battery status could not be determined.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.TagReadDataResult">
            <summary>
            Helper class for checking the result of a tag read operation.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.TagReadDataResult.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.TagReadDataResult.#ctor(System.Byte[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Specifies the data, success flags and number of bytes read from the tag.
            </summary>
            <param name="data">The raw binary data as read from the tag.</param>
            <param name="success">true for succesful read, else false.</param>
            <param name="bytesRead">The actual number of bytes read from the tag.</param>
            <param name="startAddress">The address that data was read from.</param>
        </member>
        <member name="M:IDENTEC.Tags.TagReadDataResult.GetData">
            <summary>
            [Obsolete] Gets the data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Tags.TagReadDataResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:IDENTEC.Tags.TagReadDataResult"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:IDENTEC.Tags.TagReadDataResult"/>.
            </returns>
        </member>
        <member name="P:IDENTEC.Tags.TagReadDataResult.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:IDENTEC.Tags.TagReadDataResult.StartAddress">
            <summary>
            Gets or sets the start address.
            </summary>
            <value>The start address.</value>
        </member>
        <member name="P:IDENTEC.Tags.TagReadDataResult.Success">
            <summary>
            The result of the operation.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.TagReadDataResult.BytesRead">
            <summary>
            The number of bytes actually read from the tag.		
            </summary>
            <remarks>If the operation was incomplete then this value will specify how many bytes were actually transferred.</remarks>
        </member>
        <member name="T:IDENTEC.Tags.TagReadStringResult">
            <summary>
            Helper class for checking the result of a tag read string operation.				
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.TagReadStringResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.TagReadStringResult"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.TagReadStringResult.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.TagReadStringResult"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="bytesRead">The bytes read.</param>
        </member>
        <member name="P:IDENTEC.Tags.TagReadStringResult.Text">
            <summary>
            The string data as read from the tag
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.TagReadStringResult.Success">
            <summary>
            The result of the operation.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.TagReadStringResult.BytesRead">
            <summary>
            The number of bytes actually read from the tag.		
            </summary>
            <remarks>If the operation was incomplete then this value will specify how many bytes were actually transferred.</remarks>
        </member>
        <member name="T:IDENTEC.Tags.TagWriteDataResult">
            <summary>
            Helper class for checking the result of a tag write operation.	
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.TagWriteDataResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.TagWriteDataResult"/> class.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.TagWriteDataResult.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.TagWriteDataResult"/> class.
            </summary>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="bytesRead">The bytes read.</param>
        </member>
        <member name="P:IDENTEC.Tags.TagWriteDataResult.Success">
            <summary>
            The result of the operation.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.TagWriteDataResult.BytesWritten">
            <summary>
            The number of bytes actually written to the tag.		
            </summary>
            <remarks>If the operation was incomplete then this value will specify how many bytes were actually transferred.</remarks>
        </member>
        <member name="T:IDENTEC.Tags.TagCollection">
            <summary>
            Represents a collection of tag objects.
            </summary>
            <remarks>This collection is a helper to the scanning methods in the reader class.</remarks>
        </member>
        <member name="M:IDENTEC.Tags.TagCollection.BinarySearch(IDENTEC.Tags.Tag)">
            <summary>
            Uses a binary search algorithm to locate a specific element in the sorted TagCollection.
            </summary>
            <param name="tag">The tag to search for.</param>
            <returns>The i of the tag, negative if not found.</returns>
        </member>
        <member name="M:IDENTEC.Tags.TagCollection.#ctor">
            <summary>
            Initializes a new instance of the TagCollection class.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.TagCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the TagCollection class with a specified initial capacity.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.TagCollection.#ctor(IDENTEC.Tags.TagCollection)">
            <summary>
            Initializes a new instance of the TagCollection class with the items of another TagCollection instance.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.TagCollection.Add(IDENTEC.Tags.Tag)">
            <summary>
            Adds a new tag to the collection and returns the object.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Tags.TagCollection.CopyTo(IDENTEC.Tags.Tag[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:IDENTEC.Tags.TagCollection.IndexOf(IDENTEC.Tags.Tag)">
            <summary>
            Returns the i of the specified tag.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Tags.TagCollection.Contains(IDENTEC.Tags.Tag)">
            <summary>
            Query the colletion to see if it contains the specified tag.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:IDENTEC.Tags.TagCollection.Insert(System.Int32,IDENTEC.Tags.Tag)">
            <summary>
            Inserts the tag at the specified index.
            </summary>
            <param name="index"></param>
            <param name="tag"></param>
        </member>
        <member name="M:IDENTEC.Tags.TagCollection.Remove(IDENTEC.Tags.Tag)">
            <summary>
            Removes the specified tag.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="P:IDENTEC.Tags.TagCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:IDENTEC.Tags.Tag"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:IDENTEC.Tags.PartialTagCommunicationsException">
            <summary>
            Communications with the tag that involve multiple low level read/write operations may experience a loss of communications with the tag. In this case a PartialTagCommunicationsException is thrown.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.PartialTagCommunicationsException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.PartialTagCommunicationsException.#ctor(System.String)">
            <summary>
            Constructor containing a message.
            </summary>
            <param name="message">Message detailing the exception source.</param>
        </member>
        <member name="M:IDENTEC.Tags.PartialTagCommunicationsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new PartialTagCommunicationsException object withe a message and internal exception.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:IDENTEC.Tags.InvalidTagOperationException">
            <summary>
            When communicating with a tag, it is possible to ask it to perform an action that it is incapable of. For example asking a non temperature logging i-Q tag to start logging.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.InvalidTagOperationException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.InvalidTagOperationException.#ctor(System.String)">
            <summary>
            Constructor containing a message.
            </summary>
            <param name="message">Message detailing the exception source.</param>
        </member>
        <member name="M:IDENTEC.Tags.InvalidTagOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.InvalidTagOperationException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:IDENTEC.Tags.TagDataException">
            <summary>
            This type of exception is thrown when reading data from a tag that fails the integrity check (format, CRC, and length)
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.TagDataException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.TagDataException.#ctor(System.String)">
            <summary>
            Constructor containing a message.
            </summary>
            <param name="message">Message detailing the exception source.</param>
        </member>
        <member name="M:IDENTEC.Tags.TagDataException.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.TagDataException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="tagData">The tag data.</param>
        </member>
        <member name="M:IDENTEC.Tags.TagDataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.TagDataException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:IDENTEC.Tags.TagDataException.DataRead">
            <summary>
            The data (if any) that was actually read from the tag.
            </summary>
            <remarks>The data will only be available if the CRC failed. If the header format is incorrect then data will be unavailable.</remarks>
        </member>
        <member name="T:IDENTEC.Tags.LoopData">
            <summary>
            The loop data structure reported by i-B and i-Q tags with the 'L' designation. It contains the last two loop ID's that were detected and the respective time that each loop was detected by the tag.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.LoopData.#ctor(IDENTEC.Tags.LoopData)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.LoopData"/> class.
            </summary>
            <param name="l">The l.</param>
        </member>
        <member name="M:IDENTEC.Tags.LoopData.#ctor">
            <summary>
            Initializes a new instance of a LoopData object
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.LoopData.m_NewerRSSI">
            <summary>
            The newer or latest loop detection time.
            </summary>
            <remarks>The counter reported by the tag will report a maximum of 65535 seconds ago (approximately 18 hours).</remarks>
        </member>
        <member name="P:IDENTEC.Tags.LoopData.OlderPosition">
            <summary>
            The older or previous position marker information.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.LoopData.NewerPosition">
            <summary>
            The newer or most recent position marker information.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.LoopData.NewerRSSI">
            <summary>
            <B>R</B>elative <B>S</B>ignal <B>S</B>trength <B>I</B>ndicator for the 125 kHz field strength of the newer loop.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.LoopPositionInfo">
            <summary>
            Represents position ID, time and validity for loop data associated with i-B2L tags.
            </summary>
            <seealso cref="T:IDENTEC.Tags.LoopData"/>
        </member>
        <member name="F:IDENTEC.Tags.LoopPositionInfo.LoopTimeExpires">
            <summary>
            The length of time for which the loop time is valid after a loop is detected.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.LoopPositionInfo.#ctor">
            <summary>
            Initializes a new LoopPositionInfo object
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.LoopPositionInfo.#ctor(System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Initializes a new LoopPositionInfo object.
            </summary>
            <param name="loopID">The loop ID. 0 for invalid loop.</param>
            <param name="dt">The time that the loop was detected at.</param>
            <param name="validTime">Notes whether the time is valid or not.</param>
        </member>
        <member name="M:IDENTEC.Tags.LoopPositionInfo.#ctor(IDENTEC.Tags.LoopPositionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.LoopPositionInfo"/> class.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="P:IDENTEC.Tags.LoopPositionInfo.LoopID">
            <summary>
            The loop ID.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.LoopPositionInfo.PositionTime">
            <summary>
            The loop detection time.
            </summary>
            <remarks>The counter reported by the tag will report a maximum of 65535 seconds ago (approximately 18 hours).</remarks>
        </member>
        <member name="P:IDENTEC.Tags.LoopPositionInfo.IsPositionValid">
            <summary>
            Returns if the position time is valid or not.
            </summary>
        </member>
        <member name="T:IDENTEC.Tags.BeaconTags.BeaconTag">
            <summary>
            Represents a beacon type tag.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.BeaconTags.BeaconTag.ID_StiQBLs">
            <summary>
            Lower limit of ID for i-B2 series of beacon Tags based on iQ.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.BeaconTags.BeaconTag.ID_EniQBLs">
            <summary>
            Upper limit of ID for i-B2 series of beacon Tags based on iQ.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.BeaconTags.BeaconTag.ID_StiB2Ls">
            <summary>
            Lower limit of ID for i-B2 series of beacon Tags using marker.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.BeaconTags.BeaconTag.ID_EniB2Ls">
            <summary>
            Upper limit of ID for i-B2 series of beacon Tags using marker.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.BeaconTags.BeaconTag.ID_StSLOTS">
            <summary>
            Lower limit of ID for i-B2 series of beacon Tags using SlotWidth.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.BeaconTags.BeaconTag.ID_StEXDAT">
            <summary>
            Upper limit of ID for i-B2 series of beacon Tags using SlotWidth.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.BeaconTags.BeaconTag.ID_EnEXDAT">
            <summary>
            Lower limit of ID for i-B2 series of beacon Tags using ExtendeData.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.BeaconTags.BeaconTag.ID_StEXTMP">
            <summary>
            Lower limit of ID for i-B2 series of beacon Tags using battery for ExtendeTemperature.
            </summary>
        </member>
        <member name="F:IDENTEC.Tags.BeaconTags.BeaconTag.ID_EnEXTMP">
            <summary>
            Upper limit of ID for i-B2 series of beacon Tags using battery for ExtendeTemperature.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.BeaconTags.BeaconTag.#ctor(System.UInt32)">
            <summary>
            Initializes a new Tag object with an id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:IDENTEC.Tags.BeaconTags.BeaconTag.#ctor">
            <summary>
            Initializes a new Tag object.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.BeaconTags.BeaconTag.#ctor(IDENTEC.Tags.BeaconTags.BeaconTag)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.BeaconTags.BeaconTag"/> class.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="T:IDENTEC.Tags.BeaconTags.iB2Tag">
            <summary>
            Represents the i-B2 series of beacon Tags from IDENTEC SOLUTIONS Inc.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.BeaconTags.iB2Tag.#ctor">
            <summary>
            Initializes a new iB2Tag object.
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.BeaconTags.iB2Tag.#ctor(IDENTEC.Tags.BeaconTags.iB2Tag)">
            <summary>
            Initializes a new instance of the <see cref="T:IDENTEC.Tags.BeaconTags.iB2Tag"/> class.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:IDENTEC.Tags.BeaconTags.iB2Tag.GetSignalStrength(System.Int32)">
            <summary>
            A method to get the signal strength from the specified antenna.
            </summary>
            <param name="antenna">The antenna number for the specified signal.</param>
            <returns>The relative signal strength as calculated by the reader.</returns>
            <remarks>This method is only valid for tags detected on readers with multiple antennas.</remarks>
        </member>
        <member name="M:IDENTEC.Tags.BeaconTags.iB2Tag.#ctor(System.UInt32)">
            <summary>
            Initializes a new Tag object with an id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2Tag.MaxSignal">
            <summary>
            The maximum signal that the tag was seen at if the tag was detected multiple times by the reader.
            </summary>
            <seealso cref="P:IDENTEC.Tags.Tag.Signal"/>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2Tag.DetectedCount">
            <summary>
            Gets the detected count (how many times the reader saw the tag since the last reader query.
            </summary>
            <value>The detected count.</value>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2Tag.FirstSeen">
            <summary>
            The first time the tag was seen. 
            <seealso cref="M:IDENTEC.Readers.BeaconReaders.iPortR2.GetTags(System.Boolean)"/>
            </summary>				
            <remarks>This time is relative to the last time the call was made to the i-PORT R2. This value is only valid after making a call to the i-PORT R2's Get Tags with the extended option set to true.</remarks>				
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2Tag.LowByteAgeCount">
            <summary>
            A count to help estimate communication assurance.
            </summary>
            <remarks>This byte counts up by one every telegram (0 - 255).</remarks>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2Tag.HighByteAgeCount">
            <summary>
            A count to help estimate tag life.
            </summary>
            <remarks>This byte counts up by one roughly once every 1 million telegrams (12 days @ 1 second ping rate).</remarks>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2Tag.Flags">
            <summary>
            The flags that were set on the tag.
            </summary>
            <remarks>Note that the Flags are actually only 1 byte, but we expose this property in this assembly as an integer so that it is CLSCompliant.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2Tag.Battery">
            <summary>
            Gets the tag battery status.
            </summary>
            <remarks>If the tag has not been seen on an antenna then 0 will be returned. </remarks>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2Tag.ProtocolID">
            <summary>
            Gets the tag Protocol ID.
            </summary>
            <value>The Protocol ID.</value>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2Tag.Data">
            <summary>
            The raw data of the telegram
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2Tag.LoopData">
            <summary>
            The loop information reported by i-B2L tags.
            If the tag does not have any loop data returns null
            </summary>				
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2Tag.AnntennaInfo">
            <summary>
            Lists the antenna information for each antenna that detected the tag.
            </summary>                
        </member>
        <member name="T:IDENTEC.Tags.BeaconTags.iB2AntennaDetection">
            <summary>
            Represents the information reported by each antenna on the reader.
            </summary>
            <remarks>Relevant when used with the <see cref="M:IDENTEC.Readers.BeaconReaders.iPortMB.GetTagsOnSeparateAntennas"/>.</remarks>
        </member>
        <member name="M:IDENTEC.Tags.BeaconTags.iB2AntennaDetection.#ctor">
            <summary>
            Initializes a new iB2AntennaDetection instance
            </summary>
        </member>
        <member name="M:IDENTEC.Tags.BeaconTags.iB2AntennaDetection.#ctor(IDENTEC.Tags.BeaconTags.iB2AntennaDetection)">
            <summary>
            Copy constructor to initialize from an existing instance
            </summary>
            <param name="b"></param>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2AntennaDetection.AntennaNumber">
            <summary>
            The reader antenna number the tag was detected on.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2AntennaDetection.FirstSeen">
            <summary>
            The first time the tag was detected by the reader since the last query from the host.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2AntennaDetection.LastSeen">
            <summary>
            The last time the tag was detected by the reader since the last query from the host.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2AntennaDetection.Signal">
            <summary>
            The most current signal as detected by the reader.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2AntennaDetection.SignalMax">
            <summary>
            The maximum signal as detected by the reader since the last query from the host.
            </summary>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2AntennaDetection.DetectionCount">
            <summary>
            The number of times the reader detected the tag since the last query. <B>If it is 0 then the tag was not detected on the specified antenna.</B>
            </summary>
            <remarks>Up to a maximum of 255.</remarks>
        </member>
        <member name="P:IDENTEC.Tags.BeaconTags.iB2AntennaDetection.EstimatedBeaconRate">
            <summary>
            Estimates the beacon interval based on the first and last times the tag was seen with the number of times the tag was detected.
            </summary>
        </member>
    </members>
</doc>
