#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TimetrackerData
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Timetracker")]
	public partial class TimetrackerLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertTimeEntry(TimeEntry instance);
    partial void UpdateTimeEntry(TimeEntry instance);
    partial void DeleteTimeEntry(TimeEntry instance);
    partial void InsertSecurity(Security instance);
    partial void UpdateSecurity(Security instance);
    partial void DeleteSecurity(Security instance);
    partial void InsertUserSession(UserSession instance);
    partial void UpdateUserSession(UserSession instance);
    partial void DeleteUserSession(UserSession instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertGroupXProject(GroupXProject instance);
    partial void UpdateGroupXProject(GroupXProject instance);
    partial void DeleteGroupXProject(GroupXProject instance);
    partial void InsertGroupXSecurity(GroupXSecurity instance);
    partial void UpdateGroupXSecurity(GroupXSecurity instance);
    partial void DeleteGroupXSecurity(GroupXSecurity instance);
    partial void InsertUserXGroup(UserXGroup instance);
    partial void UpdateUserXGroup(UserXGroup instance);
    partial void DeleteUserXGroup(UserXGroup instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public TimetrackerLinqDataContext() : 
				base(global::TimetrackerData.Properties.Settings.Default.TimetrackerConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public TimetrackerLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimetrackerLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimetrackerLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimetrackerLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<TimeEntry> TimeEntries
		{
			get
			{
				return this.GetTable<TimeEntry>();
			}
		}
		
		public System.Data.Linq.Table<Security> Securities
		{
			get
			{
				return this.GetTable<Security>();
			}
		}
		
		public System.Data.Linq.Table<UserSession> UserSessions
		{
			get
			{
				return this.GetTable<UserSession>();
			}
		}
		
		public System.Data.Linq.Table<vwTimeEntry> vwTimeEntries
		{
			get
			{
				return this.GetTable<vwTimeEntry>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<GroupXProject> GroupXProjects
		{
			get
			{
				return this.GetTable<GroupXProject>();
			}
		}
		
		public System.Data.Linq.Table<GroupXSecurity> GroupXSecurities
		{
			get
			{
				return this.GetTable<GroupXSecurity>();
			}
		}
		
		public System.Data.Linq.Table<UserXGroup> UserXGroups
		{
			get
			{
				return this.GetTable<UserXGroup>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[Table(Name="dbo.Projects")]
	[DataContract()]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _ProjectVisible;
		
		private EntityRef<GroupXProject> _GroupXProject;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnProjectVisibleChanging(bool value);
    partial void OnProjectVisibleChanged();
    #endregion
		
		public Project()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ProjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._GroupXProject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1024)")]
		[DataMember(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectVisible", DbType="Bit NOT NULL")]
		[DataMember(Order=4)]
		public bool ProjectVisible
		{
			get
			{
				return this._ProjectVisible;
			}
			set
			{
				if ((this._ProjectVisible != value))
				{
					this.OnProjectVisibleChanging(value);
					this.SendPropertyChanging();
					this._ProjectVisible = value;
					this.SendPropertyChanged("ProjectVisible");
					this.OnProjectVisibleChanged();
				}
			}
		}
		
		[Association(Name="GroupXProject_Project", Storage="_GroupXProject", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public GroupXProject GroupXProject
		{
			get
			{
				if ((this.serializing 
							&& (this._GroupXProject.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._GroupXProject.Entity;
			}
			set
			{
				if ((this._GroupXProject.Entity != value))
				{
					this.SendPropertyChanging();
					this._GroupXProject.Entity = value;
					this.SendPropertyChanged("GroupXProject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._GroupXProject = default(EntityRef<GroupXProject>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.TimeEntries")]
	[DataContract()]
	public partial class TimeEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimeEntryID;
		
		private int _UserID;
		
		private int _ProjectID;
		
		private System.DateTime _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private string _Notes;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeEntryIDChanging(int value);
    partial void OnTimeEntryIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public TimeEntry()
		{
			this.Initialize();
		}
		
		[Column(Storage="_TimeEntryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int TimeEntryID
		{
			get
			{
				return this._TimeEntryID;
			}
			set
			{
				if ((this._TimeEntryID != value))
				{
					this.OnTimeEntryIDChanging(value);
					this.SendPropertyChanging();
					this._TimeEntryID = value;
					this.SendPropertyChanged("TimeEntryID");
					this.OnTimeEntryIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_StartTime", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		[DataMember(Order=5)]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="VarChar(4096)")]
		[DataMember(Order=6)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Project_TimeEntry", Storage="_Project", ThisKey="ProjectID", IsForeignKey=true)]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public Project Project
		{
			get
			{
				if ((this.serializing 
							&& (this._Project.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._Project.Entity;
			}
			set
			{
				if ((this._Project.Entity != value))
				{
					this.SendPropertyChanging();
					this._Project.Entity = value;
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[Association(Name="User_TimeEntry", Storage="_User", ThisKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TimeEntries.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TimeEntries.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Project = default(EntityRef<Project>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Security")]
	[DataContract()]
	public partial class Security : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SecurityID;
		
		private string _PageURL;
		
		private string _ControlName;
		
		private EntityRef<GroupXSecurity> _GroupXSecurity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSecurityIDChanging(int value);
    partial void OnSecurityIDChanged();
    partial void OnPageURLChanging(string value);
    partial void OnPageURLChanged();
    partial void OnControlNameChanging(string value);
    partial void OnControlNameChanged();
    #endregion
		
		public Security()
		{
			this.Initialize();
		}
		
		[Column(Storage="_SecurityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int SecurityID
		{
			get
			{
				return this._SecurityID;
			}
			set
			{
				if ((this._SecurityID != value))
				{
					if (this._GroupXSecurity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecurityIDChanging(value);
					this.SendPropertyChanging();
					this._SecurityID = value;
					this.SendPropertyChanged("SecurityID");
					this.OnSecurityIDChanged();
				}
			}
		}
		
		[Column(Storage="_PageURL", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string PageURL
		{
			get
			{
				return this._PageURL;
			}
			set
			{
				if ((this._PageURL != value))
				{
					this.OnPageURLChanging(value);
					this.SendPropertyChanging();
					this._PageURL = value;
					this.SendPropertyChanged("PageURL");
					this.OnPageURLChanged();
				}
			}
		}
		
		[Column(Storage="_ControlName", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string ControlName
		{
			get
			{
				return this._ControlName;
			}
			set
			{
				if ((this._ControlName != value))
				{
					this.OnControlNameChanging(value);
					this.SendPropertyChanging();
					this._ControlName = value;
					this.SendPropertyChanged("ControlName");
					this.OnControlNameChanged();
				}
			}
		}
		
		[Association(Name="GroupXSecurity_Security", Storage="_GroupXSecurity", ThisKey="SecurityID", OtherKey="SecurityID", IsForeignKey=true)]
		public GroupXSecurity GroupXSecurity
		{
			get
			{
				return this._GroupXSecurity.Entity;
			}
			set
			{
				GroupXSecurity previousValue = this._GroupXSecurity.Entity;
				if (((previousValue != value) 
							|| (this._GroupXSecurity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupXSecurity.Entity = null;
						previousValue.Securities.Remove(this);
					}
					this._GroupXSecurity.Entity = value;
					if ((value != null))
					{
						value.Securities.Add(this);
						this._SecurityID = value.SecurityID;
					}
					else
					{
						this._SecurityID = default(int);
					}
					this.SendPropertyChanged("GroupXSecurity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._GroupXSecurity = default(EntityRef<GroupXSecurity>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.UserSessions")]
	[DataContract()]
	public partial class UserSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserSessionID;
		
		private int _UserID;
		
		private System.Guid _SessionID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserSessionIDChanging(int value);
    partial void OnUserSessionIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnSessionIDChanging(System.Guid value);
    partial void OnSessionIDChanged();
    #endregion
		
		public UserSession()
		{
			this.Initialize();
		}
		
		[Column(Storage="_UserSessionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int UserSessionID
		{
			get
			{
				return this._UserSessionID;
			}
			set
			{
				if ((this._UserSessionID != value))
				{
					this.OnUserSessionIDChanging(value);
					this.SendPropertyChanging();
					this._UserSessionID = value;
					this.SendPropertyChanged("UserSessionID");
					this.OnUserSessionIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_SessionID", DbType="UniqueIdentifier NOT NULL")]
		[DataMember(Order=3)]
		public System.Guid SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[Association(Name="User_UserSession", Storage="_User", ThisKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserSessions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserSessions.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.vwTimeEntries")]
	[DataContract()]
	public partial class vwTimeEntry
	{
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Company;
		
		private string _Notes;
		
		private string _Name;
		
		private int _UserID;
		
		private int _TimeEntryID;
		
		private bool _ProjectVisible;
		
		private System.DateTime _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private System.Nullable<double> _Elapsed_Time;
		
		private int _ProjectID;
		
		public vwTimeEntry()
		{
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=1)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this._Company = value;
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="VarChar(4096)")]
		[DataMember(Order=4)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this._Notes = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_TimeEntryID", DbType="Int NOT NULL")]
		[DataMember(Order=7)]
		public int TimeEntryID
		{
			get
			{
				return this._TimeEntryID;
			}
			set
			{
				if ((this._TimeEntryID != value))
				{
					this._TimeEntryID = value;
				}
			}
		}
		
		[Column(Storage="_ProjectVisible", DbType="Bit NOT NULL")]
		[DataMember(Order=8)]
		public bool ProjectVisible
		{
			get
			{
				return this._ProjectVisible;
			}
			set
			{
				if ((this._ProjectVisible != value))
				{
					this._ProjectVisible = value;
				}
			}
		}
		
		[Column(Storage="_StartTime", DbType="DateTime NOT NULL")]
		[DataMember(Order=9)]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this._StartTime = value;
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		[DataMember(Order=10)]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this._EndTime = value;
				}
			}
		}
		
		[Column(Name="[Elapsed Time]", Storage="_Elapsed_Time", DbType="Float")]
		[DataMember(Order=11)]
		public System.Nullable<double> Elapsed_Time
		{
			get
			{
				return this._Elapsed_Time;
			}
			set
			{
				if ((this._Elapsed_Time != value))
				{
					this._Elapsed_Time = value;
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL")]
		[DataMember(Order=12)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Groups")]
	[DataContract()]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _GroupName;
		
		private string _GroupDescription;
		
		private System.Nullable<int> _Status;
		
		private EntitySet<GroupXSecurity> _GroupXSecurities;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnGroupDescriptionChanging(string value);
    partial void OnGroupDescriptionChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public Group()
		{
			this.Initialize();
		}
		
		[Column(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_GroupDescription", DbType="VarChar(4096)")]
		[DataMember(Order=3)]
		public string GroupDescription
		{
			get
			{
				return this._GroupDescription;
			}
			set
			{
				if ((this._GroupDescription != value))
				{
					this.OnGroupDescriptionChanging(value);
					this.SendPropertyChanging();
					this._GroupDescription = value;
					this.SendPropertyChanged("GroupDescription");
					this.OnGroupDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="Group_GroupXSecurity", Storage="_GroupXSecurities", OtherKey="GroupID")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<GroupXSecurity> GroupXSecurities
		{
			get
			{
				if ((this.serializing 
							&& (this._GroupXSecurities.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._GroupXSecurities;
			}
			set
			{
				this._GroupXSecurities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupXSecurities(GroupXSecurity entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupXSecurities(GroupXSecurity entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void Initialize()
		{
			this._GroupXSecurities = new EntitySet<GroupXSecurity>(new Action<GroupXSecurity>(this.attach_GroupXSecurities), new Action<GroupXSecurity>(this.detach_GroupXSecurities));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.GroupXProject")]
	[DataContract()]
	public partial class GroupXProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GxPID;
		
		private int _GroupID;
		
		private int _ProjectID;
		
		private EntityRef<Group> _Group;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGxPIDChanging(int value);
    partial void OnGxPIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    #endregion
		
		public GroupXProject()
		{
			this.Initialize();
		}
		
		[Column(Storage="_GxPID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int GxPID
		{
			get
			{
				return this._GxPID;
			}
			set
			{
				if ((this._GxPID != value))
				{
					this.OnGxPIDChanging(value);
					this.SendPropertyChanging();
					this._GxPID = value;
					this.SendPropertyChanged("GxPID");
					this.OnGxPIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectID", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[Association(Name="Group_GroupXProject", Storage="_Group", ThisKey="GroupID", IsForeignKey=true)]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Group Group
		{
			get
			{
				if ((this.serializing 
							&& (this._Group.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._Group.Entity;
			}
			set
			{
				if ((this._Group.Entity != value))
				{
					this.SendPropertyChanging();
					this._Group.Entity = value;
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.GroupXSecurity")]
	[DataContract()]
	public partial class GroupXSecurity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GxSID;
		
		private int _GroupID;
		
		private int _SecurityID;
		
		private EntitySet<Security> _Securities;
		
		private EntityRef<Group> _Group;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGxSIDChanging(int value);
    partial void OnGxSIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnSecurityIDChanging(int value);
    partial void OnSecurityIDChanged();
    #endregion
		
		public GroupXSecurity()
		{
			this.Initialize();
		}
		
		[Column(Storage="_GxSID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int GxSID
		{
			get
			{
				return this._GxSID;
			}
			set
			{
				if ((this._GxSID != value))
				{
					this.OnGxSIDChanging(value);
					this.SendPropertyChanging();
					this._GxSID = value;
					this.SendPropertyChanged("GxSID");
					this.OnGxSIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityID", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int SecurityID
		{
			get
			{
				return this._SecurityID;
			}
			set
			{
				if ((this._SecurityID != value))
				{
					this.OnSecurityIDChanging(value);
					this.SendPropertyChanging();
					this._SecurityID = value;
					this.SendPropertyChanged("SecurityID");
					this.OnSecurityIDChanged();
				}
			}
		}
		
		[Association(Name="GroupXSecurity_Security", Storage="_Securities", ThisKey="SecurityID", OtherKey="SecurityID")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<Security> Securities
		{
			get
			{
				if ((this.serializing 
							&& (this._Securities.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Securities;
			}
			set
			{
				this._Securities.Assign(value);
			}
		}
		
		[Association(Name="Group_GroupXSecurity", Storage="_Group", ThisKey="GroupID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupXSecurities.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupXSecurities.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Securities(Security entity)
		{
			this.SendPropertyChanging();
			entity.GroupXSecurity = this;
		}
		
		private void detach_Securities(Security entity)
		{
			this.SendPropertyChanging();
			entity.GroupXSecurity = null;
		}
		
		private void Initialize()
		{
			this._Securities = new EntitySet<Security>(new Action<Security>(this.attach_Securities), new Action<Security>(this.detach_Securities));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.UserXGroup")]
	[DataContract()]
	public partial class UserXGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UxGID;
		
		private int _UserID;
		
		private int _GroupID;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUxGIDChanging(int value);
    partial void OnUxGIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    #endregion
		
		public UserXGroup()
		{
			this.Initialize();
		}
		
		[Column(Storage="_UxGID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int UxGID
		{
			get
			{
				return this._UxGID;
			}
			set
			{
				if ((this._UxGID != value))
				{
					this.OnUxGIDChanging(value);
					this.SendPropertyChanging();
					this._UxGID = value;
					this.SendPropertyChanged("UxGID");
					this.OnUxGIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Association(Name="Group_UserXGroup", Storage="_Group", ThisKey="GroupID", IsForeignKey=true)]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public Group Group
		{
			get
			{
				if ((this.serializing 
							&& (this._Group.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._Group.Entity;
			}
			set
			{
				if ((this._Group.Entity != value))
				{
					this.SendPropertyChanging();
					this._Group.Entity = value;
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[Association(Name="User_UserXGroup", Storage="_User", ThisKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserXGroups.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserXGroups.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Users")]
	[DataContract()]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Login;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Company;
		
		private bool _UserVisible;
		
		private System.Nullable<int> _PersonalGroupID;
		
		private EntitySet<TimeEntry> _TimeEntries;
		
		private EntitySet<UserSession> _UserSessions;
		
		private EntitySet<UserXGroup> _UserXGroups;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnUserVisibleChanging(bool value);
    partial void OnUserVisibleChanged();
    partial void OnPersonalGroupIDChanging(System.Nullable<int> value);
    partial void OnPersonalGroupIDChanged();
    #endregion
		
		public User()
		{
			this.Initialize();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Login", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=6)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_UserVisible", DbType="Bit NOT NULL")]
		[DataMember(Order=7)]
		public bool UserVisible
		{
			get
			{
				return this._UserVisible;
			}
			set
			{
				if ((this._UserVisible != value))
				{
					this.OnUserVisibleChanging(value);
					this.SendPropertyChanging();
					this._UserVisible = value;
					this.SendPropertyChanged("UserVisible");
					this.OnUserVisibleChanged();
				}
			}
		}
		
		[Column(Storage="_PersonalGroupID", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> PersonalGroupID
		{
			get
			{
				return this._PersonalGroupID;
			}
			set
			{
				if ((this._PersonalGroupID != value))
				{
					this.OnPersonalGroupIDChanging(value);
					this.SendPropertyChanging();
					this._PersonalGroupID = value;
					this.SendPropertyChanged("PersonalGroupID");
					this.OnPersonalGroupIDChanged();
				}
			}
		}
		
		[Association(Name="User_TimeEntry", Storage="_TimeEntries", OtherKey="UserID")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<TimeEntry> TimeEntries
		{
			get
			{
				if ((this.serializing 
							&& (this._TimeEntries.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._TimeEntries;
			}
			set
			{
				this._TimeEntries.Assign(value);
			}
		}
		
		[Association(Name="User_UserSession", Storage="_UserSessions", OtherKey="UserID")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<UserSession> UserSessions
		{
			get
			{
				if ((this.serializing 
							&& (this._UserSessions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserSessions;
			}
			set
			{
				this._UserSessions.Assign(value);
			}
		}
		
		[Association(Name="User_UserXGroup", Storage="_UserXGroups", OtherKey="UserID")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public EntitySet<UserXGroup> UserXGroups
		{
			get
			{
				if ((this.serializing 
							&& (this._UserXGroups.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._UserXGroups;
			}
			set
			{
				this._UserXGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TimeEntries(TimeEntry entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TimeEntries(TimeEntry entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserSessions(UserSession entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserSessions(UserSession entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserXGroups(UserXGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserXGroups(UserXGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void Initialize()
		{
			this._TimeEntries = new EntitySet<TimeEntry>(new Action<TimeEntry>(this.attach_TimeEntries), new Action<TimeEntry>(this.detach_TimeEntries));
			this._UserSessions = new EntitySet<UserSession>(new Action<UserSession>(this.attach_UserSessions), new Action<UserSession>(this.detach_UserSessions));
			this._UserXGroups = new EntitySet<UserXGroup>(new Action<UserXGroup>(this.attach_UserXGroups), new Action<UserXGroup>(this.detach_UserXGroups));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
}
#pragma warning restore 1591
