#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContactData
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SecureRisk")]
	public partial class DataObjectsLINQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertWorkItemsXJobLocation(WorkItemsXJobLocation instance);
    partial void UpdateWorkItemsXJobLocation(WorkItemsXJobLocation instance);
    partial void DeleteWorkItemsXJobLocation(WorkItemsXJobLocation instance);
    partial void InsertAddressType(AddressType instance);
    partial void UpdateAddressType(AddressType instance);
    partial void DeleteAddressType(AddressType instance);
    partial void InsertAssignedType(AssignedType instance);
    partial void UpdateAssignedType(AssignedType instance);
    partial void DeleteAssignedType(AssignedType instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCompanyXAddress(CompanyXAddress instance);
    partial void UpdateCompanyXAddress(CompanyXAddress instance);
    partial void DeleteCompanyXAddress(CompanyXAddress instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertContactType(ContactType instance);
    partial void UpdateContactType(ContactType instance);
    partial void DeleteContactType(ContactType instance);
    partial void InsertContactXAddress(ContactXAddress instance);
    partial void UpdateContactXAddress(ContactXAddress instance);
    partial void DeleteContactXAddress(ContactXAddress instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertJobAssignment(JobAssignment instance);
    partial void UpdateJobAssignment(JobAssignment instance);
    partial void DeleteJobAssignment(JobAssignment instance);
    partial void InsertJobLocation(JobLocation instance);
    partial void UpdateJobLocation(JobLocation instance);
    partial void DeleteJobLocation(JobLocation instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertJobStatuse(JobStatuse instance);
    partial void UpdateJobStatuse(JobStatuse instance);
    partial void DeleteJobStatuse(JobStatuse instance);
    partial void InsertNote(Note instance);
    partial void UpdateNote(Note instance);
    partial void DeleteNote(Note instance);
    partial void InsertParent(Parent instance);
    partial void UpdateParent(Parent instance);
    partial void DeleteParent(Parent instance);
    partial void InsertParentType(ParentType instance);
    partial void UpdateParentType(ParentType instance);
    partial void DeleteParentType(ParentType instance);
    partial void InsertPhoneNumber(PhoneNumber instance);
    partial void UpdatePhoneNumber(PhoneNumber instance);
    partial void DeletePhoneNumber(PhoneNumber instance);
    partial void InsertPhoneNumberType(PhoneNumberType instance);
    partial void UpdatePhoneNumberType(PhoneNumberType instance);
    partial void DeletePhoneNumberType(PhoneNumberType instance);
    partial void InsertPolicy(Policy instance);
    partial void UpdatePolicy(Policy instance);
    partial void DeletePolicy(Policy instance);
    partial void InsertRelationship(Relationship instance);
    partial void UpdateRelationship(Relationship instance);
    partial void DeleteRelationship(Relationship instance);
    partial void InsertRelationshipType(RelationshipType instance);
    partial void UpdateRelationshipType(RelationshipType instance);
    partial void DeleteRelationshipType(RelationshipType instance);
    partial void InsertWorkItem(WorkItem instance);
    partial void UpdateWorkItem(WorkItem instance);
    partial void DeleteWorkItem(WorkItem instance);
    #endregion
		
		public DataObjectsLINQDataContext() : 
				base(global::ContactData.Properties.Settings.Default.SecureRiskConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataObjectsLINQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataObjectsLINQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataObjectsLINQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataObjectsLINQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<WorkItemsXJobLocation> WorkItemsXJobLocations
		{
			get
			{
				return this.GetTable<WorkItemsXJobLocation>();
			}
		}
		
		public System.Data.Linq.Table<AddressType> AddressTypes
		{
			get
			{
				return this.GetTable<AddressType>();
			}
		}
		
		public System.Data.Linq.Table<AssignedType> AssignedTypes
		{
			get
			{
				return this.GetTable<AssignedType>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CompanyXAddress> CompanyXAddresses
		{
			get
			{
				return this.GetTable<CompanyXAddress>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<ContactType> ContactTypes
		{
			get
			{
				return this.GetTable<ContactType>();
			}
		}
		
		public System.Data.Linq.Table<ContactXAddress> ContactXAddresses
		{
			get
			{
				return this.GetTable<ContactXAddress>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<JobAssignment> JobAssignments
		{
			get
			{
				return this.GetTable<JobAssignment>();
			}
		}
		
		public System.Data.Linq.Table<JobLocation> JobLocations
		{
			get
			{
				return this.GetTable<JobLocation>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<JobStatuse> JobStatuses
		{
			get
			{
				return this.GetTable<JobStatuse>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<Parent> Parents
		{
			get
			{
				return this.GetTable<Parent>();
			}
		}
		
		public System.Data.Linq.Table<ParentType> ParentTypes
		{
			get
			{
				return this.GetTable<ParentType>();
			}
		}
		
		public System.Data.Linq.Table<PhoneNumber> PhoneNumbers
		{
			get
			{
				return this.GetTable<PhoneNumber>();
			}
		}
		
		public System.Data.Linq.Table<PhoneNumberType> PhoneNumberTypes
		{
			get
			{
				return this.GetTable<PhoneNumberType>();
			}
		}
		
		public System.Data.Linq.Table<Policy> Policies
		{
			get
			{
				return this.GetTable<Policy>();
			}
		}
		
		public System.Data.Linq.Table<Relationship> Relationships
		{
			get
			{
				return this.GetTable<Relationship>();
			}
		}
		
		public System.Data.Linq.Table<RelationshipType> RelationshipTypes
		{
			get
			{
				return this.GetTable<RelationshipType>();
			}
		}
		
		public System.Data.Linq.Table<WorkItem> WorkItems
		{
			get
			{
				return this.GetTable<WorkItem>();
			}
		}
	}
	
	[Table(Name="dbo.Addresses")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AddressID;
		
		private System.Guid _AddressTypeID;
		
		private string _Street;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private string _Country;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<CompanyXAddress> _CompanyXAddresses;
		
		private EntitySet<Contact> _Contacts;
		
		private EntitySet<ContactXAddress> _ContactXAddresses;
		
		private EntitySet<JobLocation> _JobLocations;
		
		private EntityRef<AddressType> _AddressType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIDChanging(System.Guid value);
    partial void OnAddressIDChanged();
    partial void OnAddressTypeIDChanging(System.Guid value);
    partial void OnAddressTypeIDChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public Address()
		{
			this._CompanyXAddresses = new EntitySet<CompanyXAddress>(new Action<CompanyXAddress>(this.attach_CompanyXAddresses), new Action<CompanyXAddress>(this.detach_CompanyXAddresses));
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._ContactXAddresses = new EntitySet<ContactXAddress>(new Action<ContactXAddress>(this.attach_ContactXAddresses), new Action<ContactXAddress>(this.detach_ContactXAddresses));
			this._JobLocations = new EntitySet<JobLocation>(new Action<JobLocation>(this.attach_JobLocations), new Action<JobLocation>(this.detach_JobLocations));
			this._AddressType = default(EntityRef<AddressType>);
			OnCreated();
		}
		
		[Column(Storage="_AddressID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddressTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					if (this._AddressType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeID = value;
					this.SendPropertyChanged("AddressTypeID");
					this.OnAddressTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Street", DbType="VarChar(50)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="VarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="VarChar(50)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="VarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="Address_CompanyXAddress", Storage="_CompanyXAddresses", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<CompanyXAddress> CompanyXAddresses
		{
			get
			{
				return this._CompanyXAddresses;
			}
			set
			{
				this._CompanyXAddresses.Assign(value);
			}
		}
		
		[Association(Name="Address_Contact", Storage="_Contacts", ThisKey="AddressID", OtherKey="PrimaryAddressID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[Association(Name="Address_ContactXAddress", Storage="_ContactXAddresses", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<ContactXAddress> ContactXAddresses
		{
			get
			{
				return this._ContactXAddresses;
			}
			set
			{
				this._ContactXAddresses.Assign(value);
			}
		}
		
		[Association(Name="Address_JobLocation", Storage="_JobLocations", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<JobLocation> JobLocations
		{
			get
			{
				return this._JobLocations;
			}
			set
			{
				this._JobLocations.Assign(value);
			}
		}
		
		[Association(Name="AddressType_Address", Storage="_AddressType", ThisKey="AddressTypeID", OtherKey="AddressTypeID", IsForeignKey=true)]
		public AddressType AddressType
		{
			get
			{
				return this._AddressType.Entity;
			}
			set
			{
				AddressType previousValue = this._AddressType.Entity;
				if (((previousValue != value) 
							|| (this._AddressType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressType.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._AddressType.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._AddressTypeID = value.AddressTypeID;
					}
					else
					{
						this._AddressTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("AddressType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyXAddresses(CompanyXAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_CompanyXAddresses(CompanyXAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_ContactXAddresses(ContactXAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_ContactXAddresses(ContactXAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_JobLocations(JobLocation entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_JobLocations(JobLocation entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[Table(Name="dbo.WorkItemsXJobLocations")]
	public partial class WorkItemsXJobLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _WorkItemXJobLocation;
		
		private System.Nullable<System.Guid> _JobLocationID;
		
		private System.Nullable<System.Guid> _WorkItemID;
		
		private System.Nullable<System.Guid> _NoteID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntityRef<JobLocation> _JobLocation;
		
		private EntityRef<WorkItem> _WorkItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkItemXJobLocationChanging(System.Guid value);
    partial void OnWorkItemXJobLocationChanged();
    partial void OnJobLocationIDChanging(System.Nullable<System.Guid> value);
    partial void OnJobLocationIDChanged();
    partial void OnWorkItemIDChanging(System.Nullable<System.Guid> value);
    partial void OnWorkItemIDChanged();
    partial void OnNoteIDChanging(System.Nullable<System.Guid> value);
    partial void OnNoteIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public WorkItemsXJobLocation()
		{
			this._JobLocation = default(EntityRef<JobLocation>);
			this._WorkItem = default(EntityRef<WorkItem>);
			OnCreated();
		}
		
		[Column(Storage="_WorkItemXJobLocation", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid WorkItemXJobLocation
		{
			get
			{
				return this._WorkItemXJobLocation;
			}
			set
			{
				if ((this._WorkItemXJobLocation != value))
				{
					this.OnWorkItemXJobLocationChanging(value);
					this.SendPropertyChanging();
					this._WorkItemXJobLocation = value;
					this.SendPropertyChanged("WorkItemXJobLocation");
					this.OnWorkItemXJobLocationChanged();
				}
			}
		}
		
		[Column(Storage="_JobLocationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> JobLocationID
		{
			get
			{
				return this._JobLocationID;
			}
			set
			{
				if ((this._JobLocationID != value))
				{
					if (this._JobLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobLocationIDChanging(value);
					this.SendPropertyChanging();
					this._JobLocationID = value;
					this.SendPropertyChanged("JobLocationID");
					this.OnJobLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_WorkItemID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> WorkItemID
		{
			get
			{
				return this._WorkItemID;
			}
			set
			{
				if ((this._WorkItemID != value))
				{
					if (this._WorkItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkItemIDChanging(value);
					this.SendPropertyChanging();
					this._WorkItemID = value;
					this.SendPropertyChanged("WorkItemID");
					this.OnWorkItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_NoteID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NoteID
		{
			get
			{
				return this._NoteID;
			}
			set
			{
				if ((this._NoteID != value))
				{
					this.OnNoteIDChanging(value);
					this.SendPropertyChanging();
					this._NoteID = value;
					this.SendPropertyChanged("NoteID");
					this.OnNoteIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="JobLocation_WorkItemsXJobLocation", Storage="_JobLocation", ThisKey="JobLocationID", OtherKey="JobLocationID", IsForeignKey=true)]
		public JobLocation JobLocation
		{
			get
			{
				return this._JobLocation.Entity;
			}
			set
			{
				JobLocation previousValue = this._JobLocation.Entity;
				if (((previousValue != value) 
							|| (this._JobLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobLocation.Entity = null;
						previousValue.WorkItemsXJobLocations.Remove(this);
					}
					this._JobLocation.Entity = value;
					if ((value != null))
					{
						value.WorkItemsXJobLocations.Add(this);
						this._JobLocationID = value.JobLocationID;
					}
					else
					{
						this._JobLocationID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("JobLocation");
				}
			}
		}
		
		[Association(Name="WorkItem_WorkItemsXJobLocation", Storage="_WorkItem", ThisKey="WorkItemID", OtherKey="WorkItemID", IsForeignKey=true)]
		public WorkItem WorkItem
		{
			get
			{
				return this._WorkItem.Entity;
			}
			set
			{
				WorkItem previousValue = this._WorkItem.Entity;
				if (((previousValue != value) 
							|| (this._WorkItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkItem.Entity = null;
						previousValue.WorkItemsXJobLocations.Remove(this);
					}
					this._WorkItem.Entity = value;
					if ((value != null))
					{
						value.WorkItemsXJobLocations.Add(this);
						this._WorkItemID = value.WorkItemID;
					}
					else
					{
						this._WorkItemID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("WorkItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AddressTypes")]
	public partial class AddressType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AddressTypeID;
		
		private string _AddressTypeName;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressTypeIDChanging(System.Guid value);
    partial void OnAddressTypeIDChanged();
    partial void OnAddressTypeNameChanging(string value);
    partial void OnAddressTypeNameChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public AddressType()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[Column(Storage="_AddressTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					this.OnAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeID = value;
					this.SendPropertyChanged("AddressTypeID");
					this.OnAddressTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddressTypeName", DbType="VarChar(50)")]
		public string AddressTypeName
		{
			get
			{
				return this._AddressTypeName;
			}
			set
			{
				if ((this._AddressTypeName != value))
				{
					this.OnAddressTypeNameChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeName = value;
					this.SendPropertyChanged("AddressTypeName");
					this.OnAddressTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="AddressType_Address", Storage="_Addresses", ThisKey="AddressTypeID", OtherKey="AddressTypeID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = null;
		}
	}
	
	[Table(Name="dbo.AssignedTypes")]
	public partial class AssignedType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AssignedTypeID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<JobAssignment> _JobAssignments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssignedTypeIDChanging(System.Guid value);
    partial void OnAssignedTypeIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public AssignedType()
		{
			this._JobAssignments = new EntitySet<JobAssignment>(new Action<JobAssignment>(this.attach_JobAssignments), new Action<JobAssignment>(this.detach_JobAssignments));
			OnCreated();
		}
		
		[Column(Storage="_AssignedTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AssignedTypeID
		{
			get
			{
				return this._AssignedTypeID;
			}
			set
			{
				if ((this._AssignedTypeID != value))
				{
					this.OnAssignedTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AssignedTypeID = value;
					this.SendPropertyChanged("AssignedTypeID");
					this.OnAssignedTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="AssignedType_JobAssignment", Storage="_JobAssignments", ThisKey="AssignedTypeID", OtherKey="AssignedTypeID")]
		public EntitySet<JobAssignment> JobAssignments
		{
			get
			{
				return this._JobAssignments;
			}
			set
			{
				this._JobAssignments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobAssignments(JobAssignment entity)
		{
			this.SendPropertyChanging();
			entity.AssignedType = this;
		}
		
		private void detach_JobAssignments(JobAssignment entity)
		{
			this.SendPropertyChanging();
			entity.AssignedType = null;
		}
	}
	
	[Table(Name="dbo.Companies")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CompanyID;
		
		private string _CompanyName;
		
		private System.Nullable<System.Guid> _PrimaryContactID;
		
		private System.Nullable<System.Guid> _PrimaryAddressID;
		
		private System.Nullable<System.Guid> _PrimaryPhoneNumberID;
		
		private System.Nullable<System.Guid> _RelationshipTypeID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<CompanyXAddress> _CompanyXAddresses;
		
		private EntitySet<Job> _Jobs;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<PhoneNumber> _PhoneNumber;
		
		private EntityRef<RelationshipType> _RelationshipType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(System.Guid value);
    partial void OnCompanyIDChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnPrimaryContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnPrimaryContactIDChanged();
    partial void OnPrimaryAddressIDChanging(System.Nullable<System.Guid> value);
    partial void OnPrimaryAddressIDChanged();
    partial void OnPrimaryPhoneNumberIDChanging(System.Nullable<System.Guid> value);
    partial void OnPrimaryPhoneNumberIDChanged();
    partial void OnRelationshipTypeIDChanging(System.Nullable<System.Guid> value);
    partial void OnRelationshipTypeIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public Company()
		{
			this._CompanyXAddresses = new EntitySet<CompanyXAddress>(new Action<CompanyXAddress>(this.attach_CompanyXAddresses), new Action<CompanyXAddress>(this.detach_CompanyXAddresses));
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			this._Contact = default(EntityRef<Contact>);
			this._PhoneNumber = default(EntityRef<PhoneNumber>);
			this._RelationshipType = default(EntityRef<RelationshipType>);
			OnCreated();
		}
		
		[Column(Storage="_CompanyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyName", DbType="VarChar(50)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PrimaryContactID
		{
			get
			{
				return this._PrimaryContactID;
			}
			set
			{
				if ((this._PrimaryContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrimaryContactIDChanging(value);
					this.SendPropertyChanging();
					this._PrimaryContactID = value;
					this.SendPropertyChanged("PrimaryContactID");
					this.OnPrimaryContactIDChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryAddressID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PrimaryAddressID
		{
			get
			{
				return this._PrimaryAddressID;
			}
			set
			{
				if ((this._PrimaryAddressID != value))
				{
					this.OnPrimaryAddressIDChanging(value);
					this.SendPropertyChanging();
					this._PrimaryAddressID = value;
					this.SendPropertyChanged("PrimaryAddressID");
					this.OnPrimaryAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryPhoneNumberID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PrimaryPhoneNumberID
		{
			get
			{
				return this._PrimaryPhoneNumberID;
			}
			set
			{
				if ((this._PrimaryPhoneNumberID != value))
				{
					if (this._PhoneNumber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrimaryPhoneNumberIDChanging(value);
					this.SendPropertyChanging();
					this._PrimaryPhoneNumberID = value;
					this.SendPropertyChanged("PrimaryPhoneNumberID");
					this.OnPrimaryPhoneNumberIDChanged();
				}
			}
		}
		
		[Column(Storage="_RelationshipTypeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationshipTypeID
		{
			get
			{
				return this._RelationshipTypeID;
			}
			set
			{
				if ((this._RelationshipTypeID != value))
				{
					if (this._RelationshipType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeID = value;
					this.SendPropertyChanged("RelationshipTypeID");
					this.OnRelationshipTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="Company_CompanyXAddress", Storage="_CompanyXAddresses", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<CompanyXAddress> CompanyXAddresses
		{
			get
			{
				return this._CompanyXAddresses;
			}
			set
			{
				this._CompanyXAddresses.Assign(value);
			}
		}
		
		[Association(Name="Company_Job", Storage="_Jobs", ThisKey="CompanyID", OtherKey="InsuranceCompanyID")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		[Association(Name="Contact_Company", Storage="_Contact", ThisKey="PrimaryContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._PrimaryContactID = value.ContactID;
					}
					else
					{
						this._PrimaryContactID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[Association(Name="PhoneNumber_Company", Storage="_PhoneNumber", ThisKey="PrimaryPhoneNumberID", OtherKey="PhoneNumberID", IsForeignKey=true)]
		public PhoneNumber PhoneNumber
		{
			get
			{
				return this._PhoneNumber.Entity;
			}
			set
			{
				PhoneNumber previousValue = this._PhoneNumber.Entity;
				if (((previousValue != value) 
							|| (this._PhoneNumber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneNumber.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._PhoneNumber.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._PrimaryPhoneNumberID = value.PhoneNumberID;
					}
					else
					{
						this._PrimaryPhoneNumberID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PhoneNumber");
				}
			}
		}
		
		[Association(Name="RelationshipType_Company", Storage="_RelationshipType", ThisKey="RelationshipTypeID", OtherKey="RelationshipTypeID", IsForeignKey=true)]
		public RelationshipType RelationshipType
		{
			get
			{
				return this._RelationshipType.Entity;
			}
			set
			{
				RelationshipType previousValue = this._RelationshipType.Entity;
				if (((previousValue != value) 
							|| (this._RelationshipType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RelationshipType.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._RelationshipType.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._RelationshipTypeID = value.RelationshipTypeID;
					}
					else
					{
						this._RelationshipTypeID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("RelationshipType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyXAddresses(CompanyXAddress entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompanyXAddresses(CompanyXAddress entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[Table(Name="dbo.CompanyXAddresses")]
	public partial class CompanyXAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CompanyXAddressID;
		
		private System.Nullable<System.Guid> _CompanyID;
		
		private System.Nullable<System.Guid> _AddressID;
		
		private System.Nullable<System.Guid> _RelationshipID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Relationship> _Relationship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyXAddressIDChanging(System.Guid value);
    partial void OnCompanyXAddressIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyIDChanged();
    partial void OnAddressIDChanging(System.Nullable<System.Guid> value);
    partial void OnAddressIDChanged();
    partial void OnRelationshipIDChanging(System.Nullable<System.Guid> value);
    partial void OnRelationshipIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public CompanyXAddress()
		{
			this._Address = default(EntityRef<Address>);
			this._Company = default(EntityRef<Company>);
			this._Relationship = default(EntityRef<Relationship>);
			OnCreated();
		}
		
		[Column(Storage="_CompanyXAddressID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CompanyXAddressID
		{
			get
			{
				return this._CompanyXAddressID;
			}
			set
			{
				if ((this._CompanyXAddressID != value))
				{
					this.OnCompanyXAddressIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyXAddressID = value;
					this.SendPropertyChanged("CompanyXAddressID");
					this.OnCompanyXAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddressID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_RelationshipID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationshipID
		{
			get
			{
				return this._RelationshipID;
			}
			set
			{
				if ((this._RelationshipID != value))
				{
					if (this._Relationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipIDChanging(value);
					this.SendPropertyChanging();
					this._RelationshipID = value;
					this.SendPropertyChanged("RelationshipID");
					this.OnRelationshipIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="Address_CompanyXAddress", Storage="_Address", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.CompanyXAddresses.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.CompanyXAddresses.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="Company_CompanyXAddress", Storage="_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompanyXAddresses.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompanyXAddresses.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Relationship_CompanyXAddress", Storage="_Relationship", ThisKey="RelationshipID", OtherKey="RelationshipID", IsForeignKey=true)]
		public Relationship Relationship
		{
			get
			{
				return this._Relationship.Entity;
			}
			set
			{
				Relationship previousValue = this._Relationship.Entity;
				if (((previousValue != value) 
							|| (this._Relationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Relationship.Entity = null;
						previousValue.CompanyXAddresses.Remove(this);
					}
					this._Relationship.Entity = value;
					if ((value != null))
					{
						value.CompanyXAddresses.Add(this);
						this._RelationshipID = value.RelationshipID;
					}
					else
					{
						this._RelationshipID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Relationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Contacts")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContactID;
		
		private System.Guid _ContactTypeID;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private System.Nullable<System.Guid> _PrimaryAddressID;
		
		private System.Nullable<System.Guid> _CompanyID;
		
		private System.Nullable<System.Guid> _PrimaryPhoneNumberID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<ContactXAddress> _ContactXAddresses;
		
		private EntitySet<JobAssignment> _JobAssignments;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<ContactType> _ContactType;
		
		private EntityRef<PhoneNumber> _PhoneNumber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIDChanging(System.Guid value);
    partial void OnContactIDChanged();
    partial void OnContactTypeIDChanging(System.Guid value);
    partial void OnContactTypeIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPrimaryAddressIDChanging(System.Nullable<System.Guid> value);
    partial void OnPrimaryAddressIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnCompanyIDChanged();
    partial void OnPrimaryPhoneNumberIDChanging(System.Nullable<System.Guid> value);
    partial void OnPrimaryPhoneNumberIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public Contact()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._ContactXAddresses = new EntitySet<ContactXAddress>(new Action<ContactXAddress>(this.attach_ContactXAddresses), new Action<ContactXAddress>(this.detach_ContactXAddresses));
			this._JobAssignments = new EntitySet<JobAssignment>(new Action<JobAssignment>(this.attach_JobAssignments), new Action<JobAssignment>(this.detach_JobAssignments));
			this._Address = default(EntityRef<Address>);
			this._ContactType = default(EntityRef<ContactType>);
			this._PhoneNumber = default(EntityRef<PhoneNumber>);
			OnCreated();
		}
		
		[Column(Storage="_ContactID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContactTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContactTypeID
		{
			get
			{
				return this._ContactTypeID;
			}
			set
			{
				if ((this._ContactTypeID != value))
				{
					if (this._ContactType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContactTypeID = value;
					this.SendPropertyChanged("ContactTypeID");
					this.OnContactTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="VarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryAddressID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PrimaryAddressID
		{
			get
			{
				return this._PrimaryAddressID;
			}
			set
			{
				if ((this._PrimaryAddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrimaryAddressIDChanging(value);
					this.SendPropertyChanging();
					this._PrimaryAddressID = value;
					this.SendPropertyChanged("PrimaryAddressID");
					this.OnPrimaryAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryPhoneNumberID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PrimaryPhoneNumberID
		{
			get
			{
				return this._PrimaryPhoneNumberID;
			}
			set
			{
				if ((this._PrimaryPhoneNumberID != value))
				{
					if (this._PhoneNumber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrimaryPhoneNumberIDChanging(value);
					this.SendPropertyChanging();
					this._PrimaryPhoneNumberID = value;
					this.SendPropertyChanged("PrimaryPhoneNumberID");
					this.OnPrimaryPhoneNumberIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="Contact_Company", Storage="_Companies", ThisKey="ContactID", OtherKey="PrimaryContactID")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[Association(Name="Contact_ContactXAddress", Storage="_ContactXAddresses", ThisKey="ContactID", OtherKey="ContactID")]
		public EntitySet<ContactXAddress> ContactXAddresses
		{
			get
			{
				return this._ContactXAddresses;
			}
			set
			{
				this._ContactXAddresses.Assign(value);
			}
		}
		
		[Association(Name="Contact_JobAssignment", Storage="_JobAssignments", ThisKey="ContactID", OtherKey="AssignedID")]
		public EntitySet<JobAssignment> JobAssignments
		{
			get
			{
				return this._JobAssignments;
			}
			set
			{
				this._JobAssignments.Assign(value);
			}
		}
		
		[Association(Name="Address_Contact", Storage="_Address", ThisKey="PrimaryAddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._PrimaryAddressID = value.AddressID;
					}
					else
					{
						this._PrimaryAddressID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="ContactType_Contact", Storage="_ContactType", ThisKey="ContactTypeID", OtherKey="ContactTypeID", IsForeignKey=true)]
		public ContactType ContactType
		{
			get
			{
				return this._ContactType.Entity;
			}
			set
			{
				ContactType previousValue = this._ContactType.Entity;
				if (((previousValue != value) 
							|| (this._ContactType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactType.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._ContactType.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._ContactTypeID = value.ContactTypeID;
					}
					else
					{
						this._ContactTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("ContactType");
				}
			}
		}
		
		[Association(Name="PhoneNumber_Contact", Storage="_PhoneNumber", ThisKey="PrimaryPhoneNumberID", OtherKey="PhoneNumberID", IsForeignKey=true)]
		public PhoneNumber PhoneNumber
		{
			get
			{
				return this._PhoneNumber.Entity;
			}
			set
			{
				PhoneNumber previousValue = this._PhoneNumber.Entity;
				if (((previousValue != value) 
							|| (this._PhoneNumber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneNumber.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._PhoneNumber.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._PrimaryPhoneNumberID = value.PhoneNumberID;
					}
					else
					{
						this._PrimaryPhoneNumberID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PhoneNumber");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_ContactXAddresses(ContactXAddress entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_ContactXAddresses(ContactXAddress entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_JobAssignments(JobAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_JobAssignments(JobAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[Table(Name="dbo.ContactTypes")]
	public partial class ContactType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContactTypeID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<Contact> _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactTypeIDChanging(System.Guid value);
    partial void OnContactTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public ContactType()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[Column(Storage="_ContactTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContactTypeID
		{
			get
			{
				return this._ContactTypeID;
			}
			set
			{
				if ((this._ContactTypeID != value))
				{
					this.OnContactTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContactTypeID = value;
					this.SendPropertyChanged("ContactTypeID");
					this.OnContactTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="ContactType_Contact", Storage="_Contacts", ThisKey="ContactTypeID", OtherKey="ContactTypeID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactType = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactType = null;
		}
	}
	
	[Table(Name="dbo.ContactXAddresses")]
	public partial class ContactXAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContactXAddressID;
		
		private System.Nullable<System.Guid> _ContactID;
		
		private System.Nullable<System.Guid> _AddressID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactXAddressIDChanging(System.Guid value);
    partial void OnContactXAddressIDChanged();
    partial void OnContactIDChanging(System.Nullable<System.Guid> value);
    partial void OnContactIDChanged();
    partial void OnAddressIDChanging(System.Nullable<System.Guid> value);
    partial void OnAddressIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public ContactXAddress()
		{
			this._Address = default(EntityRef<Address>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[Column(Storage="_ContactXAddressID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContactXAddressID
		{
			get
			{
				return this._ContactXAddressID;
			}
			set
			{
				if ((this._ContactXAddressID != value))
				{
					this.OnContactXAddressIDChanging(value);
					this.SendPropertyChanging();
					this._ContactXAddressID = value;
					this.SendPropertyChanged("ContactXAddressID");
					this.OnContactXAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContactID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddressID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="Address_ContactXAddress", Storage="_Address", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.ContactXAddresses.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.ContactXAddresses.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="Contact_ContactXAddress", Storage="_Contact", ThisKey="ContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.ContactXAddresses.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.ContactXAddresses.Add(this);
						this._ContactID = value.ContactID;
					}
					else
					{
						this._ContactID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GroupID;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(System.Guid value);
    partial void OnGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public Group()
		{
			OnCreated();
		}
		
		[Column(Storage="_GroupID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.JobAssignments")]
	public partial class JobAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JobAssignmentID;
		
		private System.Guid _JobID;
		
		private System.DateTime _AssignedDate;
		
		private System.DateTime _DueDate;
		
		private System.Nullable<System.DateTime> _CompleteDate;
		
		private System.Guid _AssignedTypeID;
		
		private System.Guid _AssignedID;
		
		private string _Rates;
		
		private string _Hours;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntityRef<AssignedType> _AssignedType;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobAssignmentIDChanging(System.Guid value);
    partial void OnJobAssignmentIDChanged();
    partial void OnJobIDChanging(System.Guid value);
    partial void OnJobIDChanged();
    partial void OnAssignedDateChanging(System.DateTime value);
    partial void OnAssignedDateChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnCompleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompleteDateChanged();
    partial void OnAssignedTypeIDChanging(System.Guid value);
    partial void OnAssignedTypeIDChanged();
    partial void OnAssignedIDChanging(System.Guid value);
    partial void OnAssignedIDChanged();
    partial void OnRatesChanging(string value);
    partial void OnRatesChanged();
    partial void OnHoursChanging(string value);
    partial void OnHoursChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public JobAssignment()
		{
			this._AssignedType = default(EntityRef<AssignedType>);
			this._Contact = default(EntityRef<Contact>);
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[Column(Storage="_JobAssignmentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JobAssignmentID
		{
			get
			{
				return this._JobAssignmentID;
			}
			set
			{
				if ((this._JobAssignmentID != value))
				{
					this.OnJobAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._JobAssignmentID = value;
					this.SendPropertyChanged("JobAssignmentID");
					this.OnJobAssignmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_JobID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssignedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AssignedDate
		{
			get
			{
				return this._AssignedDate;
			}
			set
			{
				if ((this._AssignedDate != value))
				{
					this.OnAssignedDateChanging(value);
					this.SendPropertyChanging();
					this._AssignedDate = value;
					this.SendPropertyChanged("AssignedDate");
					this.OnAssignedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_CompleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompleteDate
		{
			get
			{
				return this._CompleteDate;
			}
			set
			{
				if ((this._CompleteDate != value))
				{
					this.OnCompleteDateChanging(value);
					this.SendPropertyChanging();
					this._CompleteDate = value;
					this.SendPropertyChanged("CompleteDate");
					this.OnCompleteDateChanged();
				}
			}
		}
		
		[Column(Storage="_AssignedTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AssignedTypeID
		{
			get
			{
				return this._AssignedTypeID;
			}
			set
			{
				if ((this._AssignedTypeID != value))
				{
					if (this._AssignedType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AssignedTypeID = value;
					this.SendPropertyChanged("AssignedTypeID");
					this.OnAssignedTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssignedID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AssignedID
		{
			get
			{
				return this._AssignedID;
			}
			set
			{
				if ((this._AssignedID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedIDChanging(value);
					this.SendPropertyChanging();
					this._AssignedID = value;
					this.SendPropertyChanged("AssignedID");
					this.OnAssignedIDChanged();
				}
			}
		}
		
		[Column(Storage="_Rates", DbType="VarChar(50)")]
		public string Rates
		{
			get
			{
				return this._Rates;
			}
			set
			{
				if ((this._Rates != value))
				{
					this.OnRatesChanging(value);
					this.SendPropertyChanging();
					this._Rates = value;
					this.SendPropertyChanged("Rates");
					this.OnRatesChanged();
				}
			}
		}
		
		[Column(Storage="_Hours", DbType="VarChar(50)")]
		public string Hours
		{
			get
			{
				return this._Hours;
			}
			set
			{
				if ((this._Hours != value))
				{
					this.OnHoursChanging(value);
					this.SendPropertyChanging();
					this._Hours = value;
					this.SendPropertyChanged("Hours");
					this.OnHoursChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="AssignedType_JobAssignment", Storage="_AssignedType", ThisKey="AssignedTypeID", OtherKey="AssignedTypeID", IsForeignKey=true)]
		public AssignedType AssignedType
		{
			get
			{
				return this._AssignedType.Entity;
			}
			set
			{
				AssignedType previousValue = this._AssignedType.Entity;
				if (((previousValue != value) 
							|| (this._AssignedType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssignedType.Entity = null;
						previousValue.JobAssignments.Remove(this);
					}
					this._AssignedType.Entity = value;
					if ((value != null))
					{
						value.JobAssignments.Add(this);
						this._AssignedTypeID = value.AssignedTypeID;
					}
					else
					{
						this._AssignedTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("AssignedType");
				}
			}
		}
		
		[Association(Name="Contact_JobAssignment", Storage="_Contact", ThisKey="AssignedID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.JobAssignments.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.JobAssignments.Add(this);
						this._AssignedID = value.ContactID;
					}
					else
					{
						this._AssignedID = default(System.Guid);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[Association(Name="Job_JobAssignment", Storage="_Job", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.JobAssignments.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.JobAssignments.Add(this);
						this._JobID = value.JobID;
					}
					else
					{
						this._JobID = default(System.Guid);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.JobLocations")]
	public partial class JobLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JobLocationID;
		
		private System.Nullable<System.Guid> _JobID;
		
		private System.Nullable<System.Guid> _AddressID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<WorkItemsXJobLocation> _WorkItemsXJobLocations;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobLocationIDChanging(System.Guid value);
    partial void OnJobLocationIDChanged();
    partial void OnJobIDChanging(System.Nullable<System.Guid> value);
    partial void OnJobIDChanged();
    partial void OnAddressIDChanging(System.Nullable<System.Guid> value);
    partial void OnAddressIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public JobLocation()
		{
			this._WorkItemsXJobLocations = new EntitySet<WorkItemsXJobLocation>(new Action<WorkItemsXJobLocation>(this.attach_WorkItemsXJobLocations), new Action<WorkItemsXJobLocation>(this.detach_WorkItemsXJobLocations));
			this._Address = default(EntityRef<Address>);
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[Column(Storage="_JobLocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JobLocationID
		{
			get
			{
				return this._JobLocationID;
			}
			set
			{
				if ((this._JobLocationID != value))
				{
					this.OnJobLocationIDChanging(value);
					this.SendPropertyChanging();
					this._JobLocationID = value;
					this.SendPropertyChanged("JobLocationID");
					this.OnJobLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_JobID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddressID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="JobLocation_WorkItemsXJobLocation", Storage="_WorkItemsXJobLocations", ThisKey="JobLocationID", OtherKey="JobLocationID")]
		public EntitySet<WorkItemsXJobLocation> WorkItemsXJobLocations
		{
			get
			{
				return this._WorkItemsXJobLocations;
			}
			set
			{
				this._WorkItemsXJobLocations.Assign(value);
			}
		}
		
		[Association(Name="Address_JobLocation", Storage="_Address", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.JobLocations.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.JobLocations.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="Job_JobLocation", Storage="_Job", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.JobLocations.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.JobLocations.Add(this);
						this._JobID = value.JobID;
					}
					else
					{
						this._JobID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkItemsXJobLocations(WorkItemsXJobLocation entity)
		{
			this.SendPropertyChanging();
			entity.JobLocation = this;
		}
		
		private void detach_WorkItemsXJobLocations(WorkItemsXJobLocation entity)
		{
			this.SendPropertyChanging();
			entity.JobLocation = null;
		}
	}
	
	[Table(Name="dbo.Jobs")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JobID;
		
		private System.Nullable<System.DateTime> _RequestDate;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private System.Nullable<System.DateTime> _CompletionDate;
		
		private string _InsuranceName;
		
		private System.Nullable<System.Guid> _InsuranceCompanyID;
		
		private string _WorkItemNote;
		
		private System.Nullable<System.Guid> _JobStatusID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<JobAssignment> _JobAssignments;
		
		private EntitySet<JobLocation> _JobLocations;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<JobStatuse> _JobStatuse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIDChanging(System.Guid value);
    partial void OnJobIDChanged();
    partial void OnRequestDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestDateChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDueDateChanged();
    partial void OnCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletionDateChanged();
    partial void OnInsuranceNameChanging(string value);
    partial void OnInsuranceNameChanged();
    partial void OnInsuranceCompanyIDChanging(System.Nullable<System.Guid> value);
    partial void OnInsuranceCompanyIDChanged();
    partial void OnWorkItemNoteChanging(string value);
    partial void OnWorkItemNoteChanged();
    partial void OnJobStatusIDChanging(System.Nullable<System.Guid> value);
    partial void OnJobStatusIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public Job()
		{
			this._JobAssignments = new EntitySet<JobAssignment>(new Action<JobAssignment>(this.attach_JobAssignments), new Action<JobAssignment>(this.detach_JobAssignments));
			this._JobLocations = new EntitySet<JobLocation>(new Action<JobLocation>(this.attach_JobLocations), new Action<JobLocation>(this.detach_JobLocations));
			this._Company = default(EntityRef<Company>);
			this._JobStatuse = default(EntityRef<JobStatuse>);
			OnCreated();
		}
		
		[Column(Storage="_JobID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequestDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_CompletionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletionDate
		{
			get
			{
				return this._CompletionDate;
			}
			set
			{
				if ((this._CompletionDate != value))
				{
					this.OnCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._CompletionDate = value;
					this.SendPropertyChanged("CompletionDate");
					this.OnCompletionDateChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceName", DbType="VarChar(50)")]
		public string InsuranceName
		{
			get
			{
				return this._InsuranceName;
			}
			set
			{
				if ((this._InsuranceName != value))
				{
					this.OnInsuranceNameChanging(value);
					this.SendPropertyChanging();
					this._InsuranceName = value;
					this.SendPropertyChanged("InsuranceName");
					this.OnInsuranceNameChanged();
				}
			}
		}
		
		[Column(Storage="_InsuranceCompanyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> InsuranceCompanyID
		{
			get
			{
				return this._InsuranceCompanyID;
			}
			set
			{
				if ((this._InsuranceCompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceCompanyID = value;
					this.SendPropertyChanged("InsuranceCompanyID");
					this.OnInsuranceCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_WorkItemNote", DbType="VarChar(50)")]
		public string WorkItemNote
		{
			get
			{
				return this._WorkItemNote;
			}
			set
			{
				if ((this._WorkItemNote != value))
				{
					this.OnWorkItemNoteChanging(value);
					this.SendPropertyChanging();
					this._WorkItemNote = value;
					this.SendPropertyChanged("WorkItemNote");
					this.OnWorkItemNoteChanged();
				}
			}
		}
		
		[Column(Storage="_JobStatusID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> JobStatusID
		{
			get
			{
				return this._JobStatusID;
			}
			set
			{
				if ((this._JobStatusID != value))
				{
					if (this._JobStatuse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobStatusIDChanging(value);
					this.SendPropertyChanging();
					this._JobStatusID = value;
					this.SendPropertyChanged("JobStatusID");
					this.OnJobStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="Job_JobAssignment", Storage="_JobAssignments", ThisKey="JobID", OtherKey="JobID")]
		public EntitySet<JobAssignment> JobAssignments
		{
			get
			{
				return this._JobAssignments;
			}
			set
			{
				this._JobAssignments.Assign(value);
			}
		}
		
		[Association(Name="Job_JobLocation", Storage="_JobLocations", ThisKey="JobID", OtherKey="JobID")]
		public EntitySet<JobLocation> JobLocations
		{
			get
			{
				return this._JobLocations;
			}
			set
			{
				this._JobLocations.Assign(value);
			}
		}
		
		[Association(Name="Company_Job", Storage="_Company", ThisKey="InsuranceCompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._InsuranceCompanyID = value.CompanyID;
					}
					else
					{
						this._InsuranceCompanyID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="JobStatuse_Job", Storage="_JobStatuse", ThisKey="JobStatusID", OtherKey="JobStatusID", IsForeignKey=true)]
		public JobStatuse JobStatuse
		{
			get
			{
				return this._JobStatuse.Entity;
			}
			set
			{
				JobStatuse previousValue = this._JobStatuse.Entity;
				if (((previousValue != value) 
							|| (this._JobStatuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobStatuse.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._JobStatuse.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._JobStatusID = value.JobStatusID;
					}
					else
					{
						this._JobStatusID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("JobStatuse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobAssignments(JobAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_JobAssignments(JobAssignment entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_JobLocations(JobLocation entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_JobLocations(JobLocation entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[Table(Name="dbo.JobStatuses")]
	public partial class JobStatuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JobStatusID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<Job> _Jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobStatusIDChanging(System.Guid value);
    partial void OnJobStatusIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public JobStatuse()
		{
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			OnCreated();
		}
		
		[Column(Storage="_JobStatusID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JobStatusID
		{
			get
			{
				return this._JobStatusID;
			}
			set
			{
				if ((this._JobStatusID != value))
				{
					this.OnJobStatusIDChanging(value);
					this.SendPropertyChanging();
					this._JobStatusID = value;
					this.SendPropertyChanged("JobStatusID");
					this.OnJobStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="JobStatuse_Job", Storage="_Jobs", ThisKey="JobStatusID", OtherKey="JobStatusID")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.JobStatuse = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.JobStatuse = null;
		}
	}
	
	[Table(Name="dbo.Notes")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NoteID;
		
		private System.Guid _ParentID;
		
		private System.Guid _ParentTypeID;
		
		private string _NoteTitle;
		
		private string _Note1;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntityRef<Parent> _Parent;
		
		private EntityRef<ParentType> _ParentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoteIDChanging(System.Guid value);
    partial void OnNoteIDChanged();
    partial void OnParentIDChanging(System.Guid value);
    partial void OnParentIDChanged();
    partial void OnParentTypeIDChanging(System.Guid value);
    partial void OnParentTypeIDChanged();
    partial void OnNoteTitleChanging(string value);
    partial void OnNoteTitleChanged();
    partial void OnNote1Changing(string value);
    partial void OnNote1Changed();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public Note()
		{
			this._Parent = default(EntityRef<Parent>);
			this._ParentType = default(EntityRef<ParentType>);
			OnCreated();
		}
		
		[Column(Storage="_NoteID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NoteID
		{
			get
			{
				return this._NoteID;
			}
			set
			{
				if ((this._NoteID != value))
				{
					this.OnNoteIDChanging(value);
					this.SendPropertyChanging();
					this._NoteID = value;
					this.SendPropertyChanged("NoteID");
					this.OnNoteIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ParentTypeID
		{
			get
			{
				return this._ParentTypeID;
			}
			set
			{
				if ((this._ParentTypeID != value))
				{
					if (this._ParentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ParentTypeID = value;
					this.SendPropertyChanged("ParentTypeID");
					this.OnParentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_NoteTitle", DbType="VarChar(50)")]
		public string NoteTitle
		{
			get
			{
				return this._NoteTitle;
			}
			set
			{
				if ((this._NoteTitle != value))
				{
					this.OnNoteTitleChanging(value);
					this.SendPropertyChanging();
					this._NoteTitle = value;
					this.SendPropertyChanged("NoteTitle");
					this.OnNoteTitleChanged();
				}
			}
		}
		
		[Column(Name="Note", Storage="_Note1", DbType="VarChar(50)")]
		public string Note1
		{
			get
			{
				return this._Note1;
			}
			set
			{
				if ((this._Note1 != value))
				{
					this.OnNote1Changing(value);
					this.SendPropertyChanging();
					this._Note1 = value;
					this.SendPropertyChanged("Note1");
					this.OnNote1Changed();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="Parent_Note", Storage="_Parent", ThisKey="ParentID", OtherKey="ParentID", IsForeignKey=true)]
		public Parent Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				Parent previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._ParentID = value.ParentID;
					}
					else
					{
						this._ParentID = default(System.Guid);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[Association(Name="ParentType_Note", Storage="_ParentType", ThisKey="ParentTypeID", OtherKey="ParentTypeID", IsForeignKey=true)]
		public ParentType ParentType
		{
			get
			{
				return this._ParentType.Entity;
			}
			set
			{
				ParentType previousValue = this._ParentType.Entity;
				if (((previousValue != value) 
							|| (this._ParentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentType.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._ParentType.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._ParentTypeID = value.ParentTypeID;
					}
					else
					{
						this._ParentTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("ParentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Parents")]
	public partial class Parent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ParentID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<Note> _Notes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParentIDChanging(System.Guid value);
    partial void OnParentIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public Parent()
		{
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			OnCreated();
		}
		
		[Column(Storage="_ParentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="Parent_Note", Storage="_Notes", ThisKey="ParentID", OtherKey="ParentID")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
	}
	
	[Table(Name="dbo.ParentTypes")]
	public partial class ParentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ParentTypeID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<Note> _Notes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParentTypeIDChanging(System.Guid value);
    partial void OnParentTypeIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public ParentType()
		{
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			OnCreated();
		}
		
		[Column(Storage="_ParentTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ParentTypeID
		{
			get
			{
				return this._ParentTypeID;
			}
			set
			{
				if ((this._ParentTypeID != value))
				{
					this.OnParentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ParentTypeID = value;
					this.SendPropertyChanged("ParentTypeID");
					this.OnParentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="ParentType_Note", Storage="_Notes", ThisKey="ParentTypeID", OtherKey="ParentTypeID")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.ParentType = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.ParentType = null;
		}
	}
	
	[Table(Name="dbo.PhoneNumbers")]
	public partial class PhoneNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PhoneNumberID;
		
		private System.Nullable<System.Guid> _PhoneNumberTypeID;
		
		private string _AreaCode;
		
		private string _Prefix;
		
		private string _Suffix;
		
		private string _Extension;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<Contact> _Contacts;
		
		private EntityRef<PhoneNumberType> _PhoneNumberType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneNumberIDChanging(System.Guid value);
    partial void OnPhoneNumberIDChanged();
    partial void OnPhoneNumberTypeIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhoneNumberTypeIDChanged();
    partial void OnAreaCodeChanging(string value);
    partial void OnAreaCodeChanged();
    partial void OnPrefixChanging(string value);
    partial void OnPrefixChanged();
    partial void OnSuffixChanging(string value);
    partial void OnSuffixChanged();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public PhoneNumber()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._PhoneNumberType = default(EntityRef<PhoneNumberType>);
			OnCreated();
		}
		
		[Column(Storage="_PhoneNumberID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PhoneNumberID
		{
			get
			{
				return this._PhoneNumberID;
			}
			set
			{
				if ((this._PhoneNumberID != value))
				{
					this.OnPhoneNumberIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberID = value;
					this.SendPropertyChanged("PhoneNumberID");
					this.OnPhoneNumberIDChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneNumberTypeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhoneNumberTypeID
		{
			get
			{
				return this._PhoneNumberTypeID;
			}
			set
			{
				if ((this._PhoneNumberTypeID != value))
				{
					if (this._PhoneNumberType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneNumberTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberTypeID = value;
					this.SendPropertyChanged("PhoneNumberTypeID");
					this.OnPhoneNumberTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AreaCode", DbType="VarChar(50)")]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Prefix", DbType="VarChar(50)")]
		public string Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this.OnPrefixChanging(value);
					this.SendPropertyChanging();
					this._Prefix = value;
					this.SendPropertyChanged("Prefix");
					this.OnPrefixChanged();
				}
			}
		}
		
		[Column(Storage="_Suffix", DbType="VarChar(50)")]
		public string Suffix
		{
			get
			{
				return this._Suffix;
			}
			set
			{
				if ((this._Suffix != value))
				{
					this.OnSuffixChanging(value);
					this.SendPropertyChanging();
					this._Suffix = value;
					this.SendPropertyChanged("Suffix");
					this.OnSuffixChanged();
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="VarChar(50)")]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="PhoneNumber_Company", Storage="_Companies", ThisKey="PhoneNumberID", OtherKey="PrimaryPhoneNumberID")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[Association(Name="PhoneNumber_Contact", Storage="_Contacts", ThisKey="PhoneNumberID", OtherKey="PrimaryPhoneNumberID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[Association(Name="PhoneNumberType_PhoneNumber", Storage="_PhoneNumberType", ThisKey="PhoneNumberTypeID", OtherKey="PhoneNumberTypeID", IsForeignKey=true)]
		public PhoneNumberType PhoneNumberType
		{
			get
			{
				return this._PhoneNumberType.Entity;
			}
			set
			{
				PhoneNumberType previousValue = this._PhoneNumberType.Entity;
				if (((previousValue != value) 
							|| (this._PhoneNumberType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneNumberType.Entity = null;
						previousValue.PhoneNumbers.Remove(this);
					}
					this._PhoneNumberType.Entity = value;
					if ((value != null))
					{
						value.PhoneNumbers.Add(this);
						this._PhoneNumberTypeID = value.PhoneNumberTypeID;
					}
					else
					{
						this._PhoneNumberTypeID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("PhoneNumberType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.PhoneNumber = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.PhoneNumber = null;
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.PhoneNumber = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.PhoneNumber = null;
		}
	}
	
	[Table(Name="dbo.PhoneNumberTypes")]
	public partial class PhoneNumberType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PhoneNumberTypeID;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<PhoneNumber> _PhoneNumbers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneNumberTypeIDChanging(System.Guid value);
    partial void OnPhoneNumberTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public PhoneNumberType()
		{
			this._PhoneNumbers = new EntitySet<PhoneNumber>(new Action<PhoneNumber>(this.attach_PhoneNumbers), new Action<PhoneNumber>(this.detach_PhoneNumbers));
			OnCreated();
		}
		
		[Column(Storage="_PhoneNumberTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PhoneNumberTypeID
		{
			get
			{
				return this._PhoneNumberTypeID;
			}
			set
			{
				if ((this._PhoneNumberTypeID != value))
				{
					this.OnPhoneNumberTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberTypeID = value;
					this.SendPropertyChanged("PhoneNumberTypeID");
					this.OnPhoneNumberTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="PhoneNumberType_PhoneNumber", Storage="_PhoneNumbers", ThisKey="PhoneNumberTypeID", OtherKey="PhoneNumberTypeID")]
		public EntitySet<PhoneNumber> PhoneNumbers
		{
			get
			{
				return this._PhoneNumbers;
			}
			set
			{
				this._PhoneNumbers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhoneNumbers(PhoneNumber entity)
		{
			this.SendPropertyChanging();
			entity.PhoneNumberType = this;
		}
		
		private void detach_PhoneNumbers(PhoneNumber entity)
		{
			this.SendPropertyChanging();
			entity.PhoneNumberType = null;
		}
	}
	
	[Table(Name="dbo.Policies")]
	public partial class Policy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PolicyID;
		
		private string _PolicyNumber;
		
		private string _PolicyAmount;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPolicyIDChanging(System.Guid value);
    partial void OnPolicyIDChanged();
    partial void OnPolicyNumberChanging(string value);
    partial void OnPolicyNumberChanged();
    partial void OnPolicyAmountChanging(string value);
    partial void OnPolicyAmountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public Policy()
		{
			OnCreated();
		}
		
		[Column(Storage="_PolicyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PolicyID
		{
			get
			{
				return this._PolicyID;
			}
			set
			{
				if ((this._PolicyID != value))
				{
					this.OnPolicyIDChanging(value);
					this.SendPropertyChanging();
					this._PolicyID = value;
					this.SendPropertyChanged("PolicyID");
					this.OnPolicyIDChanged();
				}
			}
		}
		
		[Column(Storage="_PolicyNumber", DbType="VarChar(50)")]
		public string PolicyNumber
		{
			get
			{
				return this._PolicyNumber;
			}
			set
			{
				if ((this._PolicyNumber != value))
				{
					this.OnPolicyNumberChanging(value);
					this.SendPropertyChanging();
					this._PolicyNumber = value;
					this.SendPropertyChanged("PolicyNumber");
					this.OnPolicyNumberChanged();
				}
			}
		}
		
		[Column(Storage="_PolicyAmount", DbType="VarChar(50)")]
		public string PolicyAmount
		{
			get
			{
				return this._PolicyAmount;
			}
			set
			{
				if ((this._PolicyAmount != value))
				{
					this.OnPolicyAmountChanging(value);
					this.SendPropertyChanging();
					this._PolicyAmount = value;
					this.SendPropertyChanged("PolicyAmount");
					this.OnPolicyAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1024)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Relationships")]
	public partial class Relationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<CompanyXAddress> _CompanyXAddresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIDChanging(System.Guid value);
    partial void OnRelationshipIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public Relationship()
		{
			this._CompanyXAddresses = new EntitySet<CompanyXAddress>(new Action<CompanyXAddress>(this.attach_CompanyXAddresses), new Action<CompanyXAddress>(this.detach_CompanyXAddresses));
			OnCreated();
		}
		
		[Column(Storage="_RelationshipID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipID
		{
			get
			{
				return this._RelationshipID;
			}
			set
			{
				if ((this._RelationshipID != value))
				{
					this.OnRelationshipIDChanging(value);
					this.SendPropertyChanging();
					this._RelationshipID = value;
					this.SendPropertyChanged("RelationshipID");
					this.OnRelationshipIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="Relationship_CompanyXAddress", Storage="_CompanyXAddresses", ThisKey="RelationshipID", OtherKey="RelationshipID")]
		public EntitySet<CompanyXAddress> CompanyXAddresses
		{
			get
			{
				return this._CompanyXAddresses;
			}
			set
			{
				this._CompanyXAddresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyXAddresses(CompanyXAddress entity)
		{
			this.SendPropertyChanging();
			entity.Relationship = this;
		}
		
		private void detach_CompanyXAddresses(CompanyXAddress entity)
		{
			this.SendPropertyChanging();
			entity.Relationship = null;
		}
	}
	
	[Table(Name="dbo.RelationshipTypes")]
	public partial class RelationshipType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipTypeID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<Company> _Companies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipTypeIDChanging(System.Guid value);
    partial void OnRelationshipTypeIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public RelationshipType()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			OnCreated();
		}
		
		[Column(Storage="_RelationshipTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipTypeID
		{
			get
			{
				return this._RelationshipTypeID;
			}
			set
			{
				if ((this._RelationshipTypeID != value))
				{
					this.OnRelationshipTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeID = value;
					this.SendPropertyChanged("RelationshipTypeID");
					this.OnRelationshipTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="RelationshipType_Company", Storage="_Companies", ThisKey="RelationshipTypeID", OtherKey="RelationshipTypeID")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = null;
		}
	}
	
	[Table(Name="dbo.WorkItems")]
	public partial class WorkItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _WorkItemID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _ModifyDate;
		
		private EntitySet<WorkItemsXJobLocation> _WorkItemsXJobLocations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkItemIDChanging(System.Guid value);
    partial void OnWorkItemIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifyDateChanged();
    #endregion
		
		public WorkItem()
		{
			this._WorkItemsXJobLocations = new EntitySet<WorkItemsXJobLocation>(new Action<WorkItemsXJobLocation>(this.attach_WorkItemsXJobLocations), new Action<WorkItemsXJobLocation>(this.detach_WorkItemsXJobLocations));
			OnCreated();
		}
		
		[Column(Storage="_WorkItemID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid WorkItemID
		{
			get
			{
				return this._WorkItemID;
			}
			set
			{
				if ((this._WorkItemID != value))
				{
					this.OnWorkItemIDChanging(value);
					this.SendPropertyChanging();
					this._WorkItemID = value;
					this.SendPropertyChanged("WorkItemID");
					this.OnWorkItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifyDate
		{
			get
			{
				return this._ModifyDate;
			}
			set
			{
				if ((this._ModifyDate != value))
				{
					this.OnModifyDateChanging(value);
					this.SendPropertyChanging();
					this._ModifyDate = value;
					this.SendPropertyChanged("ModifyDate");
					this.OnModifyDateChanged();
				}
			}
		}
		
		[Association(Name="WorkItem_WorkItemsXJobLocation", Storage="_WorkItemsXJobLocations", ThisKey="WorkItemID", OtherKey="WorkItemID")]
		public EntitySet<WorkItemsXJobLocation> WorkItemsXJobLocations
		{
			get
			{
				return this._WorkItemsXJobLocations;
			}
			set
			{
				this._WorkItemsXJobLocations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkItemsXJobLocations(WorkItemsXJobLocation entity)
		{
			this.SendPropertyChanging();
			entity.WorkItem = this;
		}
		
		private void detach_WorkItemsXJobLocations(WorkItemsXJobLocation entity)
		{
			this.SendPropertyChanging();
			entity.WorkItem = null;
		}
	}
}
#pragma warning restore 1591
